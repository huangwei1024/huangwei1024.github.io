<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuangWei&#39;s blog</title>
  <subtitle>That depends a good deal on where you want to get to</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangwei.pro/"/>
  <updated>2016-04-14T08:48:03.561Z</updated>
  <id>http://huangwei.pro/</id>
  
  <author>
    <name>HuangWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang笔记</title>
    <link href="http://huangwei.pro/2016-03/golang-note1/"/>
    <id>http://huangwei.pro/2016-03/golang-note1/</id>
    <published>2016-03-01T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.561Z</updated>
    
    <content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;整理的有点乱，都是开发中遇到的问题和网上看到好文章的记录，作为知识点保存下。&lt;/p&gt;
&lt;h2 id=&quot;Array和Slice&quot;&gt;&lt;a href=&quot;#Array和Slice&quot; class=&quot;headerlink&quot; title=&quot;Array和Slice&quot;&gt;&lt;/a&gt;Array和Slice&lt;/h2&gt;&lt;h3 id=&quot;声明和初始化&quot;&gt;&lt;a href=&quot;#声明和初始化&quot; class=&quot;headerlink&quot; title=&quot;声明和初始化&quot;&gt;&lt;/a&gt;声明和初始化&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Array_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Array定义&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ArrayType   = “[“ ArrayLength “]” ElementType .&lt;/p&gt;
&lt;p&gt;ArrayLength = Expression .&lt;/p&gt;
&lt;p&gt;ElementType = Type .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Go 语言中数组是&lt;strong&gt;固定长度&lt;/strong&gt;的数据类型。一旦数组被声明了，那么它的数据类型跟长度都不能再被改变。如果你需要更多的元素，那么只能创建一个你想要长度的新的数组，然后把原有数组的元素拷贝过去。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明一个长度为5的整数数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明一个长度为5的整数数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化每个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;77777&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过初始化值的个数来推导出数组容量, ...在这里表示自动推导&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array := [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;77777&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明一个长度为5的整数数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为索引为1和2的位置指定元素初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 剩余元素为0值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/ref/spec#Slice_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slice定义&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SliceType = “[“ “]” ElementType .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;slice 是一种可以&lt;strong&gt;动态数组&lt;/strong&gt;，可以按我们的希望增长和收缩。它跟Array声明的区别就在于&lt;code&gt;[]&lt;/code&gt;里面是空的。两者在机制上的区别，Array更像是块线性存储区，Slice像Array的引用并加上长度和容量的管理。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个长度和容量都是 5的slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Red&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Green&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Pink&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个有100个元素的空的字符串 slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个容量为5，长度为3的slice	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;nil-和-empty&quot;&gt;&lt;a href=&quot;#nil-和-empty&quot; class=&quot;headerlink&quot; title=&quot;nil 和 empty&quot;&gt;&lt;/a&gt;nil 和 empty&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 光声明，不初始化，slice就是nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用make或字面值创建，slice是empty的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;silce := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不管我们用 nil slice 还是 empty slice，内建函数 &lt;code&gt;append&lt;/code&gt;，&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;cap&lt;/code&gt;的工作方式完全相同。&lt;/p&gt;
&lt;h4 id=&quot;append&quot;&gt;&lt;a href=&quot;#append&quot; class=&quot;headerlink&quot; title=&quot;append&quot;&gt;&lt;/a&gt;append&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice []Type, elems ...Type) []Type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果slice的所引用的存储区容量够大，返回的slice就是本身。如果容量不够，Go底层会新分配一块存储区，并复制和添加相关数据到新存储区。所以&lt;code&gt;append&lt;/code&gt;后一定要使用它的返回值。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice, elem1, elem2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice, anotherSlice...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;特殊得，byte slice添加string也是合法的。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slice = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意string后面的&lt;code&gt;...&lt;/code&gt;，相当与是对string的解包，相关的概念在Python和Lua等动态型语言里也有。&lt;/p&gt;
&lt;h4 id=&quot;存储机制理解&quot;&gt;&lt;a href=&quot;#存储机制理解&quot; class=&quot;headerlink&quot; title=&quot;存储机制理解&quot;&gt;&lt;/a&gt;存储机制理解&lt;/h4&gt;&lt;p&gt;看这么几个图就明白了。&lt;/p&gt;
&lt;p&gt;Array结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.golang.org/go-slices-usage-and-internals_slice-array.png&quot; alt=&quot;Array&quot;&gt;&lt;/p&gt;
&lt;p&gt;Slice结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.golang.org/go-slices-usage-and-internals_slice-struct.png&quot; alt=&quot;Slice Struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;Slice表示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.golang.org/go-slices-usage-and-internals_slice-1.png&quot; alt=&quot;Slice&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b := a[:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(a, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// [1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// [1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(b) &lt;span class=&quot;comment&quot;&gt;// [1 2 0 0 0] a和b是同个存储区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// [3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(b) &lt;span class=&quot;comment&quot;&gt;// [3 2 0 0 0] a和b是同个存储区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(b, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(b) &lt;span class=&quot;comment&quot;&gt;// [3 2 0 0 0 4] b新建存储区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// [3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(b) &lt;span class=&quot;comment&quot;&gt;// [5 2 0 0 0 4] 从此a和b是路人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://dwz.cn/2Pcjro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dwz.cn/2Pcjro&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;函数传递&quot;&gt;&lt;a href=&quot;#函数传递&quot; class=&quot;headerlink&quot; title=&quot;函数传递&quot;&gt;&lt;/a&gt;函数传递&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;Array作为固定长度的存储区，作为参数传递时，它的行为代价是昂贵的。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array [&lt;span class=&quot;number&quot;&gt;1e6&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; foo(array [&lt;span class=&quot;number&quot;&gt;1e6&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每一次 &lt;code&gt;foo&lt;/code&gt; 被调用，8兆内存将会被分配在栈上。一旦函数返回，会弹栈并释放内存，每次都需要8兆空间。&lt;/p&gt;
&lt;p&gt;当然可以传指针来解决这个问题。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array [&lt;span class=&quot;number&quot;&gt;1e6&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;amp;array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; foo(array *[&lt;span class=&quot;number&quot;&gt;1e6&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但你在函数中改变指针指向的值，那么原始数组的值也会被改变。&lt;/p&gt;
&lt;p&gt;而传递Slice是很廉价的。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(unsafe.Sizeof([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;)) &lt;span class=&quot;comment&quot;&gt;// size 24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;深度阅读参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.golang.org/slices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arrays, slices (and strings): The mechanics of ‘append’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.golang.org/go-slices-usage-and-internals&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go Slices: usage and internals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;h3 id=&quot;声明和初始化-1&quot;&gt;&lt;a href=&quot;#声明和初始化-1&quot; class=&quot;headerlink&quot; title=&quot;声明和初始化&quot;&gt;&lt;/a&gt;声明和初始化&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;map 是一种&lt;strong&gt;无序&lt;/strong&gt;的键值对的集合。 map 是使用 hash 表来实现的。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过 make 来创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过字面值创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Red&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;#da1337&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;#e95a22&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用字面值是创建 map 惯用的方法。&lt;/p&gt;
&lt;h3 id=&quot;键值比较&quot;&gt;&lt;a href=&quot;#键值比较&quot; class=&quot;headerlink&quot; title=&quot;键值比较&quot;&gt;&lt;/a&gt;键值比较&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;C++的&lt;code&gt;std::map&lt;/code&gt;支持自定义类型作为键值，只要重载&lt;code&gt;operator&amp;lt;&lt;/code&gt;即可。在Go里也有类似概念，但Go没有操作符重载，并且map用hash实现的，所以键值比较是靠&lt;code&gt;==&lt;/code&gt;操作符。&lt;/p&gt;
&lt;p&gt;除了内建类型，struct类型的&lt;code&gt;==&lt;/code&gt;比较是逐个比较相应字段，只要相应字段都可比较那struct也就是可比较的。如slice，function是不可比较的，那包含 slice 的 struct 类型也不可以作为 map 的键，否则会编译错误。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dict := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[[]&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiler Exception:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invalid &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;struct-用途&quot;&gt;&lt;a href=&quot;#struct-用途&quot; class=&quot;headerlink&quot; title=&quot;struct{}用途&quot;&gt;&lt;/a&gt;struct{}用途&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;http://dave.cheney.net/2014/03/25/the-empty-struct&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The empty struct&lt;/a&gt;里的说明。&lt;/p&gt;
&lt;p&gt;比如Go没有内置Set实现，我们会用map来模拟，那&lt;code&gt;map[int]bool&lt;/code&gt;和&lt;code&gt;map[int]struct{}&lt;/code&gt;哪个好？&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; = s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(unsafe.Sizeof(b)) &lt;span class=&quot;comment&quot;&gt;// prints 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(unsafe.Sizeof(s)) &lt;span class=&quot;comment&quot;&gt;// prints 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(unsafe.Sizeof(i)) &lt;span class=&quot;comment&quot;&gt;// prints 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://dwz.cn/2PcWLF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dwz.cn/2PcWLF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基于上述struct{}对内存友好，优于&lt;code&gt;bool&lt;/code&gt;和&lt;code&gt;interface{}&lt;/code&gt;，我们可以优雅的实现Set。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Empty &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; empty Empty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;]Empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，类似的还有，channel用来传递信号可以定义为&lt;code&gt;chan struct {}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请注意struct{}有这么一个坑，结果和直觉有点不符。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a, b &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&amp;amp;a == &amp;amp;b) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&amp;amp;a == &amp;amp;b)       &lt;span class=&quot;comment&quot;&gt;// false, a and b are different slices&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&amp;amp;a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &amp;amp;b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;// true, their backing arrays are the same&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;reflect-DeepEqual&quot;&gt;&lt;a href=&quot;#reflect-DeepEqual&quot; class=&quot;headerlink&quot; title=&quot;reflect.DeepEqual&quot;&gt;&lt;/a&gt;reflect.DeepEqual&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;/h2&gt;&lt;p&gt;如果有两个map，内容都一样，只有顺序不同。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;m1:=&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m2:=&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们怎么判断二者是否一致呢？&lt;/p&gt;
&lt;p&gt;如果你打算这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;m1==m2&quot;&lt;/span&gt;,m1==m2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是行不通的，Go没有重写map的==操作符，编译器会报告错误：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invalid operation: m1 == m2 (&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt; can only be compared to &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Go的反射包中有一个巨好用的武器reflect.DeepEqual,可以方便解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dwz.cn/2PdMHG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dwz.cn/2PdMHG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;持续更新中ing…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Golang笔记
    
    </summary>
    
      <category term="go" scheme="http://huangwei.pro/categories/go/"/>
    
    
      <category term="dev-log" scheme="http://huangwei.pro/tags/dev-log/"/>
    
      <category term="go" scheme="http://huangwei.pro/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>pixi.js初体验</title>
    <link href="http://huangwei.pro/2016-02/pixi-test/"/>
    <id>http://huangwei.pro/2016-02/pixi-test/</id>
    <published>2016-02-20T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.566Z</updated>
    
    <content type="html">&lt;p&gt;有谁还记得&lt;a href=&quot;https://www.zhihu.com/people/eastecho&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;边城浪子&lt;/a&gt;吗？有谁还记得闪客帝国吗？感觉这是个暴露年龄的问题。&lt;/p&gt;
&lt;p&gt;记得我初中那会有了台自己的电脑。然后用猫上网挂着，以可怜的下载速度，用网站抓取软件下载闪客里的Flash小游戏到本地。当然，一到每月话费结算的时候，都少不了家长的一顿揍。&lt;/p&gt;
&lt;p&gt;在知乎上看到边城浪子创建了独立游戏社区&lt;a href=&quot;http://indienova.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;独立精神&lt;/a&gt;，上去看了下，原创和翻译的文章都很赞，而且有很多在线的js动画，能很好的展示相关算法。搞的我也心痒痒想学下js。&lt;/p&gt;
&lt;p&gt;刚好网站上有篇&lt;a href=&quot;http://indienova.com/indie-game-development/pixie-js-getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pixi.js 初步&lt;/a&gt;介绍，看着也挺简单，打算在自己Hexo搭建的这个博客上也用上pixi.js。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;遇到这么几个问题，希望对大家有用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;教学文章里创建canvas用的方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderer = PIXI.autoDetectRenderer(&lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;, &amp;#123;backgroundColor : &lt;span class=&quot;number&quot;&gt;0x1099bb&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(renderer.view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  如果你要指定canvas的话，可以这样：&lt;/p&gt;
  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;canvas id=&quot;canvas&quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderer = PIXI.autoDetectRenderer(&lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;, &amp;#123;view: canvas&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对canvas不能进行&lt;code&gt;getContext&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = canvas.getContext(&lt;span class=&quot;string&quot;&gt;&quot;2d&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  我发现&lt;code&gt;getContext&lt;/code&gt;之后就绘制不出来了，别问我原因，我js是菜鸟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;要在HTTP服务器环境下运行，直接在本地打开HTML文件是没法使用的。&lt;/p&gt;
&lt;p&gt;比如打开链接&lt;code&gt;file:///D:/source/static/pixitest.html&lt;/code&gt;，当创建Sprite的时候，指定img资源路径console显示不能跨域操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML文件放在某些目录下会被Hexo转换掉。这就需要设定忽略目录，在Hexo的&lt;code&gt;_config.yml&lt;/code&gt;里配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;skip_render:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;_drafts/**&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;static/**&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;我现在是用&lt;code&gt;iframe&lt;/code&gt;方式嵌入。可能是因为我主题的缘故，在md里定义了一些CSS和Script后，显示会出现错乱。用&lt;code&gt;iframe&lt;/code&gt;的方式比较独立单纯些，不会跟主题本身的一些定义混杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面窗口的这个例子，大家可以直接跳转到&lt;a href=&quot;/static/pixitest.html&quot;&gt;pixitest.html&lt;/a&gt;去查看源码。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;iframe src=&quot;/static/pixitest.html&quot; height=&quot;400&quot; width=&quot;800&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      pixi.js 是一款超快开源 HTML5 2D 渲染引擎
    
    </summary>
    
      <category term="js" scheme="http://huangwei.pro/categories/js/"/>
    
    
      <category term="js" scheme="http://huangwei.pro/tags/js/"/>
    
      <category term="pixi" scheme="http://huangwei.pro/tags/pixi/"/>
    
  </entry>
  
  <entry>
    <title>创业小结（二）</title>
    <link href="http://huangwei.pro/2016-01/startup2/"/>
    <id>http://huangwei.pro/2016-01/startup2/</id>
    <published>2016-01-24T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.567Z</updated>
    
    <content type="html">&lt;h2 id=&quot;迟来的总结&quot;&gt;&lt;a href=&quot;#迟来的总结&quot; class=&quot;headerlink&quot; title=&quot;迟来的总结&quot;&gt;&lt;/a&gt;迟来的总结&lt;/h2&gt;&lt;p&gt;时间飞逝，一眨眼就到了2016年了，距离上一篇&lt;a href=&quot;http://huangwei.pro/2015-01/startup1/&quot;&gt;创业小结&lt;/a&gt;刚好过去一年了，本来第一篇也只是记录到2014年第三季度，想着以后有空慢慢补，回头发现这根本就是个假设，翻翻今年在网上买的各种书籍，也是大多没看完，有些连封皮都没来得及拆，真是对自己汗颜。每次想着写总结的时候，都想着先把手头其它事先做完再说，有时还是临时起意加了些事，比如今天用Anconda玩了下IPython和一些数据绘图，然后时间就这么过去了。所以现在就不管其它，先赶在一月结束前写完这篇总结，算是了一桩心事。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;现在&quot;&gt;&lt;a href=&quot;#现在&quot; class=&quot;headerlink&quot; title=&quot;现在&quot;&gt;&lt;/a&gt;现在&lt;/h2&gt;&lt;p&gt;有些涉及公司机密和利益相关的就不先表了。先来说说现在的状况吧，第一款产品在2015年初经了过漫长的产品迭代和商务洽谈，安卓版本终于在2015年9月上线，也算是个月流水百万的产品。今年我们的团队规模从不到10人扩大到20人，原来80平不到的小作坊明显已经塞不下这么多人，换了个相当明亮通透的办公间，也有了一间真正的会议室。&lt;/p&gt;
&lt;p&gt;但在这个行业里的朋友应该知道，流水只是账面上的，去除税点、各项成本和渠道分成，到CP手上大约就剩两成。第一款产品的成本约300万，流水的分成不足以支持下一款产品的开发，而且创业积累的经验，让我们越来越明白，在当下的市场环境，小打小闹已经没有啥生存空间。IP、二次元、MOBA、电竞、大厂各种兴奋点在2015年持续爆发，而资本寒冬、产品同质化等因素又导致小CP在大潮之下纷纷倒闭。根据&lt;a href=&quot;http://www.199it.com/archives/427459.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;艾瑞咨询2015年的数据&lt;/a&gt;可以看到移动游戏市场依然很红火，但是大厂的垄断格局越来越明显。这是2016新年的新挑战。&lt;/p&gt;
&lt;p&gt;所以我们走在继续融资的路上。在2015年第四季度这样的资本环境下煎熬得等着资方消息，所幸现在都已经走完流程，这颗悬着心暂时放下了。2016年的这波强寒潮袭来，希望今年能够一帆风顺些。&lt;/p&gt;
&lt;h2 id=&quot;团队&quot;&gt;&lt;a href=&quot;#团队&quot; class=&quot;headerlink&quot; title=&quot;团队&quot;&gt;&lt;/a&gt;团队&lt;/h2&gt;&lt;p&gt;刚提到团队人员规模的扩大。小团队啥事都得自己亲力亲为，第一个项目上线那会，我既要做运维，要修bug，统计后台数据，还要赶紧开发新功能赶上发行的投放日期。那段时间真是没日没夜，平均每天工作15小时，回家的时候妻儿都一觉睡醒了，一有事就得及时处理。为了结束这种不可持续发展的野蛮模式，人员扩招是不可避免的，但又限于薪资成本考虑，招了2015年和2016年的应届生各一个，加上之前项目后期招的一个学弟，和从&lt;code&gt;网易&lt;/code&gt;带出来的学弟，加上自己一共5个程序，一路下来还没人退出。策划团队之前是三人，一个家里有事没等到上线就回老家了，另外一个跟我们闹掰走了。后来找了两个有一两年工作经验的小伙子。&lt;/p&gt;
&lt;p&gt;美术团队基本是做了大换血，从&lt;code&gt;网易&lt;/code&gt;工作室跟我们一起出来的两个美术，原本的主美被我们撤职后基本处于残废状态。另外一个在刚担任主美时还是积极负责的，随着与外包沟通的杂事越来越多，也出现了各种疲态，后来因为身体原因就完全歇菜了。而后招的美术UI在主美的“无为而治”的管理下处于放养状态。在上线前后，三位都各自离开，初创时的美术团队在创业一年后分崩离析。&lt;/p&gt;
&lt;p&gt;对于美术团队的组建和主美的选定，我们痛定思痛，总结了几个教训。首先，美术门道比较深，并不是我们预想的那样这搞下那弄下就能出的来，需要自身美术功底好并且能把控好风格的主美来负责。其次，搞美术的人的性格和想法相较于程序或策划更具感性和独特，程序和策划工作更多的是理性和逻辑，所以主美必须懂得如何在美术和团队其他人之间架起沟通桥梁。再者，游戏开发是一种协作式生产流程，对于进度任务和理想目标的追求既相互作用又相互制约，需要主美能够有一定的实战项目经验，懂得进度和理想的权衡。&lt;/p&gt;
&lt;p&gt;所以想来想去，这种量级的主美，只能去大公司挖，而且是合伙人级别，这样的要求和不宽裕的组建时间，找到谈何容易。在创业一年多的时间里，好多时候我们是处于未知和等待中，然后幂幂之中似乎上天总有安排，我们只是顺势而为。这次也是，国内某二线游戏公司手游项目解散，刚好也有朋友关系介绍，见面聊了几次后，那位美术总监便加入我们团队，也成为了我们的合伙人。&lt;/p&gt;
&lt;p&gt;随之发生剧烈变化的美术团队，在一个月之内，我们新增了4位都有大厂项目经验，工作5、6年的美术，年后还会有新人加入。接管和规范了原画、模型、动作、特效、UI等等的美术工作。上天让我们相遇的时机只能说是完美。不过团队总是要经历磨合期的，但有理由相信这次大成本的投入来建设美术团队，能为我们带来效率和质量上的提高。&lt;/p&gt;
&lt;h2 id=&quot;文化&quot;&gt;&lt;a href=&quot;#文化&quot; class=&quot;headerlink&quot; title=&quot;文化&quot;&gt;&lt;/a&gt;文化&lt;/h2&gt;&lt;p&gt;相对于企业文化，因为按工作类型划分成程序，策划，美术团队，各自团队工作内容不同而产生不同文化（比如程序团队是程序员文化），主要负责人有各自喜好的管理方式（比如我会略喜好一些协作化平台来管理任务和进度，如&lt;a href=&quot;https://www.teambition.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Teambition&lt;/a&gt;），所以我们现在充其量是团队文化。&lt;/p&gt;
&lt;p&gt;由于程序团队里，新人较多，有很大一部分工作要部署学习任务、指导和检查结果。所以虽然现在人多了，但当新人还不能稳定的输出生产代码时，反倒是加重骨干人员的工作量。对于这种情况，原本的解决方案可以集中进行上岗培训，ppt来解释工作方式和流程。但我们一直缺少相应的文档或记录，所以每次新人来都是口口相传，效率低下。&lt;/p&gt;
&lt;p&gt;因为新人暴增，我们给新员工找了合租的房子，这是蛮好的一种新人融入手段，刚好来的略早的新人可以带着刚来的新人一起摸索研究，也相应的减少些骨干人员工作量。分享以前是存放在svn上的，不过&lt;a href=&quot;https://www.teambition.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Teambition&lt;/a&gt;可以上传并且@给某人消息，还是比较方便的，现在我们的日报、分享、任务都是基于这个平台，我也在这安利下它。&lt;/p&gt;
&lt;h3 id=&quot;规划&quot;&gt;&lt;a href=&quot;#规划&quot; class=&quot;headerlink&quot; title=&quot;规划&quot;&gt;&lt;/a&gt;规划&lt;/h3&gt;&lt;p&gt;今年希望能产出两款产品，有过了第一款产品的挫折和经历，更了解研发路程的艰辛，还有很多市场不确定因素，但我们还是得一往无前得努力下去。&lt;/p&gt;
&lt;p&gt;然后，产品也会去商谈一些IP合作，为了迎合市场和玩家，这是当下国内游戏圈大家都在挖心思的地方。我承认我们没法做到抛弃现实只关注Gameplay，在独立游戏和商业网游的两头我们还是接近商业多些，毕竟得活下来，对得起一起创业的兄弟。&lt;/p&gt;
&lt;p&gt;技术方向，新项目依然使用Cocos2dx，不过客户端升级了下版本。动作摒弃了CocosStudio，买了Spine的正版授权，虽然Spine在编辑器和功能方面完胜CocosStudio，但是细节上有很多概念与它不同，我们对Spine的library也进行了一番改造（如打断动作时，可能出现的残留问题），后面有空再单独开个文章。&lt;/p&gt;
&lt;p&gt;服务器准备使用Golang来实现，第一个项目为了快速开发使用的是Python，由于其GIL的问题，导致在单核性能不强的云主机上没法发挥多核的优势。其次，Python毕竟不是编译型语言，没有很好的静态代码检查机制，很多时候就需要进行代码覆盖率测试。当然Golang也有各种问题，毕竟语言还很新，GC在1.5之后才得到改善，关键还是Golang开发人员还不多，招人是个大问题。&lt;/p&gt;
&lt;p&gt;不管怎么说，2016年对我们而言，依然是个挑战之年，fighting！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      创业过程中的点点滴滴记录
    
    </summary>
    
      <category term="startup" scheme="http://huangwei.pro/categories/startup/"/>
    
    
      <category term="summary" scheme="http://huangwei.pro/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>关于寻路算法的一些思考（11）：寻路算法的其他应用</title>
    <link href="http://huangwei.pro/2015-09/think-pathfind-11/"/>
    <id>http://huangwei.pro/2015-09/think-pathfind-11/</id>
    <published>2015-09-24T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.567Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的。“关于寻路算法的一些思考”是一个系列，其它部分均由伯乐翻译组其它小伙伴贡献。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/71044/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（1）：A* 算法介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/84694/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（2）：Heuristics 函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/85676/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（3）：A* 算法的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/85677&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（4）：A* 算法的变体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/83499/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（5）：处理移动中的障碍物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/84660/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（6）：预先计算好的路径的所用空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/89215/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（7）：地图表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/83458/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（8）：长期和短期目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/90682/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（9）：寻路者的移动成本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/83498/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（10）：最短路径的用户体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/83494/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（11）：寻路算法的其他应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/90681/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于寻路算法的一些思考（12）：AI 技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;除了查找一条可沿着移动找到一个单位的路径之外，寻路在其它方面还有很多用途。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;&lt;strong&gt;探索&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;如果你的成本函数对已知世界的路径进行惩罚，那路径更有可能会通过处女地。这些路径能很好的侦测到其它单位。&lt;/p&gt;
&lt;h3 id=&quot;侦查&quot;&gt;&lt;a href=&quot;#侦查&quot; class=&quot;headerlink&quot; title=&quot;侦查&quot;&gt;&lt;/a&gt;&lt;strong&gt;侦查&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;如果你的成本函数对敌方瞭望塔等单位附近的路径进行惩罚，那你的单位会倾向保持隐蔽。但请注意，为了能良好运行，你需要考虑到敌方单位的移动，定期更新你的路径。&lt;/p&gt;
&lt;h3 id=&quot;道路建设&quot;&gt;&lt;a href=&quot;#道路建设&quot; class=&quot;headerlink&quot; title=&quot;道路建设&quot;&gt;&lt;/a&gt;&lt;strong&gt;道路建设&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;从历史上看，道路沿着是经常使用的路径被建造。当路径走的越来越多时，植被被清除，变成泥路，再后来用石头或其它材料覆盖。寻路的一个应用就是找到道路。考虑到人们通行（去城市，湖泊，泉水，矿山等等），会随机得找到这些重要地点之间的路径。在发现上百上千次路径后，确定地图上的哪些空间最常被使用在路径上，然后把这些空间变成道路。跟随探索者喜欢的道路，重复该实验，你会发现更多的道路需要被建设。这种技术可以用于多种类型的道路（高速公路，公路，泥路）：最常用的空间应该变成高速公路，不太常用的空间变成普通公路或者泥路。&lt;/p&gt;
&lt;h3 id=&quot;地形分析&quot;&gt;&lt;a href=&quot;#地形分析&quot; class=&quot;headerlink&quot; title=&quot;地形分析&quot;&gt;&lt;/a&gt;&lt;strong&gt;地形分析&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;结合势力图，寻路和视线可以给你有趣的方式来分析地形。&lt;/p&gt;
&lt;p&gt;用与道路建设同样的方法，给定一组起点和目标点，我们可以使用寻路来确定哪些区域是最有可能被访问到的，这些区域附近往往具有重要的战略意义。Clash of Civilizations就是使用这种方式来实现它们的地图AI。&lt;/p&gt;
&lt;p&gt;通过进一步分析公共路径，我们可以找到伏击点。路径上没有被视线扫到的位置，继续沿着路径再走N步之后才能被看到，部署伏击点在这些位置上意味着当前敌方无法看到你，直到你们的距离小于N时，这样你就能伏击大部队了。&lt;/p&gt;
&lt;h3 id=&quot;城市建设&quot;&gt;&lt;a href=&quot;#城市建设&quot; class=&quot;headerlink&quot; title=&quot;城市建设&quot;&gt;&lt;/a&gt;&lt;strong&gt;城市建设&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;城市往往是围绕着自然资源形成的，比如农田和矿产。城市里的居民相互交易需要贸易路线，使用寻路来帮助他们找到自己的贸易路线，并且在路线上标注行进一天的价值。当商队走了一天需要找个地方驻扎时：一个完美的城市位置！沿着一条以上的贸易路线的村庄是用于交易的好地方，最终它会成长为城市。&lt;/p&gt;
&lt;p&gt;道路建设和城市建设相结合可以用于生成出逼真的地图，无论是剧本还是随机地图。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      关于寻路算法的一些思考（11）：寻路算法的其他应用
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="game" scheme="http://huangwei.pro/tags/game/"/>
    
      <category term="pathfinding" scheme="http://huangwei.pro/tags/pathfinding/"/>
    
  </entry>
  
  <entry>
    <title>现代OpenGL教程 04 - 相机，向量，输入</title>
    <link href="http://huangwei.pro/2015-09/modern-opengl4/"/>
    <id>http://huangwei.pro/2015-09/modern-opengl4/</id>
    <published>2015-08-31T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.564Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/modern-opengl-04.png&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇教程中，我们会巩固上一篇所提到的矩阵和相机知识，并使用&lt;code&gt;tdogl::Camera&lt;/code&gt;类来实现第一人称射击类型的相机。然后，我们会将相机与键盘和鼠标挂钩，使得我们可以移动和浏览3D场景。这里会学一些向量数学，还有上一篇没提到的逆矩阵。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;获取代码&quot;&gt;&lt;a href=&quot;#获取代码&quot; class=&quot;headerlink&quot; title=&quot;获取代码&quot;&gt;&lt;/a&gt;获取代码&lt;/h2&gt;&lt;p&gt;所有例子代码的zip打包可以从这里获取：&lt;a href=&quot;https://github.com/tomdalling/opengl-series/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series/archive/master.zip&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这一系列文章中所使用的代码都存放在：&lt;a href=&quot;https://github.com/tomdalling/opengl-series&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series&lt;/a&gt;。你可以在页面中下载zip，加入你会git的话，也可以复制该仓库。&lt;/p&gt;
&lt;p&gt;本文代码你可以在&lt;code&gt;&lt;a href=&quot;https://github.com/tomdalling/opengl-series/tree/master/source/04_camera&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source/04_camera&lt;/a&gt;&lt;/code&gt;目录里找到。使用OS X系统的，可以打开根目录里的&lt;code&gt;opengl-series.xcodeproj&lt;/code&gt;，选择本文工程。使用Windows系统的，可以在Visual Studio 2013里打开&lt;code&gt;opengl-series.sln&lt;/code&gt;，选择相应工程。&lt;/p&gt;
&lt;p&gt;工程里已包含所有依赖，所以你不需要再安装或者配置额外的东西。如果有任何编译或运行上的问题，请联系我。&lt;/p&gt;
&lt;h2 id=&quot;向量理论&quot;&gt;&lt;a href=&quot;#向量理论&quot; class=&quot;headerlink&quot; title=&quot;向量理论&quot;&gt;&lt;/a&gt;向量理论&lt;/h2&gt;&lt;p&gt;在上一篇学了矩阵理论后，你以为数学理论课就结束了？想得太美了，现在下一部分就来了：&lt;a href=&quot;http://en.wikipedia.org/wiki/Euclidean_vector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;向量&lt;/a&gt;。正统的理解认为向量是3D编程的基础。后面我会展示些代码，是用键盘来进行向量运算，让相机可以在不同方向上移动。&lt;/p&gt;
&lt;p&gt;在3D中（2D中也一样），向量经常用来表示一些不同的东西，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位置（即，坐标）&lt;/li&gt;
&lt;li&gt;位移（比如，移动）&lt;/li&gt;
&lt;li&gt;方向（比如，南北，上下）&lt;/li&gt;
&lt;li&gt;速度（比如，车的速度和方向）&lt;/li&gt;
&lt;li&gt;加速（比如，重力）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可能注意到了上面所提的一些概念都是通常是用来实现物理引擎的。我们在本文中不会实现所有的物理，但为了更好的理解向量，第一步让我们来一些物理教学。&lt;/p&gt;
&lt;p&gt;什么是向量？&lt;mark&gt;一种伪数学的定义上来说，一个向量(vector)就是&lt;em&gt;幅度(magnitude)&lt;/em&gt;加上&lt;em&gt;方向&lt;/em&gt;。&lt;/mark&gt;它能向上，向下，往左，往右，朝北，朝西南等等。你能用3D向量来表示任何一个你指向的方向。向量的另一部分，幅度，表示向量的长度或者大小。&lt;/p&gt;
&lt;p&gt;向量最简单的可视化方式就是绘制它，一般向量都会被绘制为箭头。箭头所指的方向就是向量的方向，箭头的长度就是幅度。下面的图是一个2D向量，但2D的理论同样能应用到3D上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/visual_rep_of_vector.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;下面用例子来说明向量代表的不同含义。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;方向&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;幅度&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;往北5千米&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;北&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5千米&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;头上5厘米&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;上&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5厘米&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;以50千米每小时开往西湖&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;西湖方向&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50千米/每小时&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;速度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;地球引力为9.8m/s&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;往地球质心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9.8m/s&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;加速&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;当编码时，向量只是一组数字。每个数字都是向量的“一维”。比如，一个三维3D向量就是有3个数字的数组，2D向量是有2个数字。&lt;/mark&gt;因为我们是在3D中进行工作，所以大部分情况只要处理3D向量，但我们也需要用到4D。无论何时我说“向量”，那意味着是3D向量。我们使用GLM的向量数学库，2D，3D，4D的类型分别为&lt;code&gt;glm::vec2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;,&lt;code&gt;glm::vec3&lt;/code&gt;,&lt;code&gt;glm::vec4&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;3D向量表示顶点，坐标或者位置相当简单。&lt;mark&gt;3D向量的3个维度分别是X，Y，Z的值。&lt;/mark&gt;当向量表示位置，方向和幅度时，都是从原点(0,0,0)开始计算的。比如，假设一个物体的XYZ坐标为(0,2,0)，则它的幅度是2，方向为“沿Y轴向上”。&lt;/p&gt;
&lt;h2 id=&quot;负向量&quot;&gt;&lt;a href=&quot;#负向量&quot; class=&quot;headerlink&quot; title=&quot;负向量&quot;&gt;&lt;/a&gt;负向量&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;当你要将向量取负时，就是保持相同的幅度，但变成了反方向。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/vector_negation.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;A=向北5千米&lt;br&gt;&lt;br&gt;&lt;br&gt;-A=向南5千米&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;如果相机的方向是往右的，我们可以使用负向量来算出相机往左的方向。就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 rightDirection = gCamera.right();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 leftDirection = -rightDirection; &lt;span class=&quot;comment&quot;&gt;//vector negation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;标量乘法&quot;&gt;&lt;a href=&quot;#标量乘法&quot; class=&quot;headerlink&quot; title=&quot;标量乘法&quot;&gt;&lt;/a&gt;标量乘法&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;当你将向量乘上一个数值时，新向量的结果表示相同的方向，但幅度被扩大了相应倍数。&lt;/mark&gt;这个数值被称为“标量”，这就是为何该乘法被称为“标量乘法”。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/scalar_mult.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;A=向北5千米&lt;br&gt;&lt;br&gt;&lt;br&gt;0.5 × A=向北2.5千米&lt;br&gt;&lt;br&gt;&lt;br&gt;2 × A=向北10千米&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;我们可以使用标量乘法来计算基于“移动速度”的相机位置，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; moveSpeed = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//units per second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distanceMoved = moveSpeed * secondsElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 forwardDirection = gCamera.forward();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 displacement = distanceMoved * forwardDirection; &lt;span class=&quot;comment&quot;&gt;//scalar multiplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;向量加法&quot;&gt;&lt;a href=&quot;#向量加法&quot; class=&quot;headerlink&quot; title=&quot;向量加法&quot;&gt;&lt;/a&gt;向量加法&lt;/h2&gt;&lt;p&gt;向量加法在2D图形表现下最容易理解。对两个向量进行加法，就是将它们的头部（箭头一段）连接尾部（非箭头一段）。加法顺序不重要。它的结果就是，从第一个向量尾部走向另外一个向量的头部。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/vector-addition.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意，即使这些向量看上去是在不同的位置上，但结果向量的幅度（长度）和方向不会改变。请记住，向量&lt;em&gt;只有&lt;/em&gt;一个方向和一个幅度。它们没有起始点，所以它们可以在任意不同位置上，但还是相等的。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A = 往北1千米&lt;/p&gt;
&lt;p&gt;B = 往西1千米&lt;/p&gt;
&lt;p&gt;A + B = 往西北1.41千米&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;向量减法相当于是加上一个负向量，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A = 往北1千米&lt;/p&gt;
&lt;p&gt;B = 往西1千米&lt;/p&gt;
&lt;p&gt;A - B = 往西北1.41千米&lt;/p&gt;
&lt;p&gt;A + (-B) = 往西北1.41千米&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们使用向量加法来计算出相机位移后的的新位置，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 displacement = gCamera.forward() * moveSpeed * secondsElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 oldPosition = gCamera.position();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 newPosition = oldPosition + displacement; &lt;span class=&quot;comment&quot;&gt;//vector addition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gCamera.setPosition(newPosition);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;单位向量&quot;&gt;&lt;a href=&quot;#单位向量&quot; class=&quot;headerlink&quot; title=&quot;单位向量&quot;&gt;&lt;/a&gt;单位向量&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;单位向量是幅度为1的向量。它们经常被用来表示方向。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;当一个向量是用来表示方向时，它的幅度就没啥用处。即使这样，我们还是将它的幅度设为1，是为了计算时更方便一些。&lt;/p&gt;
&lt;p&gt;当你在单位向量上使用标量乘法时，它的方向仍然不变，但幅度会被设为标量的值。因此，你将一个单位向量乘上5后，新的向量的幅度就是5。假如你乘上123，那幅度也就是123。基本上这允许我们设置任意一个向量的幅度，而不会更改它的方向。&lt;/p&gt;
&lt;p&gt;让我们对相机进行往左移动12单位的操作。我们先设置一个方向为左的单位向量，然后使用标量乘法将它的幅度设为12，最后使用它来计算出新位置。代码看上去应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `gCamera.right()` returns a unit vector, therefore `leftDirection` will also be a unit vector.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Negation only affects the direction, not the magnitude.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 leftDirection = -gCamera.right();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//`displacement` will have a magnitude of 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 displacement = leftDirection * &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//`newPosition` will be 12 units to the left of `oldPosition`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 newPosition = oldPosition + displacement;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;任何一个向量都能变为单位向量。这个操作叫做&lt;em&gt;单位化&lt;/em&gt;。我们可以用GLM来单位化一个向量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 someRandomVector = glm::vec3(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;789&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 unitVector = glm::normalize(someRandomVector);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;tdogl-Camera类&quot;&gt;&lt;a href=&quot;#tdogl-Camera类&quot; class=&quot;headerlink&quot; title=&quot;tdogl::Camera类&quot;&gt;&lt;/a&gt;tdogl::Camera类&lt;/h2&gt;&lt;p&gt;恭喜你看到这儿了！现在你已经有足够的向量知识了，来，让我们开始编码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tomdalling/opengl-series/blob/master/source/04_camera/source/tdogl/Camera.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;tdogl::Camera&lt;/code&gt;类的接口&lt;/a&gt;在&lt;a href=&quot;https://github.com/tomdalling/opengl-series/blob/master/source/04_camera/source/tdogl/Camera.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，实现代码在&lt;a href=&quot;https://github.com/tomdalling/opengl-series/blob/master/source/04_camera/source/tdogl/Camera.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在前面文章中我们在OpenGL中用矩阵来实现相机。&lt;code&gt;tdogl::Camera&lt;/code&gt;类可以基于各种属性来创建矩阵，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相机位置&lt;/li&gt;
&lt;li&gt;相机朝向（方向）&lt;/li&gt;
&lt;li&gt;缩放（视野）&lt;/li&gt;
&lt;li&gt;最大和最小可视距离（远近平面）&lt;/li&gt;
&lt;li&gt;视口/窗口纵横比&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的每个属性都有各自的设置和获取接口。前文已经介绍过了。&lt;/p&gt;
&lt;p&gt;现在让我们用&lt;code&gt;matrix&lt;/code&gt;和&lt;code&gt;orientation&lt;/code&gt;方法来实现如何让这所有属性组合成一个矩阵。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::mat4 Camera::matrix() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::mat4 camera = glm::perspective(_fieldOfView, _viewportAspectRatio, _nearPlane, _farPlane);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    camera *= orientation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    camera = glm::translate(camera, -_position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return camera;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::mat4 Camera::orientation() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::mat4 orientation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    orientation = glm::rotate(orientation, _verticalAngle, glm::vec3(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    orientation = glm::rotate(orientation, _horizontalAngle, glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return orientation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到，最终的相机矩阵是由四个不同的变换组成。按顺序是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动，基于相机位置&lt;/li&gt;
&lt;li&gt;旋转，基于相机水平（左/右）转角&lt;/li&gt;
&lt;li&gt;旋转，基于相机垂直（上/下）转角&lt;/li&gt;
&lt;li&gt;透视，基于视野，近平面，远平面和纵横比&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如你觉得这顺序是反的，那请记住矩阵乘法是从右往左，代码上顺序是从底往上。&lt;/p&gt;
&lt;p&gt;注意，移动用了相机的&lt;em&gt;负&lt;/em&gt;位置。这里再次用前文提到的方式，我们可以让3D场景往后来实现相机往前走。向量为负时会反转其方向，所以“往前”就变成“往后”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tdogl::Camera&lt;/code&gt;类还有其它方法来返回单位向量：&lt;code&gt;上&lt;/code&gt;,&lt;code&gt;右&lt;/code&gt;和&lt;code&gt;前&lt;/code&gt;。我们需要从键盘获取消息来实现相机移动。&lt;/p&gt;
&lt;h2 id=&quot;相机方位矩阵求逆&quot;&gt;&lt;a href=&quot;#相机方位矩阵求逆&quot; class=&quot;headerlink&quot; title=&quot;相机方位矩阵求逆&quot;&gt;&lt;/a&gt;相机方位矩阵求逆&lt;/h2&gt;&lt;p&gt;让我来看下&lt;code&gt;tdogl::Camera::up&lt;/code&gt;方法的实现，这里有两个东西我们还没有提及。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::vec3 Camera::up() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec4 up = glm::inverse(orientation()) * glm::vec4(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return glm::vec3(up);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到它使用了&lt;code&gt;glm::inverse&lt;/code&gt;方法。从上一篇文章中，我们知道矩阵能对坐标进行变换。在这里，我们还需要对坐标进行“反变换”，使得我们能获得矩阵乘法变换前的坐标。为了实现这个目的，我们需要计算&lt;em&gt;逆&lt;/em&gt;矩阵。&lt;mark&gt;逆矩阵是一个矩阵，&lt;em&gt;完全相反&lt;/em&gt;于另外一个矩阵，这意味着它能&lt;em&gt;撤销&lt;/em&gt;另外一个矩阵的变换。&lt;/mark&gt;比如，矩阵&lt;code&gt;A&lt;/code&gt;是绕着Y轴旋转90°，那矩阵&lt;code&gt;A&lt;/code&gt;的逆矩阵就是绕着Y轴旋转-90°。&lt;/p&gt;
&lt;p&gt;当相机的方向改变时，“向上”的方向也随之改变。比如，想象下有个箭头指向你的头顶，假如你旋转你的头往地上看，那箭头就是向前倾斜，假如你往天上看，那箭头是向后倾斜的。如果你往前看，就是你的头“不旋转”，那箭头就是笔直向上。我们用“笔直向上”的单位向量(0,1,0)来表示相机的向上方向，“不旋转”使用相机方位矩阵的逆矩阵。另外一种解释，在相机旋转后，向上方向总是为(0,1,0)，所以我们要将逆旋转乘上(0,1,0)，这就能得到相机旋转前的向上方向。&lt;/p&gt;
&lt;p&gt;(0,1,0)是单位向量，当你旋转一个单位向量结果还是一个单位向量。假如结果&lt;em&gt;不是&lt;/em&gt;单位向量，你应该使用&lt;code&gt;glm::normalize&lt;/code&gt;来单位化。&lt;/p&gt;
&lt;p&gt;计算相机的&lt;code&gt;前&lt;/code&gt;和&lt;code&gt;右&lt;/code&gt;方向是同样的方式。&lt;/p&gt;
&lt;p&gt;你可能注意到了这里用了一个4D向量&lt;code&gt;glm::vec4&lt;/code&gt;。前文解释过，4x4 矩阵(&lt;code&gt;glm::mat4&lt;/code&gt;)需要一个4D向量来进行矩阵乘法，使用&lt;code&gt;glm::vec3&lt;/code&gt;会导致编译错误。只要把3D向量(0,1,0)变成4D向量(0,1,0,1)就可以进行矩阵乘法了，计算完成后我们再将4D向量变回3D向量。&lt;/p&gt;
&lt;h2 id=&quot;整合tdogl-Camera类&quot;&gt;&lt;a href=&quot;#整合tdogl-Camera类&quot; class=&quot;headerlink&quot; title=&quot;整合tdogl::Camera类&quot;&gt;&lt;/a&gt;整合tdogl::Camera类&lt;/h2&gt;&lt;p&gt;现在我们开始使用&lt;code&gt;tdogl:Camera&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;在之前的文章中，我们分别设置了投影矩阵和相机矩阵两个着色器变量。在本文中，&lt;code&gt;tdogl::Camera&lt;/code&gt;合并了这两个矩阵，所以让我们移除&lt;code&gt;projection&lt;/code&gt;着色器变量，只用&lt;code&gt;camera&lt;/code&gt;变量就足够了。下面是顶点着色器的更新：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 camera;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 model;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec2 fragTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Pass the tex coord straight through to the fragment shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragTexCoord = vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Apply all matrix transformations to vert&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = camera * model * vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将&lt;code&gt;tdogl::Camera&lt;/code&gt;整合到&lt;code&gt;main.cpp&lt;/code&gt;中。首先包含头文件：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;tdogl/Camera.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后声明全局变量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tdogl::Camera gCamera;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在前一篇文章中，相机和投影矩阵是不会改变的，所以在&lt;code&gt;LoadShaders&lt;/code&gt;函数中设置一次就好了。但在本文中，因为我们需要用鼠标和键盘来控制，所以设置相机矩阵要放在&lt;code&gt;Render&lt;/code&gt;函数中并每帧都要设置一下。首先让我们移除旧代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoadShaders&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;tdogl::Shader&amp;gt; shaders;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shaders.push_back(tdogl::Shader::shaderFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;vertex-shader.txt&quot;&lt;/span&gt;), GL_VERTEX_SHADER));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shaders.push_back(tdogl::Shader::shaderFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;fragment-shader.txt&quot;&lt;/span&gt;), GL_FRAGMENT_SHADER));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram = new tdogl::Program(shaders);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the commented-out code below was removed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;use();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //set the &quot;projection&quot; uniform in the vertex shader, because it&#39;s not going to change&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::mat4 projection = glm::perspective&amp;lt;float&amp;gt;(50.0, SCREEN_SIZE.x/SCREEN_SIZE.y, 0.1, 10.0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //glm::mat4 projection = glm::ortho&amp;lt;float&amp;gt;(-2, 2, -2, 2, 0.1, 10);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;setUniform(&quot;projection&quot;, projection);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //set the &quot;camera&quot; uniform in the vertex shader, because it&#39;s also not going to change&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::mat4 camera = glm::lookAt(glm::vec3(3,3,3), glm::vec3(0,0,0), glm::vec3(0,1,0));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;setUniform(&quot;camera&quot;, camera);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;stopUsing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，在&lt;code&gt;Render&lt;/code&gt;函数中设置&lt;code&gt;camera&lt;/code&gt;着色器变量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// draws a single frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// clear everything&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClearColor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// black&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bind the program (the shaders)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;use();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// set the &quot;camera&quot; uniform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;camera&quot;&lt;/span&gt;, gCamera.matrix());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;gCamera.matrix()&lt;/code&gt;函数返回的是一个&lt;code&gt;glm::mat4&lt;/code&gt;, 并且&lt;code&gt;setUniform&lt;/code&gt;函数使用了&lt;code&gt;glUniformMatrix4fv&lt;/code&gt;来设置顶点着色器中的相机矩阵uniform变量。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;AppMain&lt;/code&gt;函数中设置相机的初始化位置和视窗纵横比。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gCamera.setPosition(glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gCamera.setViewportAspectRatio(SCREEN_SIZE.x / SCREEN_SIZE.y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其余相机属性都留成默认值。&lt;/p&gt;
&lt;p&gt;你现在运行程序，会看到上次实现的旋转立方体。下一步就让我们用鼠标和键盘来控制相机。&lt;/p&gt;
&lt;h2 id=&quot;键盘输入&quot;&gt;&lt;a href=&quot;#键盘输入&quot; class=&quot;headerlink&quot; title=&quot;键盘输入&quot;&gt;&lt;/a&gt;键盘输入&lt;/h2&gt;&lt;p&gt;我们先来实现键盘控制。每次我们更新屏幕时，我们先检查’W’,’A’,’S’或’D’按键是否被按下，如果有触发那就稍微移动下相机。函数&lt;code&gt;glfwGetKey&lt;/code&gt;返回一个布尔值来表示这个按键是否按下。新的&lt;code&gt;Update&lt;/code&gt;函数看上去是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// update the scene based on the time elapsed since last update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//rotate the cube&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLfloat degreesPerSecond = &lt;span class=&quot;number&quot;&gt;180.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gDegreesRotated += secondsElapsed * degreesPerSecond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(gDegreesRotated &amp;gt; &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;) gDegreesRotated -= &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//move position of camera based on WASD keys&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; moveSpeed = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//units per second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;S&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gCamera.offsetPosition(secondsElapsed * moveSpeed * -gCamera.forward());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;W&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gCamera.offsetPosition(secondsElapsed * moveSpeed * gCamera.forward());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gCamera.offsetPosition(secondsElapsed * moveSpeed * -gCamera.right());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gCamera.offsetPosition(secondsElapsed * moveSpeed * gCamera.right());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们先忽略立方体的旋转。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;S&lt;/code&gt;键被按下时，我们可以看得更近些：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gCamera.offsetPosition(secondsElapsed * moveSpeed * -gCamera.forward());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一行代码做了好多事，让我们用更容易懂的方式重写一遍，新的函数叫&lt;code&gt;MoveCameraBackwards&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveCameraBackwards&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; finish writing this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;向后是一个方向，所以应该是个单位向量。在相机类中没有&lt;code&gt;backward&lt;/code&gt;函数，但它有个&lt;code&gt;forward&lt;/code&gt;函数。向后就是向前的反方向，所以我们只要对向前的单位向量取负数即可。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveCameraBackwards&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`direction` is a unit vector, set to the &quot;backwards&quot; direction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 direction = -gCamera.forward();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; finish writing this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们应该知道将相机移多&lt;em&gt;远&lt;/em&gt;。我们有相机的移动速度&lt;code&gt;moveSpeed&lt;/code&gt;，我们还知道从上一帧到现在过去了多少时间&lt;code&gt;secondsElapsed&lt;/code&gt;。对这两个值进行乘法，就能得到相机移动的距离。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveCameraBackwards&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`direction` is a unit vector, set to the &quot;backwards&quot; direction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 direction = -gCamera.forwards();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`distance` is the total distance to move the camera&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = moveSpeed * secondsElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; finish writing this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，我们知道了移动的距离和方向，我们就能构造一个位移向量。它的幅度就是&lt;code&gt;distance&lt;/code&gt;，它的方向就是&lt;code&gt;direction&lt;/code&gt;。因为&lt;code&gt;direction&lt;/code&gt;是个单位向量，我们可以用标量乘法来设置幅度。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveCameraBackwards&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`direction` is a unit vector, set to the &quot;backwards&quot; direction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 direction = -gCamera.forwards(); &lt;span class=&quot;comment&quot;&gt;//vector negation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`distance` is the total distance to move the camera&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = moveSpeed * secondsElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`displacement` is a combination of `distance` and `direction`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 displacement = distance * direction; &lt;span class=&quot;comment&quot;&gt;//scalar multiplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; finish writing this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们移动（或者说是置换）相机当前位置。用向量加法即可。最基础的公式&lt;code&gt;newPosition = oldPosition + displacement&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveCameraBackwards&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`direction` is a unit vector, set to the &quot;backwards&quot; direction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 direction = -gCamera.forwards(); &lt;span class=&quot;comment&quot;&gt;//vector negation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`distance` is the total distance to move the camera&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = moveSpeed * secondsElapsed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//`displacement` is a combination of `distance` and `direction`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 displacement = distance * direction; &lt;span class=&quot;comment&quot;&gt;//scalar multiplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//change the position of the camera&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 oldPosition = gCamera.position();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glm::vec3 newPosition = oldPosition + displacement; &lt;span class=&quot;comment&quot;&gt;//vector addition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gCamera.setPosition(newPosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成了！&lt;code&gt;MoveCameraBackwards&lt;/code&gt;函数这么多行代码跟这一行代码是一样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gCamera.offsetPosition(secondsElapsed * moveSpeed * -gCamera.forward());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;offsetPosition&lt;/code&gt;函数做的就是向量加法，它将位移向量作为参数传入。让我们使用那一行代码来替换&lt;code&gt;MoveCameraBackwards&lt;/code&gt;函数，因为简洁就是美。&lt;/p&gt;
&lt;p&gt;其余按键的工作方式都是相同的，无非是方向不同而已。让我们再添加&lt;code&gt;Z&lt;/code&gt;和&lt;code&gt;X&lt;/code&gt;键来实现相机上和下。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gCamera.offsetPosition(secondsElapsed * moveSpeed * -glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gCamera.offsetPosition(secondsElapsed * moveSpeed * glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，为什么这里用向量(0,1,0)而不是&lt;code&gt;gCamera.up()&lt;/code&gt;。记住，“向上”方向会随着相机方向而改变。假如相机看地上，“向上”指的是向前，假设相机看天上，“向上”指的是向后。这并不是我想实现的行为，我希望的是“笔直向上”的方向(0,1,0)，不依赖于相机的方向。&lt;/p&gt;
&lt;p&gt;现在当你运行程序，你能使用&lt;code&gt;W&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;,和&lt;code&gt;Z&lt;/code&gt;键来向前移动，向左移动，向后移动，向右移动，向上移动和向下移动。观察时不会因为相机移动而改变方向，这个将留个鼠标来控制。&lt;/p&gt;
&lt;h2 id=&quot;鼠标输入&quot;&gt;&lt;a href=&quot;#鼠标输入&quot; class=&quot;headerlink&quot; title=&quot;鼠标输入&quot;&gt;&lt;/a&gt;鼠标输入&lt;/h2&gt;&lt;p&gt;此时，我们的窗口还无法捕捉鼠标消息。你能看到鼠标在窗口上移来移去。我希望它消失，并且不希望它移出窗口。为了实现这个，我们要改下GLFW的设置。&lt;/p&gt;
&lt;p&gt;在我们捕获鼠标之前，让我们先实现用取消键（Esc）退出程序。我不想再点击关闭按钮了，因为鼠标隐藏，并且无法离开窗口。让我们在&lt;code&gt;AppMain&lt;/code&gt;主循环下放加上些代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// run while the window is open&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; lastTime = glfwGetTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!glfwWindowShouldClose(gWindow))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// process pending events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwPollEvents();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// update the scene based on the time elapsed since last update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; thisTime = glfwGetTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Update((float)(thisTime - lastTime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastTime = thisTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// draw one frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Render();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// check for errors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLenum error = glGetError();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(error != GL_NO_ERROR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;OpenGL Error &quot;&lt;/span&gt; &amp;lt;&amp;lt; error &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//exit program if escape key is pressed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glfwGetKey(gWindow, GLFW_KEY_ESCAPE))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        glfwSetWindowShouldClose(gWindow, GL_TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们用&lt;code&gt;glfwCreateWindow&lt;/code&gt;打开窗口这样设置时，就可以捕获鼠标了：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GLFW settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwSetInputMode(gWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwSetCursorPos(gWindow, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码让鼠标消失了，并且将它移动到了像素坐标(0,0)。在&lt;code&gt;Update&lt;/code&gt;中，我们会获取鼠标位置来更新相机，更新完后将鼠标坐标再次设为(0,0)。这种方式可以很方便的看出每帧鼠标移动了多少，还要在当鼠标要移出窗口时停住它。在&lt;code&gt;Update&lt;/code&gt;函数下面添加以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//rotate camera based on mouse movement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; mouseSensitivity = &lt;span class=&quot;number&quot;&gt;0.1f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; mouseX, mouseY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwGetCursorPos(gWindow, &amp;amp;mouseX, &amp;amp;mouseY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gCamera.offsetOrientation(mouseSensitivity * (float)mouseY, mouseSensitivity * (float)mouseX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwSetCursorPos(gWindow, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//reset the mouse, so it doesn&#39;t go out of the window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;鼠标的坐标单位是像素，但相机方向是基于两个角度。这就是为何我们使用&lt;code&gt;mouseSensitivity&lt;/code&gt;变量来将像素转为角度。越大的鼠标灵敏度，相机转向的越快，越小的灵敏度，转向的越慢。灵敏度设为&lt;code&gt;0.1f&lt;/code&gt;的含义就是每10像素就旋转1°。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offsetOrientation&lt;/code&gt;函数类似于&lt;code&gt;offsetPosition&lt;/code&gt;函数，它会使用水平和垂直角度来更新相机方向。&lt;/p&gt;
&lt;p&gt;好了！基本到这就完成了。你现在运行程序的话，你能绕着飞行并且&lt;a href=&quot;http://en.wikipedia.org/wiki/Gimbal_lock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几乎&lt;/a&gt;能观察任意方向。立方体的旋转动画可能会让你在环绕时失去方向感，我们可以关闭它。&lt;/p&gt;
&lt;h2 id=&quot;用鼠标滚轮控制视野&quot;&gt;&lt;a href=&quot;#用鼠标滚轮控制视野&quot; class=&quot;headerlink&quot; title=&quot;用鼠标滚轮控制视野&quot;&gt;&lt;/a&gt;用鼠标滚轮控制视野&lt;/h2&gt;&lt;p&gt;就像蛋糕上的糖衣一样，我们可以滚动鼠标或者在触摸板上滑动来实现相机镜头的视野缩放。上篇文章我们已经解释过视野的概念了。&lt;/p&gt;
&lt;p&gt;我们使用同样的方式来使用鼠标位置，并且每帧重置滚动值。首先我们创建一个全局变量来保存滚动值：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; gScrollY = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用GLFW来接受滚轮消息，首先我们得创建个回调：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// records how far the y axis has been scrolled&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnScroll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(GLFWwindow* window, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; deltaX, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; deltaY)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gScrollY += deltaY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们用GLFW在&lt;code&gt;AppMain&lt;/code&gt;中注册下回调：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwSetScrollCallback(gWindow, OnScroll);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当每帧我们渲染的时候，我们使用&lt;code&gt;gScrollY&lt;/code&gt;值来更改视野。代码放在&lt;code&gt;Update&lt;/code&gt;函数的下放：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; zoomSensitivity = &lt;span class=&quot;number&quot;&gt;-0.2&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; fieldOfView = gCamera.fieldOfView() + zoomSensitivity * (float)gScrollY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fieldOfView &amp;lt; &lt;span class=&quot;number&quot;&gt;5.0f&lt;/span&gt;) fieldOfView = &lt;span class=&quot;number&quot;&gt;5.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fieldOfView &amp;gt; &lt;span class=&quot;number&quot;&gt;130.0f&lt;/span&gt;) fieldOfView = &lt;span class=&quot;number&quot;&gt;130.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gCamera.setFieldOfView(fieldOfView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gScrollY = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;zoomSensitivity&lt;/code&gt;常量类似&lt;code&gt;mouseSensitivity&lt;/code&gt;常量。视野取值范围是0°到180°，但假如你设置的值离上下限很近的话，3D场景看上去会很奇怪，所以我们限制这个值范围在5°到130°。类似鼠标位置的方法，我们在每帧之后设置&lt;code&gt;gScrollY = 0&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;下篇预告&quot;&gt;&lt;a href=&quot;#下篇预告&quot; class=&quot;headerlink&quot; title=&quot;下篇预告&quot;&gt;&lt;/a&gt;下篇预告&lt;/h2&gt;&lt;p&gt;下一篇文章，我们会重构代码来实现最最基本的“引擎”。我们会将代码分为资产（资源）和实例，类似典型的3D引擎，可以生成有多个略微不同的木箱子的3D场景。&lt;/p&gt;
&lt;h2 id=&quot;更多资源&quot;&gt;&lt;a href=&quot;#更多资源&quot; class=&quot;headerlink&quot; title=&quot;更多资源&quot;&gt;&lt;/a&gt;更多资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arcsynthesis.org/gltut/Basics/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The vector math chapter of Learning Modern 3D Graphics Programming&lt;/a&gt; by Jason L. McKesson&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector maths – a primer for games programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-vectors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basic 3D Math: Vectors&lt;/a&gt; by Egon Rath&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Euclidean_vector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia article on vectors&lt;/a&gt;, which isn’t very beginner-friendly&lt;/li&gt;
&lt;li&gt;The GLFW &lt;a href=&quot;http://www.glfw.org/docs/3.0.4/pages.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;guides&lt;/a&gt; and &lt;a href=&quot;http://www.glfw.org/docs/3.0.4/modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;references&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;假如你有任何关于向量方面对初学者友好的文章，请发送给我，我会添加进来。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      现代OpenGL教程 04 - 相机，向量，输入
    
    </summary>
    
      <category term="modern-opengl-tutorials" scheme="http://huangwei.pro/categories/modern-opengl-tutorials/"/>
    
    
      <category term="opengl" scheme="http://huangwei.pro/tags/opengl/"/>
    
      <category term="tutorials" scheme="http://huangwei.pro/tags/tutorials/"/>
    
  </entry>
  
  <entry>
    <title>现代OpenGL教程 03 - 矩阵，深度缓冲，动画</title>
    <link href="http://huangwei.pro/2015-08/modern-opengl3/"/>
    <id>http://huangwei.pro/2015-08/modern-opengl3/</id>
    <published>2015-08-12T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.563Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/modern-opengl-03.png&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文中，我会将不会动的2D三角形替换为旋转的3D立方体。你会看到这样的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/rotating-crate.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在我们终于能在屏幕上搞点有趣的东西了，我放了更多的动图在这里：&lt;a href=&quot;http://imgur.com/a/x8q7R&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://imgur.com/a/x8q7R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了生成旋转立方体，我们需要学些关于矩阵的数学，用于创建透视投影，旋转，平移和“相机”概念。我们还有必要学习些深度缓冲，和典型的随时间改变的3D应用，比如动画。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;获取代码&quot;&gt;&lt;a href=&quot;#获取代码&quot; class=&quot;headerlink&quot; title=&quot;获取代码&quot;&gt;&lt;/a&gt;获取代码&lt;/h2&gt;&lt;p&gt;所有例子代码的zip打包可以从这里获取：&lt;a href=&quot;https://github.com/tomdalling/opengl-series/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series/archive/master.zip&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这一系列文章中所使用的代码都存放在：&lt;a href=&quot;https://github.com/tomdalling/opengl-series&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series&lt;/a&gt;。你可以在页面中下载zip，加入你会git的话，也可以复制该仓库。&lt;/p&gt;
&lt;p&gt;本文代码你可以在&lt;code&gt;&lt;a href=&quot;https://github.com/tomdalling/opengl-series/tree/master/source/03_matrices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source/03_matrices&lt;/a&gt;&lt;/code&gt;目录里找到。使用OS X系统的，可以打开根目录里的&lt;code&gt;opengl-series.xcodeproj&lt;/code&gt;，选择本文工程。使用Windows系统的，可以在Visual Studio 2013里打开&lt;code&gt;opengl-series.sln&lt;/code&gt;，选择相应工程。&lt;/p&gt;
&lt;p&gt;工程里已包含所有依赖，所以你不需要再安装或者配置额外的东西。如果有任何编译或运行上的问题，请联系我。&lt;/p&gt;
&lt;h2 id=&quot;矩阵原理&quot;&gt;&lt;a href=&quot;#矩阵原理&quot; class=&quot;headerlink&quot; title=&quot;矩阵原理&quot;&gt;&lt;/a&gt;矩阵原理&lt;/h2&gt;&lt;p&gt;本文讲的最多的就是关于3D中的矩阵，所以让我们在写代码前先了解下矩阵原理。我不会过多关注数学，网上有很多好的这类资源。我们只需要使用GLM来实现相关运算。我会注重于那些应用在我们3D程序里的矩阵。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;矩阵是用来进行3D变换。&lt;/mark&gt;可能的变换包括（点击可以看动画）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rotation_matrix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;旋转&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://imgur.com/a/x8q7R#6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;缩放&lt;/a&gt;（变大和变小）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Translation_(geometry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;平移&lt;/a&gt;)（移动）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://imgur.com/a/x8q7R#0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;透视/正交 投影&lt;/a&gt;（后面会解释）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个矩阵是一个数字表格，像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/mat4x4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;矩阵英文matrix的复数形式是matrices。&lt;/p&gt;
&lt;p&gt;不同的数值的能产生不同类型的变换。上面的那个矩阵会绕着Z轴旋转90°。我们会使用GLM来创建矩阵，所以我们不用理解如何计算出这些数值。&lt;/p&gt;
&lt;p&gt;矩阵可以有任意行和列，但3D变换使用4×4矩阵，就像上面看到的那样。无论我在那说到“矩阵”，指的就是4×4矩阵。&lt;/p&gt;
&lt;p&gt;当用代码实现矩阵时，一般会用一个浮点数组来表示。我们使用&lt;code&gt;glm::mat4&lt;/code&gt;类来表示4×4矩阵。&lt;/p&gt;
&lt;p&gt;两个最重要的矩阵操作是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;matrix × matrix = combined matrix&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;matrix × coordinate = transformed coordinate &lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;矩阵-×-矩阵&quot;&gt;&lt;a href=&quot;#矩阵-×-矩阵&quot; class=&quot;headerlink&quot; title=&quot;矩阵 × 矩阵&quot;&gt;&lt;/a&gt;矩阵 × 矩阵&lt;/h2&gt;&lt;p&gt;当你要对两个矩阵进行相乘时，它们的乘积是一个包含两者变换的新矩阵。&lt;/p&gt;
&lt;p&gt;比如，你将一个旋转矩阵乘以一个平移矩阵，得到的结果就是“组合”矩阵，即先旋转然后平移。下面的例子展示这类矩阵相乘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/mat-x-mat.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;不像普通的乘法，矩阵乘法中顺序很重要。&lt;/mark&gt; 比如，&lt;code&gt;A&lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;是矩阵，&lt;code&gt;A*B&lt;/code&gt;不一定等于&lt;code&gt;B*A&lt;/code&gt;。下面我们会使用相同的矩阵，但改变下乘法顺序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/mat-x-mat-commutative.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意不同的顺序，结果也不同。下面动画说明顺序有多重要。相同的矩阵，不同的顺序。两个变换分别是沿Y轴上移，和旋转45°。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/rotate-translate.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/translate-rotate.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你编码的时候，假如看到变换出错，请回头检查下你的矩阵运算是否是正确的顺序。&lt;/p&gt;
&lt;h2 id=&quot;矩阵-×-坐标&quot;&gt;&lt;a href=&quot;#矩阵-×-坐标&quot; class=&quot;headerlink&quot; title=&quot;矩阵 × 坐标&quot;&gt;&lt;/a&gt;矩阵 × 坐标&lt;/h2&gt;&lt;p&gt;当你用矩阵乘以一个坐标时，它们的乘积就是一个变换后的新坐标。&lt;/p&gt;
&lt;p&gt;比如，你有上面提到的旋转矩阵，乘上坐标(1,1,0)，它的结果就是(-1,1,0)。变换后的坐标就是原始坐标绕着Z周旋转90°。下面是该乘法的图例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/mat-x-vec.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为何我们会使用4D坐标&quot;&gt;&lt;a href=&quot;#为何我们会使用4D坐标&quot; class=&quot;headerlink&quot; title=&quot;为何我们会使用4D坐标&quot;&gt;&lt;/a&gt;为何我们会使用4D坐标&lt;/h2&gt;&lt;p&gt;你可能注意到了上面的坐标是4D的，而非3D。它的格式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/homo-coord-letters.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为何我们会使用4D坐标？因为我们需要用4x4的矩阵完成所有我们需要的3D变换。不管怎样，矩阵乘法需要左边的列数等于右边的行数。这就意味着4x4矩阵无法与3D坐标相乘，因为矩阵有4列，但坐标只有3行。&lt;mark&gt;我们需要使用4D坐标，因为4x4的矩阵&lt;em&gt;需要&lt;/em&gt;用它们来完成矩阵运算。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;一些变换，比如旋转，缩放，只需要3x3矩阵。对于这些变换，我们不需要4D坐标，因为3D坐标就能运算。但无论如何，变换需要至少是4x3的矩阵，而透视投影矩阵需要4x4矩阵，而我们两者都会用到，所以我们强制使用4D。&lt;/p&gt;
&lt;p&gt;这些被称为&lt;a href=&quot;http://en.wikipedia.org/wiki/Homogeneous_coordinates&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;齐次坐标&lt;/a&gt;。在后续的教程里，我们会讲到有向光照，那里我们会学到有关“W”维度的表示。在这里，我们只需要将3D转换为4D。3D转换为4D只要将第四维坐标“W”设为1即可。比如，坐标(22,33,44)转换为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/homo-coord.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当需要将4D坐标变为3D时，假如“W”维度是1，你可以直接忽略它，使用X，Y，Z的值即可。如果你发现“W”的值不为1，好吧，你就需要做些额外处理，或者这里出了个bug。&lt;/p&gt;
&lt;h2 id=&quot;构造一个立方体&quot;&gt;&lt;a href=&quot;#构造一个立方体&quot; class=&quot;headerlink&quot; title=&quot;构造一个立方体&quot;&gt;&lt;/a&gt;构造一个立方体&lt;/h2&gt;&lt;p&gt;代码上第一个变动就是用立方体替换之前的三角形。&lt;/p&gt;
&lt;p&gt;我们用三角形来构造立方体，用两个三角形表示6个面的每个面。在旧版本的OpengGL中，我们可以使用1个正方形（&lt;code&gt;GL_QUADS&lt;/code&gt;）来替代2个三角表示每个面，但&lt;code&gt;GL_QUADS&lt;/code&gt;已经被现代版本的OpenGL给移除了。X，Y，Z坐标值域为-1到1，这意味着立方体是两个单位宽，立方体中心点在原点（原点坐标(0,0,0)）。我们将使用256×256的贴图给立方体每个面贴上。后序文章中都会使用这个数据，我们不需要改变太多。这里有立方体数据：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLfloat vertexData[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  X     Y     Z       U     V&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bottom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// front&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// back&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// left&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要更改下&lt;code&gt;Render&lt;/code&gt;函数中&lt;code&gt;glDrawArrays&lt;/code&gt;调用，之前是用来绘制三角形的。立方体6个面，每个面有2个三角形，每个三角形有3个顶点，所以需要绘制的顶点数是：6 × 2 × 3 = 36。新的&lt;code&gt;glDrawArrays&lt;/code&gt;调用像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glDrawArrays(GL_TRIANGLES, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们使用新的贴图“wooden-crate.jpg”，我们更改&lt;code&gt;LoadTexture&lt;/code&gt;中的文件名，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tdogl::Bitmap bmp = tdogl::Bitmap::bitmapFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;wooden-crate.jpg&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是这样！我们已经提供了所有绘制带贴图立方体的需要用到的数据。假如你运行程序，你可以看到这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/crate-stretched.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时此刻，我们有两个问题。第一，这个立方体看上去非常2D，因为我们只看到了一个面。我们需要“移动相机”，以不同角度观察这个立方体。第二，上面有些问题，因为立方体宽和高应该相等，但从截图看上去宽度明显比高度大。为了修复这两个问题，我们需要学习更多的矩阵知识，和如何应用到3D程序中。&lt;/p&gt;
&lt;h2 id=&quot;裁剪体-默认相机&quot;&gt;&lt;a href=&quot;#裁剪体-默认相机&quot; class=&quot;headerlink&quot; title=&quot;裁剪体 - 默认相机&quot;&gt;&lt;/a&gt;裁剪体 - 默认相机&lt;/h2&gt;&lt;p&gt;为了理解3D中的“相机”，我们首先得理解裁剪体。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;裁剪体是一个立方体。无论什么东西在裁剪体中的都会显示在屏幕上，任何在裁剪体之外的都不会显示。&lt;/mark&gt;裁剪体跟我们上面的立方体是相同大小，它的X，Y，Z坐标值域也是从-1到+1。-X表示左边，+X表示右边，-Y是底部，+Y是顶部，+Z是远离相机，-Z是朝着相机。&lt;/p&gt;
&lt;p&gt;因为我们的立方体和裁剪体一样大，所以我们只能看到立方体的正面。&lt;/p&gt;
&lt;p&gt;这也解释了为何我们的立方体看起来比较宽。窗口显示了裁剪体里的所有东西。窗口的左右边缘是X轴的-1和+1，窗口的底部和顶部边缘是Y轴的-1和+1。裁剪体被拉伸了，用来跟窗口的可视大小相适应，所以我们的立方体看上去不是正方形的。&lt;/p&gt;
&lt;h2 id=&quot;固定住相机，让世界移动起来&quot;&gt;&lt;a href=&quot;#固定住相机，让世界移动起来&quot; class=&quot;headerlink&quot; title=&quot;固定住相机，让世界移动起来&quot;&gt;&lt;/a&gt;固定住相机，让世界移动起来&lt;/h2&gt;&lt;p&gt;我们需要移动相机，使得可以从不同角度进行观察，或放大缩小。但不管怎样，&lt;mark&gt;裁剪体不会更改。它永远是一样的大小和位置。所以我们换种方式来替代移动相机，我们可以移动3D场景让它正确得出现在裁剪体中。&lt;/mark&gt;比如，我们想要让相机往右旋转，我们可以把整个世界往左旋转。假如我们想要让相机离玩家近些，我们可以把玩家挪到相机前。这就是“相机”在3D中的工作方式，变换整个世界使得它出现在裁剪体中并且看上去是正确的。&lt;/p&gt;
&lt;p&gt;无论你走到哪里，都会觉得是世界没动，是你在移动。但你也能想象出当你不动，而世界在你脚下滚动，就像你在跑步机上一样。这就是“移动相机”和“移动世界”的区别，这两种方式，对于观察者而言，看上去都是一样的。&lt;/p&gt;
&lt;p&gt;我们如何对3D场景进行变换来适应裁剪体呢？这里我们需要用到矩阵。&lt;/p&gt;
&lt;h2 id=&quot;实现相机矩阵&quot;&gt;&lt;a href=&quot;#实现相机矩阵&quot; class=&quot;headerlink&quot; title=&quot;实现相机矩阵&quot;&gt;&lt;/a&gt;实现相机矩阵&lt;/h2&gt;&lt;p&gt;让我们先来实现相机矩阵。3D中“相机”的解释可认为是对3D场景的一系列变换。因为相机就是一个变换，所以我们可以用矩阵来表示。&lt;/p&gt;
&lt;p&gt;首先，我们需要包含GLM头文件，用来创建不同类型的矩阵。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;glm/gtc/matrix_transform.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着，我们需要更新顶点着色器。我们创建一个相机矩阵变量叫做&lt;code&gt;camera&lt;/code&gt;，并且每个顶点都会乘上这个相机矩阵。这样我们就将整个3D场景进行了变换。每个顶点都会被相机矩阵所变换。新的顶点着色器看上去应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 camera; &lt;span class=&quot;comment&quot;&gt;//this is the new variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec2 fragTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Pass the tex coord straight through to the fragment shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragTexCoord = vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Transform the input vertex with the camera matrix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = camera * vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们需要在C++代码中设置&lt;code&gt;camera&lt;/code&gt;着色器变量。在&lt;code&gt;LoadShaders&lt;/code&gt;函数的地步，我们添加这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;use();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glm::mat4 camera = glm::lookAt(glm::vec3(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;camera&quot;&lt;/span&gt;, camera);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;stopUsing();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个相机矩阵在本文中不会再被改变，当所有着色器被创建后，我们只需这样设置一次。&lt;/p&gt;
&lt;p&gt;你无法在设置着色器变量，除非着色器在使用中，这就是为何我们用到了&lt;code&gt;gProgram-&amp;gt;use()&lt;/code&gt;和&lt;code&gt;gProgram-&amp;gt;stopUsing()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们使用&lt;code&gt;glm::lookAt&lt;/code&gt;函数为我们创建相机矩阵。假如你使用的是旧版本的OpenGL，那你应该使用&lt;code&gt;gluLookAt&lt;/code&gt;函数来达到相同目的，但&lt;code&gt;gluLookAt&lt;/code&gt;已经在最近的OpenGL版本中被移除了。第一个参数&lt;code&gt;glm::vec3(3,3,3)&lt;/code&gt;是相机的位置。第二个参数&lt;code&gt;glm::vec3(0,0,0)&lt;/code&gt;是相机观察的点。立方体中心是（0,0,0），相机就朝着这个点观察。最后一个参数&lt;code&gt;glm::vec3(0,1,0)&lt;/code&gt;是“向上”的方向。我们需要垂直摆放相机，所以我们设置“向上”是沿着Y轴的正方向。假如相机是颠倒或者倾斜的，这里就是其它值了。&lt;/p&gt;
&lt;p&gt;在我们生成了相机矩阵后，我们用&lt;code&gt;gProgram-&amp;gt;setUniform(&amp;quot;camera&amp;quot;, camera);&lt;/code&gt;来设置&lt;code&gt;camera&lt;/code&gt;着色器变量，&lt;code&gt;setUniform&lt;/code&gt;方法属于&lt;code&gt;tdogl::Program&lt;/code&gt;类，它会调用&lt;code&gt;glUniformMatrix4fv&lt;/code&gt;来设置变量。&lt;/p&gt;
&lt;p&gt;就是这样！我们现在有了一个可运行的相机。&lt;/p&gt;
&lt;p&gt;不幸的是，假如你现在运行程序，你会看到整个都是黑屏。因为我们的立方体顶点经过相机矩阵变换后，飞出了裁剪体。这就是上面我提到的，在裁剪体之外的它是不会被显示。为了能再次看到它，我们需要设置&lt;strong&gt;投影矩阵&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;实现投影矩阵&quot;&gt;&lt;a href=&quot;#实现投影矩阵&quot; class=&quot;headerlink&quot; title=&quot;实现投影矩阵&quot;&gt;&lt;/a&gt;实现投影矩阵&lt;/h2&gt;&lt;p&gt;记住裁剪体只有2个单元宽、高和深。假设1个单元等于我们3D场景中的1米。这就意味着我们在相机中能看到正前方2米，这样不是很方便。&lt;/p&gt;
&lt;p&gt;我们需要扩大裁剪体使得能看到3D场景中的更多东西，可怜我们又不能改变裁剪体的大小，但，我们能缩小整个场景。缩小是一个变换，所以我们用矩阵来表示，基本上说，投影矩阵就是用来干这个的。&lt;/p&gt;
&lt;p&gt;让我们在顶点着色器中加入投影矩阵变量。更新后的代码看上去是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 projection; &lt;span class=&quot;comment&quot;&gt;//this is the new variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 camera;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec2 fragTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Pass the tex coord straight through to the fragment shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragTexCoord = vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Apply camera and projection transformations to the vertex&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = projection * camera * vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意矩阵相乘的顺序：&lt;code&gt;projection * camera * vert&lt;/code&gt;。相机变换是放在首位的，投影矩阵是第二位。&lt;mark&gt;矩阵乘法中，变换从右往左，从顶点角度说是从最近的变换到更早前的变换。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;现在让我们在C++代码中设置&lt;code&gt;projection&lt;/code&gt;着色器变量，方式和我们设置&lt;code&gt;camera&lt;/code&gt;变量相同。在&lt;code&gt;LoadShaders&lt;/code&gt;函数中，添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glm::mat4 projection = glm::perspective(glm::radians(&lt;span class=&quot;number&quot;&gt;50.0f&lt;/span&gt;), SCREEN_SIZE.x/SCREEN_SIZE.y, &lt;span class=&quot;number&quot;&gt;0.1f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10.0f&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;projection&quot;&lt;/span&gt;, projection);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如你使用的是旧版本OpenGL，你可以使用&lt;code&gt;gluPerspective&lt;/code&gt;来设置投影矩阵，同样&lt;code&gt;gluPerspective&lt;/code&gt;函数在最近版本的OpenGL中也被移除了。幸运的是你可以使用&lt;code&gt;glm::perspective&lt;/code&gt;来替代。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;glm::perspective&lt;/code&gt;第一个参数是“可视区域”参数。这个参数是个弧度，用来说明相机视野有多宽。弧度换算我们可以用&lt;code&gt;glm::radians&lt;/code&gt;函数来将50度转换为弧度。大的可视区域意味着我们的相机可以看到更多场景，看上去就像是缩小了。小的可视区域意味着相机只能看到场景的一小部分，看上去像是放大了。第二个参数是“纵横比”，该参数表示可视区域的纵横比率。一般该参数设置为窗口的&lt;code&gt;width/height&lt;/code&gt;，倒数第二个参数是“近平面”，近平面是裁剪体的前面，&lt;code&gt;0.1&lt;/code&gt;表示近平面离相机是0.1单位远。任何离相机小于&lt;code&gt;0.1&lt;/code&gt;单位的物体均不可见。近平面的值必须大于0。最后一个参数是“远平面”，远平面是裁剪体的后面。&lt;code&gt;10.0&lt;/code&gt;表示相机所显示的物体均离相机10个单位之内。任何大于10单位的物体均不可见。我们的立方体是3单位远，所以它能被看见。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;glm::perspective&lt;/code&gt;对将&lt;a href=&quot;http://en.wikipedia.org/wiki/Viewing_frustum&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可视锥体&lt;/a&gt;对应到裁剪体中非常有用。一个锥体像是一个金字塔被砍掉了顶端。金字塔的底部就是远平面，顶部就是近平面。可视区域就是该锥体胖瘦。任何在锥体里的物体都会被显示，而不再内的就隐藏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/frustum.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了相机矩阵和投影矩阵的组合，我们就可以看到立方体了。运行程序你会看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/depth-buffer-disabled.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这看上去。。。几乎是对的。&lt;/p&gt;
&lt;p&gt;这个立方体看上去已经是正方形了，不再是矩形。这是因为&lt;code&gt;glm::perspective&lt;/code&gt;中的“纵横比”参数，能够基于窗口的宽和高进行正确的调整比例。&lt;/p&gt;
&lt;p&gt;不幸的是，截图看上去立方体的背面渲染并覆盖到前面来了。我们当然不希望发生这样的事，我们需要开启&lt;strong&gt;深度缓冲&lt;/strong&gt;来解决。&lt;/p&gt;
&lt;h2 id=&quot;深度缓冲&quot;&gt;&lt;a href=&quot;#深度缓冲&quot; class=&quot;headerlink&quot; title=&quot;深度缓冲&quot;&gt;&lt;/a&gt;深度缓冲&lt;/h2&gt;&lt;p&gt;OpenGL默认会将最新的绘制覆盖到之前的绘制上。假如一个物体的背面在前面之后绘制，就会发生背面挡住前面。&lt;mark&gt;深度缓冲就是为了防止背景层覆盖到前景层的东西。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;假如深度缓冲被开启，每个被绘制的像素到相机的距离都是可知的。这个距离会以一个数值保存在深度缓冲里。当你绘制一个像素在另外一个已存在的像素上时，OpenGL会查找深度缓冲来决定哪个像素应该离相机更近。假如新的像素离相机更近，那该像素点就会被重写。假如之前的像素离相机更近，那新像素就会被&lt;em&gt;抛弃&lt;/em&gt;。所以，&lt;mark&gt;一个之前已存在的像素只会当新像素离相机更近时才会被重写。&lt;/mark&gt;这就叫做“深度测试”。&lt;/p&gt;
&lt;h2 id=&quot;实现深度缓冲&quot;&gt;&lt;a href=&quot;#实现深度缓冲&quot; class=&quot;headerlink&quot; title=&quot;实现深度缓冲&quot;&gt;&lt;/a&gt;实现深度缓冲&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;AppMain&lt;/code&gt;函数中，调用了&lt;code&gt;glewInit&lt;/code&gt;之后，我们添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glEnable(GL_DEPTH_TEST);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glDepthFunc(GL_LESS);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这告诉OpenGL开启深度测试。调用&lt;code&gt;glDepthFunc&lt;/code&gt;是表明假如像素离相机的距离&lt;em&gt;小于&lt;/em&gt;之前的像素距离时应该被重写。&lt;/p&gt;
&lt;p&gt;最后一步我们需要在渲染每帧之后清理深度缓冲。假如我们不清理，旧的像素距离会保存在缓冲中，这样会影响到绘制新的一帧。在&lt;code&gt;Render&lt;/code&gt;函数里，我们改变&lt;code&gt;glClear&lt;/code&gt;来实现它：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/depth-buffer-correct.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;旋转立方体&quot;&gt;&lt;a href=&quot;#旋转立方体&quot; class=&quot;headerlink&quot; title=&quot;旋转立方体&quot;&gt;&lt;/a&gt;旋转立方体&lt;/h2&gt;&lt;p&gt;假如你完成了上述例子，祝贺你走了这么远！最后我们来实现会旋转的立方体动画。&lt;/p&gt;
&lt;p&gt;如何实现旋转？你会猜到：另外一个矩阵。这与之前的矩阵不同的是，这个矩阵是每帧都在改变，之前的矩阵都是常量。&lt;/p&gt;
&lt;p&gt;我需要新建一个“模型”矩阵。在常见的3D引擎中，每个物体都有一个模型矩阵。相机和投影矩阵对整个场景来说是一样的，但模型矩阵是每个物体都不同。模型矩阵用来摆放每个物体在正确的位置上（平移），设置正确的面向（旋转），或者改变物体大小（缩放）。我们只有一个物体在当前3D场景上，所以，我们只需要一个模型矩阵。&lt;/p&gt;
&lt;p&gt;让我们添加一个&lt;code&gt;model&lt;/code&gt;矩阵变量到顶点着色器，就像我们添加相机和投影一样。最终版本的顶点着色器应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 projection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 camera;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform mat4 model; &lt;span class=&quot;comment&quot;&gt;//this is the new variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec2 fragTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Pass the tex coord straight through to the fragment shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragTexCoord = vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Apply all matrix transformations to vert&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = projection * camera * model * vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还是要注意矩阵相乘的顺序。模型矩阵是&lt;code&gt;vert&lt;/code&gt;变量最近的一次变换，意味着模型矩阵应该第一个被使用，其次是相机，最后是投影。&lt;/p&gt;
&lt;p&gt;现在我们需要设置新的&lt;code&gt;model&lt;/code&gt;着色器变量。不像相机和投影变量，模型变量需要每帧都被设置，所以我们把它放在&lt;code&gt;Render&lt;/code&gt;函数里。在&lt;code&gt;gProgram-&amp;gt;use()&lt;/code&gt;之后添加这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;model&quot;&lt;/span&gt;, glm::rotate(glm::mat4(), glm::radians(&lt;span class=&quot;number&quot;&gt;45.0f&lt;/span&gt;), glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用&lt;code&gt;glm::rotate&lt;/code&gt;函数创建一个旋转矩阵。第一个参数是一个已存在的需要进行旋转的矩阵。在这我们不需要对已存在的矩阵进行旋转，所以我们传个新的&lt;code&gt;glm::mat4&lt;/code&gt;对象就可以了。下一个参数是旋转的角度，或者说是要旋转多少度。现在让我给它设置个45°。最后一个参数是旋转的轴。想象下旋转像是将物体插在叉子上，然后转动叉子。叉子就是轴，角度就是你的转动。在我们的例子中，我们使用垂直的叉子，所以立方体像在一个平台上旋转。&lt;/p&gt;
&lt;p&gt;运行程序，你们看到立方体被旋转：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/not-animated.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;它还没有转动，因为矩阵没有被更改-它永远是旋转了45°。最后一步就是让它每帧都旋转一下。&lt;/p&gt;
&lt;h2 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;p&gt;首先，添加一个新的全局变量叫&lt;code&gt;gDegreesRotated&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLfloat gDegreesRotated = &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每帧，我们会轻微的增加&lt;code&gt;gDegreesRotated&lt;/code&gt;，并且我们用它来计算新的旋转矩阵。这样就能达到动画效果。我们需要做的就是更新，绘制，更新，绘制，更新，绘制，这样一个模式。&lt;/p&gt;
&lt;p&gt;让我们创建一个&lt;code&gt;Update&lt;/code&gt;函数，用来每次增加&lt;code&gt;gDegreesRotated&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//rotate by 1 degree&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gDegreesRotated += &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//don&#39;t go over 360 degrees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(gDegreesRotated &amp;gt; &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;) gDegreesRotated -= &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要每帧都调用一次&lt;code&gt;Update&lt;/code&gt;函数。让我们把它加入到&lt;code&gt;AppMain&lt;/code&gt;的循环中，在调用&lt;code&gt;Render&lt;/code&gt;之前。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(glfwGetWindowParam(GLFW_OPENED))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// process pending events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwPollEvents();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// update the rotation animation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// draw one frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Render();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们需要基于&lt;code&gt;gDegreesRotated&lt;/code&gt;变量来重新计算模型矩阵。在&lt;code&gt;Render&lt;/code&gt;函数中我们修改相关代码来设置模型矩阵：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;model&quot;&lt;/span&gt;, glm::rotate(glm::mat4(), glm::radians(gDegreesRotated), glm::vec3(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与之前唯一不同的是我们使用了&lt;code&gt;gDegreesRotated&lt;/code&gt;来替换45°常量。&lt;/p&gt;
&lt;p&gt;你现在运行程序能看到一个漂亮，平滑转动的立方体动画。唯一的问题就是转动的速度很你的FPS帧率有关。假如FPS高，你的立方体旋转的就快。假如FPS降低，那立方体旋转的就慢些。这不够理想。一个程序应该能正确更新，而不在乎于运行的帧率。&lt;/p&gt;
&lt;h2 id=&quot;基于时间的动画&quot;&gt;&lt;a href=&quot;#基于时间的动画&quot; class=&quot;headerlink&quot; title=&quot;基于时间的动画&quot;&gt;&lt;/a&gt;基于时间的动画&lt;/h2&gt;&lt;p&gt;为了使程序跑起来更正确，不依赖于FPS，动画应该&lt;em&gt;每秒&lt;/em&gt;更新，而非&lt;em&gt;每帧&lt;/em&gt;更新。最简单得方式就是对时间进行计数，并相对上次更新时间来正确更新。让我们改下&lt;code&gt;Update&lt;/code&gt;函数，增加个变量&lt;code&gt;secondsElapsed&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; secondsElapsed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLfloat degreesPerSecond = &lt;span class=&quot;number&quot;&gt;180.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gDegreesRotated += secondsElapsed * degreesPerSecond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(gDegreesRotated &amp;gt; &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;) gDegreesRotated -= &lt;span class=&quot;number&quot;&gt;360.0f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码使得立方体每秒旋转180°，而无关多少帧率。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;AppMain&lt;/code&gt;循环中，我们需要计算离上次更新过去了多少秒。新的循环应该是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; lastTime = glfwGetTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(glfwGetWindowParam(GLFW_OPENED))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// process pending events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwPollEvents();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// update the scene based on the time elapsed since last update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; thisTime = glfwGetTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Update((float)(thisTime - lastTime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastTime = thisTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// draw one frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Render();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glfwGetTime&lt;/code&gt;返回从程序启动开始到现在所逝去的时间。&lt;/p&gt;
&lt;p&gt;我们使用&lt;code&gt;lastTime&lt;/code&gt;变量来记录上次更新时间。每次迭代，我们获取最新的时间存入变量&lt;code&gt;thisTime&lt;/code&gt;。从上次更新到现在的差值就是&lt;code&gt;thisTime - lastTime&lt;/code&gt;。当更新结束，我们设置&lt;code&gt;lastTime = thisTime&lt;/code&gt;以便下次循环迭代的时候很正常工作。&lt;/p&gt;
&lt;p&gt;这是基于时间更新的最简单方法。这里还有&lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更好的更新方法&lt;/a&gt;，但我们还不需要搞得这么复杂。&lt;/p&gt;
&lt;h2 id=&quot;下篇预告&quot;&gt;&lt;a href=&quot;#下篇预告&quot; class=&quot;headerlink&quot; title=&quot;下篇预告&quot;&gt;&lt;/a&gt;下篇预告&lt;/h2&gt;&lt;p&gt;下一篇，我们会使用&lt;code&gt;tdogl::Camera&lt;/code&gt;类来实现用键盘操作第一人称射击类型的相机移动，可以用鼠标观察不同方向，或者用鼠标滚轮来放大缩小。&lt;/p&gt;
&lt;h2 id=&quot;更多资源&quot;&gt;&lt;a href=&quot;#更多资源&quot; class=&quot;headerlink&quot; title=&quot;更多资源&quot;&gt;&lt;/a&gt;更多资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial 3 : Matrices&lt;/a&gt; is a great explanation of matrices from opengl-tutorial.org&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Scaling_(geometry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scaling&lt;/a&gt;), &lt;a href=&quot;http://en.wikipedia.org/wiki/Rotation_matrix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rotation&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Translation_(geometry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;translation&lt;/a&gt;), and &lt;a href=&quot;http://en.wikipedia.org/wiki/Transformation_matrix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;transformation matrices&lt;/a&gt; on Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-matrices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basic 3D Math: Matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.teamten.com/lawrence/graphics/homogeneous/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homogeneous coordinates&lt;/a&gt; by Lawrence Kesteloot&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.glprogramming.com/red/chapter03.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Viewing&lt;/a&gt; chapter of the OpenGL red book. Uses old version of OpenGL in code examples, but the theory is still the same.&lt;/li&gt;
&lt;li&gt;GLM &lt;a href=&quot;http://glm.g-truc.net/code.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code samples&lt;/a&gt; and &lt;a href=&quot;http://glm.g-truc.net/glm-0.9.4.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;manual (pdf)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Z-buffering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Z-buffering (depth buffering)&lt;/a&gt; on Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arcsynthesis.org/gltut/Positioning/Tut05%20Overlap%20and%20Depth%20Buffering.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overlap and Depth Buffering&lt;/a&gt; section of the Learning Modern 3D Graphics Programming book&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fix Your Timestep!&lt;/a&gt; by Glenn Fiedler&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/modern-opengl-03.png&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文中，我会将不会动的2D三角形替换为旋转的3D立方体。你会看到这样的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/rotating-crate.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在我们终于能在屏幕上搞点有趣的东西了，我放了更多的动图在这里：&lt;a href=&quot;http://imgur.com/a/x8q7R&quot;&gt;http://imgur.com/a/x8q7R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了生成旋转立方体，我们需要学些关于矩阵的数学，用于创建透视投影，旋转，平移和“相机”概念。我们还有必要学习些深度缓冲，和典型的随时间改变的3D应用，比如动画。&lt;/p&gt;
    
    </summary>
    
      <category term="modern-opengl-tutorials" scheme="http://huangwei.pro/categories/modern-opengl-tutorials/"/>
    
    
      <category term="opengl" scheme="http://huangwei.pro/tags/opengl/"/>
    
      <category term="tutorials" scheme="http://huangwei.pro/tags/tutorials/"/>
    
  </entry>
  
  <entry>
    <title>视线和光线：如何给游戏添加 2D 可见性和阴影效果</title>
    <link href="http://huangwei.pro/2015-08/game-sight-light/"/>
    <id>http://huangwei.pro/2015-08/game-sight-light/</id>
    <published>2015-08-10T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.561Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/89193/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;各位好！今天，我将告诉你如何做这样的事情：（在框中四处移动你的鼠标）&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft7.html&quot; height=&quot;370&quot; width=&quot;850&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;这种效果用于我新开发的开源游戏《&lt;a href=&quot;http://nothingtohide.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nothing To Hide&lt;/a&gt;》。许多其他的 2D 游戏（如Monaco，Gish）也都有。如果按着本教程来实现……也许下个就是你的游戏！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7cc829d3gw1eux6hz1uofj20nc06y3zz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我将展示我在学习如何实现这种效果过程中的步骤和所发生的错误。首先，给一些样板代码。下面只是演示绘制了一堆线段并跟踪鼠标位置。（注：有四个线段为边框）&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft0.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;接下来介绍数学知识。别担心，这里只是复习下入门的代数而已。&lt;/p&gt;
&lt;p&gt;我们需要找出射线和所有线段的最近交叉点。任何线段可以被写成参数形式：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;点 + 方向 * T&lt;/pre&gt;

&lt;p&gt;这儿我们给出 4 组方程来描述射线和线段的 x 和 y 变量：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;射线 X = r_px+r_dx*T1

射线 Y = r_py+r_dy*T1

线段 X = s_px+s_dx*T2

线段 Y = s_py+s_dy*T2&lt;/pre&gt;

&lt;p&gt;注：在我们做任何事情之前，请检查以确保射线和线段不是平行的，也就是说，它们的方向是不一样的。如果它们是平行的，那就没有交集。好了，继续。&lt;/p&gt;
&lt;p&gt;如果射线和线段相交，其 x 和 y 变量是相同的：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;r_px+r_dx*T1 = s_px+s_dx*T2

r_py+r_dy*T1 = s_py+s_dy*T2&lt;/pre&gt;

&lt;p&gt;我们做个小小的符号移位来求解 T1 和 T2&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;// Isolate T1 for both equations, getting rid of T1

// 从两个等式中独立出T1，移去T1

 T1 = (s_px+s_dx*T2-r_px)/r_dx = (s_py+s_dy*T2-r_py)/r_dy

// Multiply both sides by r_dx * r_dy

// 两边同乘上 r_dx * r_dy

s_px*r_dy + s_dx*T2*r_dy - r_px*r_dy = s_py*r_dx + s_dy*T2*r_dx - r_py*r_dx

// Solve for T2!

// 解出T2！

T2 = (r_dx*(s_py-r_py) + r_dy*(r_px-s_px))/(s_dx*r_dy - s_dy*r_dx)

// Plug the value of T2 to get T1

// 代入T2，解出T1

T1 = (s_px+s_dx*T2-r_px)/r_dx&lt;/pre&gt;

&lt;p&gt;确保 T1&amp;gt;0 并且 0&amp;lt;T2&amp;lt;1。如果不是，则可认为射线和线段没有交点，不可能有交集。但如果是，那太好了！你已经找到了一个交点。现在只要使用同一条射线与其它线段进行计算，就能找到最近的交点。（这个值就是最小T1值）&lt;/p&gt;
&lt;p&gt;这就是所有的数学知识了：（将鼠标移到下面的框里）&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft1.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;哇！现在用这些东西让我们找一些乐子！我投了50条向各个方向的光线：&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft2.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;于是我想，我可以简单地连接这些射线与线段的点，就能获得不错的可见性多边形。但是，最终它看起来像……&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft3.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;织网。但这并不重要，即使我使用360条射线来模拟360度，它仍然看上去很不靠谱。这是我最大的绊脚石，直到我意识到我不可能四面八方都投射到。我只需投射到线段的两端点。对每一个（唯一的）线段端点，朝它直接投射射线，再加上两条偏移为+/- 0.00001弧度的射线。这两条额外的射线会打在给定线段后面的墙上。&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft4.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;接下来，按照射线的角度对交点进行排序。这让我可以简单地按顺时针方向连接各个点，并绘制出平滑的可见性多边形，比如这样的：&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft5.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;终于来了！为了实际上看起来更好些。为了绘制额外的可见性多边形，我们再在位置上稍微偏移投射射线，可以创造出“模糊”阴影，像下面一样。红点表示11原点 - 是的，这有11个可见性多边形！&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft6.html&quot; height=&quot;370&quot; width=&quot;650&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;当这一切完成后，我画了这两张图像…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7cc829d3gw1eux6hyagcuj20nc0a0mxi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7cc829d3gw1eux6hxmtltj20nc0a0t98.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;…并混合在一起，利用模糊阴影作为一个alpha遮罩。我已经向您展示了跟页面顶部相似的令人毛骨悚然的画面，只不过这里是一个不同的迭代，用了多个光源。&lt;/p&gt;
&lt;iframe src=&quot;http://ncase.me/sight-and-light/draft8.html&quot; height=&quot;370&quot; width=&quot;850&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;多个光源。投射阴影。一个巨大的激光炸弹。显示出你的主角/敌人看的到或看不到的区域。2D可见性/照明效果可以非常灵活得进行合适的创意，可以为您的游戏增加很多额外的魅力。&lt;/p&gt;
&lt;h3 id=&quot;要有光&quot;&gt;&lt;a href=&quot;#要有光&quot; class=&quot;headerlink&quot; title=&quot;要有光&quot;&gt;&lt;/a&gt;要有光&lt;/h3&gt;&lt;p&gt;*完全是一个技术术语 （译者注：原本是圣经创世纪里的一句话）&lt;/p&gt;
&lt;p&gt;作者的开源地址：&lt;a href=&quot;https://github.com/ncase/sight-and-light&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ncase/sight-and-light&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      视线和光线：如何给游戏添加 2D 可见性和阴影效果
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="game" scheme="http://huangwei.pro/tags/game/"/>
    
      <category term="2d" scheme="http://huangwei.pro/tags/2d/"/>
    
      <category term="visibility" scheme="http://huangwei.pro/tags/visibility/"/>
    
      <category term="sight" scheme="http://huangwei.pro/tags/sight/"/>
    
  </entry>
  
  <entry>
    <title>现代OpenGL教程 02 - 贴图</title>
    <link href="http://huangwei.pro/2015-08/modern-opengl2/"/>
    <id>http://huangwei.pro/2015-08/modern-opengl2/</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.563Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/modern-opengl-02.png&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;在本文中，我们将给三角形加一个贴图，这需要在顶点和片段着色器中加入一些新变量，创建和使用贴图对象，并且学习一点贴图单元和贴图坐标的知识。&lt;/p&gt;
&lt;p&gt;本文会使用两个新的类到&lt;code&gt;tdogl&lt;/code&gt;命名空间中：&lt;code&gt;tdogl:Bitmap&lt;/code&gt;和&lt;code&gt;tdogl:Texture&lt;/code&gt;。这些类允许我们将jpg，png或bmp图片上传到显存并用于着色器。&lt;code&gt;tdogl:Program&lt;/code&gt;类也增加一些相关接口。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;获取代码&quot;&gt;&lt;a href=&quot;#获取代码&quot; class=&quot;headerlink&quot; title=&quot;获取代码&quot;&gt;&lt;/a&gt;获取代码&lt;/h2&gt;&lt;p&gt;所有例子代码的zip打包可以从这里获取：&lt;a href=&quot;https://github.com/tomdalling/opengl-series/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series/archive/master.zip&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这一系列文章中所使用的代码都存放在：&lt;a href=&quot;https://github.com/tomdalling/opengl-series&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series&lt;/a&gt;。你可以在页面中下载zip，加入你会git的话，也可以复制该仓库。&lt;/p&gt;
&lt;p&gt;本文代码你可以在&lt;code&gt;&lt;a href=&quot;https://github.com/tomdalling/opengl-series/tree/master/source/02_textures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source/02_textures&lt;/a&gt;&lt;/code&gt;目录里找到。使用OS X系统的，可以打开根目录里的&lt;code&gt;opengl-series.xcodeproj&lt;/code&gt;，选择本文工程。使用Windows系统的，可以在Visual Studio 2013里打开&lt;code&gt;opengl-series.sln&lt;/code&gt;，选择相应工程。&lt;/p&gt;
&lt;p&gt;工程里已包含所有依赖，所以你不需要再安装或者配置额外的东西。如果有任何编译或运行上的问题，请联系我。&lt;/p&gt;
&lt;h2 id=&quot;着色器变量Uniform与Attribute&quot;&gt;&lt;a href=&quot;#着色器变量Uniform与Attribute&quot; class=&quot;headerlink&quot; title=&quot;着色器变量Uniform与Attribute&quot;&gt;&lt;/a&gt;着色器变量Uniform与Attribute&lt;/h2&gt;&lt;p&gt;教程一里的着色器变量都是&lt;em&gt;attribute&lt;/em&gt;，本文介绍另外一种类型的变量：&lt;em&gt;uniform&lt;/em&gt;变量。&lt;/p&gt;
&lt;p&gt;着色器变量有两种类型：&lt;em&gt;uniform&lt;/em&gt;和&lt;em&gt;attribute&lt;/em&gt;。&lt;mark&gt;&lt;em&gt;attribute&lt;/em&gt;变量可以在每个顶点上有不同值。而&lt;em&gt;uniform&lt;/em&gt;变量在多个顶点上保持相同值。&lt;/mark&gt;比如，你想要给一个三角形设置一种颜色，那你应该使用&lt;em&gt;uniform&lt;/em&gt;变量，如果你希望每个三角形顶点有不同颜色，你应该使用&lt;em&gt;attribute&lt;/em&gt;变量。从这开始，我称呼他们为“uniforms”和“attributes”。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;Uniforms能被任意着色器访问，但是Attributes必须先进入&lt;strong&gt;顶点着色器&lt;/strong&gt;，而非&lt;strong&gt;片段着色器&lt;/strong&gt;。顶点着色器在需要时会将该值传给片段着色器。&lt;/mark&gt;这因为Uniforms像常量-它们不会被任何着色器更改。然而，Attributes不是常量。顶点着色器会改变Attribute变量的值，在片段着色器获取之前。就是说，顶点着色器的输出就是片段着色器的输入。&lt;/p&gt;
&lt;p&gt;为了设置Uniform的值，我们可以调用&lt;a href=&quot;http://www.opengl.org/sdk/docs/man/xhtml/glUniform.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glUniform*&lt;/a&gt;系列函数。而设置Attribute的值，我们需要在VBO中保存，并且和VAO一起发送给着色器，就像前一篇教程里的&lt;a href=&quot;http://www.opengl.org/sdk/docs/man/xhtml/glVertexAttribPointer.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glVertexAttribPointer&lt;/a&gt;。加入你不想把值存在VBO里，你也可以使用&lt;a href=&quot;http://www.opengl.org/sdk/docs/man/xhtml/glVertexAttrib.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glVertexAttrib*&lt;/a&gt;系列函数来设置Attribute值。&lt;/p&gt;
&lt;h2 id=&quot;贴图&quot;&gt;&lt;a href=&quot;#贴图&quot; class=&quot;headerlink&quot; title=&quot;贴图&quot;&gt;&lt;/a&gt;贴图&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;贴图，大体上来说就是你应用在3D物体上的2D图像。&lt;/mark&gt;它有其它用途，但显示2D图像在3D几何上是最常用的。有1D，2D，3D贴图，但本文只讲2D贴图。更深入阅读，请参见&lt;a href=&quot;http://www.arcsynthesis.org/gltut/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning Modern 3D Graphics Programming&lt;/a&gt;书中的&lt;a href=&quot;http://www.arcsynthesis.org/gltut/Texturing/Tutorial%2014.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Textures are not Pictures&lt;/a&gt;章节。&lt;/p&gt;
&lt;p&gt;贴图是存放在显存里的。那就是说，你需要在使用之前上传你的贴图数据给显卡。这类似VBO在前文的作用-VBO也是在使用之前需要存放到显存上。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;贴图的高和宽需要是2的幂次方。&lt;/mark&gt;比如16，32，64，128，256，512。本文中使用的是256*256的图像作为贴图，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/hazard.png&quot; alt=&quot;hazard.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们使用&lt;code&gt;tdogl:Bitmap&lt;/code&gt;来加载“hazard.png”的原始像素数据到内存中，参见&lt;a href=&quot;https://github.com/nothings/stb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stb_image&lt;/a&gt;帮助文档。然后我们使用&lt;code&gt;tdogl:Texture&lt;/code&gt;上传原始像素数据给OpenGL贴图对象。幸运的是OpenGL中的贴图创建方法从面世到现在都没有实质性的变化，所以网上有大量的创建贴图的好文章。虽然贴图坐标的传输方式有变化，但创建贴图还是跟以前一样。&lt;/p&gt;
&lt;p&gt;以下是&lt;code&gt;tdogl:Texture&lt;/code&gt;的构造函数，用于OpenGL贴图创建。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Texture::Texture(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Bitmap&amp;amp; bitmap, GLint minMagFiler, GLint wrapMode) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _originalWidth((GLfloat)bitmap.width()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _originalHeight((GLfloat)bitmap.height())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glGenTextures(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;_object);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindTexture(GL_TEXTURE_2D, _object);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minMagFiler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, minMagFiler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrapMode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrapMode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glTexImage2D(GL_TEXTURE_2D,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 TextureFormatForBitmapFormat(bitmap.format()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 (GLsizei)bitmap.width(), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 (GLsizei)bitmap.height(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 TextureFormatForBitmapFormat(bitmap.format()), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 GL_UNSIGNED_BYTE, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 bitmap.pixelBuffer());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindTexture(GL_TEXTURE_2D, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;贴图坐标&quot;&gt;&lt;a href=&quot;#贴图坐标&quot; class=&quot;headerlink&quot; title=&quot;贴图坐标&quot;&gt;&lt;/a&gt;贴图坐标&lt;/h2&gt;&lt;p&gt;毫无疑问，贴图坐标就是贴图上的坐标。&lt;mark&gt;关于贴图坐标比较奇特的是它们不是以像素为单位。它们范围是从0到1，(0, 0)是左下角，(1, 1)是右上角。&lt;/mark&gt;假如你上传到OpenGL的图像是颠倒的，那(0, 0)就是左上角，而非左下角。将像素坐标转换为贴图坐标，你必须除上贴图的宽和高。比如，在256*256的图像中，像素坐标(128, 256)的贴图坐标是(0.5, 1)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/opengl-tutorials/uv_coords.png&quot; alt=&quot;uv_coords.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;贴图坐标通常被称为UV坐标。你也可以叫它们是XY坐标，但是XYZ通常被用来表示顶点，我们不希望将这两者混淆。&lt;/p&gt;
&lt;h2 id=&quot;贴图图像单元&quot;&gt;&lt;a href=&quot;#贴图图像单元&quot; class=&quot;headerlink&quot; title=&quot;贴图图像单元&quot;&gt;&lt;/a&gt;贴图图像单元&lt;/h2&gt;&lt;p&gt;贴图图像单元，亦或简称“贴图单元”，是在OpenGL中略怪异的一部分。&lt;mark&gt;你无法直接发送贴图给着色器。首先，你要绑定贴图到贴图单元，然后呢要发送&lt;strong&gt;贴图单元的索引&lt;/strong&gt;给着色器&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;对于贴图单元是有数量限制的。在低端硬件上，如手机，它们只有两个贴图单元。既然如此，即使我们有许多的贴图，我们也只能同时使用两个贴图单元在着色器中。我们在本文中只用到了一个贴图，所以也只需要一个贴图单元，但它可以在多个不同的着色器中混合。&lt;/p&gt;
&lt;h2 id=&quot;实现贴图&quot;&gt;&lt;a href=&quot;#实现贴图&quot; class=&quot;headerlink&quot; title=&quot;实现贴图&quot;&gt;&lt;/a&gt;实现贴图&lt;/h2&gt;&lt;p&gt;首先，让我们创建一个新的全局贴图。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tdogl::Texture* gTexture = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们为加载“hazard.png”图片新增一个函数。该函数能被&lt;code&gt;AppMain&lt;/code&gt;所调用。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoadTexture&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tdogl::Bitmap bmp = tdogl::Bitmap::bitmapFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;hazard.png&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bmp.flipVertically();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gTexture = new tdogl::Texture(bmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下一步，我们给每个三角形的顶点一个贴图坐标。假如你跟上图比较过UV坐标，就可以看出按顺序这个坐标表示（中，上），（左，下）和（右，下）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLfloat vertexData[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  X     Y     Z       U     V&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.5f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们需要修改片段着色器，使得它能使用贴图和贴图坐标作为输入。下面是新的片段着色器代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniform sampler2D tex; &lt;span class=&quot;comment&quot;&gt;//this is the texture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 fragTexCoord; &lt;span class=&quot;comment&quot;&gt;//this is the texture coord&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec4 finalColor; &lt;span class=&quot;comment&quot;&gt;//this is the output color of the pixel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finalColor = texture(tex, fragTexCoord);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;uniform&lt;/code&gt;关键字说明&lt;code&gt;tex&lt;/code&gt;是&lt;em&gt;uniform&lt;/em&gt;变量。贴图是一致的，因为所有三角形顶点有相同的贴图。&lt;code&gt;sampler2D&lt;/code&gt;是变量类型，说明它包含一个2D贴图。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fragTexCoord&lt;/code&gt;是&lt;em&gt;attribute&lt;/em&gt;变量，因为每个三角形顶点是不同的贴图坐标。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;texture&lt;/code&gt;函数是用来查找给定贴图坐标的像素颜色。在GLSL旧版本中，你应该使用&lt;code&gt;texture2D&lt;/code&gt;函数来实现该功能。&lt;/p&gt;
&lt;p&gt;我们无法直接传送&lt;em&gt;attribute&lt;/em&gt;给判断着色器，因为&lt;em&gt;attribute&lt;/em&gt;必须首先通过顶点着色器。这儿是修改过的顶点着色器：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in vec2 vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec2 fragTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Pass the tex coord straight through to the fragment shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragTexCoord = vertTexCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;顶点着色器使用&lt;code&gt;vertTexCoord&lt;/code&gt;作为输入，并且将它不经修改，直接传给名为&lt;code&gt;fragTexCoord&lt;/code&gt;的&lt;em&gt;attribute&lt;/em&gt;片段着色器变量。&lt;/p&gt;
&lt;p&gt;着色器有两个变量需要我们设置：&lt;code&gt;vertTexCoord&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt;变量和&lt;code&gt;tex&lt;/code&gt;&lt;em&gt;uniform&lt;/em&gt;变量。让我们从设置&lt;code&gt;tex&lt;/code&gt;变量开始。打开main.cpp，找到&lt;code&gt;Render()&lt;/code&gt;函数。我们在绘制三角形之前设置&lt;code&gt;tex&lt;/code&gt;&lt;em&gt;uniform&lt;/em&gt;变量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glActiveTexture(GL_TEXTURE0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindTexture(GL_TEXTURE_2D, gTexture-&amp;gt;object());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gProgram-&amp;gt;setUniform(&lt;span class=&quot;string&quot;&gt;&quot;tex&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//set to 0 because the texture is bound to GL_TEXTURE0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;贴图在没有绑定到贴图单元时，是无法使用的。&lt;code&gt;glActiveTexture&lt;/code&gt;告诉OpenGL我们希望使用哪个贴图单元。&lt;code&gt;GL_TEXTURE0&lt;/code&gt;是第一个贴图单元，我们就使用它。&lt;/p&gt;
&lt;p&gt;下一本，我们使用&lt;code&gt;glBindTexture&lt;/code&gt;来绑定我们的贴图到激活的贴图单元。&lt;/p&gt;
&lt;p&gt;然后我们设置贴图单元索引给&lt;code&gt;tex&lt;/code&gt;&lt;em&gt;uniform&lt;/em&gt;着色器变量。我们使用0号贴图单元，所以我们设置&lt;code&gt;tex&lt;/code&gt;变量为整数&lt;code&gt;0&lt;/code&gt;。&lt;code&gt;setUniform&lt;/code&gt;方法只是调用了&lt;code&gt;glUnifrom1i&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;最后一步，获取贴图坐标给&lt;code&gt;vertTexCoord&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt;变量。为了实现它，我们需要修改&lt;code&gt;LoadTriangle()&lt;/code&gt;函数中的VAO。之前的代码是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Put the three triangle vertices into the VBO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLfloat vertexData[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  X     Y     Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// connect the xyz to the &quot;vert&quot; attribute of the vertex shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glVertexAttribPointer(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, GL_FLOAT, GL_FALSE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们需要改成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Put the three triangle vertices (XYZ) and texture coordinates (UV) into the VBO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLfloat vertexData[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  X     Y     Z       U     V&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.5f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// connect the xyz to the &quot;vert&quot; attribute of the vertex shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glVertexAttribPointer(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, GL_FLOAT, GL_FALSE, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(GLfloat), &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// connect the uv coords to the &quot;vertTexCoord&quot; attribute of the vertex shader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vertTexCoord&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glVertexAttribPointer(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vertTexCoord&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, GL_FLOAT, GL_TRUE,  &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(GLfloat), (const GLvoid*)(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * sizeof(GLfloat)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们第二次调用了&lt;code&gt;glVertexAttribPointer&lt;/code&gt;，但我们也修改了第一个调用。最重要的是最后两个参数。&lt;/p&gt;
&lt;p&gt;两个&lt;code&gt;glVertexAttribPointer&lt;/code&gt;调用的倒数第二个参数都是&lt;code&gt;5*sizeof(GLfloat)&lt;/code&gt;。这是“步长”参数。该参数是表明每个值开始位置的间隔是多少字节，或者说是到下个值开始的字节数。在两个调用中，每个值是5个&lt;code&gt;GLFloat&lt;/code&gt;长度。举个例子，加入我们从“X”开始，往前数5个值，我们会落在下个“X”值上。从“U”开始也一样，也是往前数5个。该参数是字节单位，不是浮点作为单位，所以我们必须乘上浮点类型所占字节数。&lt;/p&gt;
&lt;p&gt;最后一个参数&lt;code&gt;glVertexAttribPointer&lt;/code&gt;是一个“偏移”参数。该参数需要知道从开始到第一个值有多少字节。开始是&lt;strong&gt;XYZ&lt;/strong&gt;，所以偏移设置为NULL表示“到开始的距离为0字节”。第一个&lt;strong&gt;UV&lt;/strong&gt;不在最前面-中间有3个浮点的距离。再说一遍，参数是以字节为单位，而非浮点，所以我们必须乘上浮点类型所占字节数。并且我们必须将数值转为&lt;code&gt;const GLvoid*&lt;/code&gt;类型，因为在旧版本的OpenGL中该参数有别于现在的“偏移”。&lt;/p&gt;
&lt;p&gt;现在，当你运行程序，你就能看到如本文最上方的那个三角形。&lt;/p&gt;
&lt;h2 id=&quot;下篇预告&quot;&gt;&lt;a href=&quot;#下篇预告&quot; class=&quot;headerlink&quot; title=&quot;下篇预告&quot;&gt;&lt;/a&gt;下篇预告&lt;/h2&gt;&lt;p&gt;下一篇教程中我们会学一些矩阵相关的东西，使用矩阵来旋转立方体，移动相机，和添加透视投影。我们还会学习深度缓冲和基于时间更新的逻辑，比如动画。&lt;/p&gt;
&lt;h2 id=&quot;更多OpenGL贴图相关资源&quot;&gt;&lt;a href=&quot;#更多OpenGL贴图相关资源&quot; class=&quot;headerlink&quot; title=&quot;更多OpenGL贴图相关资源&quot;&gt;&lt;/a&gt;更多OpenGL贴图相关资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opengl.org/wiki/Texture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The texture page on the OpenGL wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arcsynthesis.org/gltut/Texturing/Texturing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The texturing chapters&lt;/a&gt; of the Learning Modern 3D Graphics Programming book.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ogldev.atspace.co.uk/www/tutorial16/tutorial16.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial 16 - Basic Texture Mapping&lt;/a&gt; by Etay Meiri&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/progschj/OpenGL-Examples/blob/master/03texture.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The texturing example code&lt;/a&gt; by Jakob Progsch&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      现代OpenGL贴图
    
    </summary>
    
      <category term="modern-opengl-tutorials" scheme="http://huangwei.pro/categories/modern-opengl-tutorials/"/>
    
    
      <category term="opengl" scheme="http://huangwei.pro/tags/opengl/"/>
    
      <category term="tutorials" scheme="http://huangwei.pro/tags/tutorials/"/>
    
  </entry>
  
  <entry>
    <title>游戏中的随机概率</title>
    <link href="http://huangwei.pro/2015-07/game-random/"/>
    <id>http://huangwei.pro/2015-07/game-random/</id>
    <published>2015-07-25T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.560Z</updated>
    
    <content type="html">&lt;p&gt;这段时间公司开发的游戏上线测试，许多玩家在抽卡时抱怨脸黑，很难抽到所需要的卡牌，而又有一部分玩家反应运气好能连着抽到紫卡，检查了下随机相关逻辑代码，并没有找出问题所在，玩家运气好与坏只是觉得真有可能是概率原因。&lt;/p&gt;
&lt;p&gt;测试开服了几天之后，需要开放某个限时抽卡活动，在内部测试时，我们发现玩家反应的问题在限时抽卡中格外明显，尤其是其中最主要的一张稀有卡牌，猜测因为限时抽卡库配置的种类较少，然后就拿该活动来检查了下我们游戏随机机制问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;5-概率？20次出现一次？&quot;&gt;&lt;a href=&quot;#5-概率？20次出现一次？&quot; class=&quot;headerlink&quot; title=&quot;5%概率？20次出现一次？&quot;&gt;&lt;/a&gt;5%概率？20次出现一次？&lt;/h2&gt;&lt;p&gt;大部分游戏策划使用权值来配置随机概率，因为权值有个好处就是可以在增加随机物品时，可以不对之前的配置进行更改，比如：白卡 30，蓝卡 10，紫卡 10，转为概率即是：白卡 60%，蓝卡 20%，紫卡 20%。&lt;/p&gt;
&lt;p&gt;而上述限时抽卡的例子中，我们的权值配置是5和95，模拟50000次随机（使用系统随机函数，如C的rand函数，Python的random库）得到如下结果：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd1.png&quot; width=&quot;80%&quot; alt=&quot;按权值随机50000次&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;上图绘制的是权值为5的卡牌的随机状态，红色的图是分布图，X轴是出现的次数，Y轴是相同卡牌再次出现的间隔，简单得说就是，第x次卡牌出现时离上次该卡牌出现间隔了y次随机。绿色的图是分布概率图，X轴是间隔数，Y轴是概率。按策划的想法，&lt;strong&gt;5%概率&lt;/strong&gt;应该等同于&lt;strong&gt;20次出现一次&lt;/strong&gt;，那上图很明显并不满足&lt;strong&gt;20次出现一次&lt;/strong&gt;出现规则，实际间隔从近到远呈下坡形状分布，就是说相邻的概率最大，间隔最大超过160，这与玩家所吐槽的抽卡体验是一致的。但50000次随机总共出现了2508次，从统计的意义上来说又是符合&lt;strong&gt;5%概率&lt;/strong&gt;的。所以这个问题，究其原因就是所谓的概率是统计意义上的还是分布意义上的问题。&lt;/p&gt;
&lt;h2 id=&quot;最原始的实现&quot;&gt;&lt;a href=&quot;#最原始的实现&quot; class=&quot;headerlink&quot; title=&quot;最原始的实现&quot;&gt;&lt;/a&gt;最原始的实现&lt;/h2&gt;&lt;p&gt;我用列表里取元素的方式来模拟&lt;strong&gt;20次出现一次&lt;/strong&gt;，为了方便比较异同，直接随机的方式我也贴上相关代码。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pool = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]*&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; + [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]*&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = [random.choice(a) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(N)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面是直接随机的方式，只保证&lt;strong&gt;5%概率&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pool = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; pool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pool = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]*&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]*&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		random.shuffle(pool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result.append(pool[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; pool[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面是打乱列表，然后依次取元素的方式，保证&lt;strong&gt;20次出现一次&lt;/strong&gt;，而&lt;strong&gt;5%概率&lt;/strong&gt;则是隐含在内的，生成效果如下图。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd2.png&quot; width=&quot;80%&quot; alt=&quot;使用第二种实现的随机分布&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;该图明显跟第一个实现的图不一样，上图表明了间隔基本上是落在[0, 40]的区间内，并且均匀分布在20那条蓝色对称线附近。这个才是最终想要的随机的效果。红色的线是正态分布曲线，是不是很相似？后面我会讲到。&lt;/p&gt;
&lt;p&gt;眼尖的会发现在第一个实现中我用的pool是&lt;code&gt;[0]*5 + [1]*95&lt;/code&gt;，而第二个实现中我用的是&lt;code&gt;[0]*1 + [1]*19&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里&lt;strong&gt;20次出现一次&lt;/strong&gt;并不等同于&lt;strong&gt;100次出现五次&lt;/strong&gt;，也是从分布的意义上来说的，&lt;strong&gt;100次出现五次&lt;/strong&gt;是存在5次连续出现的可能。&lt;/p&gt;
&lt;p&gt;针对策划的配置，我们需要进行预处理，怎么处理？GCD啊~，5和95的最大公约数是5，所以在第二个实现的代码中我直接使用了1和19。&lt;/p&gt;
&lt;p&gt;但这里有个问题，一般策划配置的随机库中肯定有多个物品。权值如果配置的比较随意的话，很可能就导致GCD为1，这样想要实现&lt;strong&gt;XX次出现一次&lt;/strong&gt;就不可行了。比如刚才的权值配置5和95，再加一个权值为11的话，就只能实现&lt;strong&gt;111次出现5次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以这两种依赖列表的随机方式并不适用，一是需要维护的列表内存会比较大，二是对策划配置方式有过多约束。&lt;/p&gt;
&lt;h2 id=&quot;更通用更优美的实现&quot;&gt;&lt;a href=&quot;#更通用更优美的实现&quot; class=&quot;headerlink&quot; title=&quot;更通用更优美的实现&quot;&gt;&lt;/a&gt;更通用更优美的实现&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;20次出现一次&lt;/strong&gt;是以20为标准周期，当然不能每次都是间隔20出现，这样就太假了，根本没有随机感受可言，为了模拟随机并可以控制一定的出现频率，我选择正态分布来进行伪随机分布生成，原因是分布会更自然一些。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd3_Normal_distribution.png&quot; width=&quot;60%&quot; alt=&quot;正态分布&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;关于正态分布这里就不详细描述了，只需关心分布的两个参数即可，位置参数为$\mu$、尺度参数为$\sigma$。根据正态分布，两个标准差之内的比率合起来为95%；三个标准差之内的比率合起来为99%。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd4_normal_sigma.png&quot; width=&quot;60%&quot; alt=&quot;根据正态分布，两个标准差之内的比率合起来为95%；三个标准差之内的比率合起来为99%&quot;&gt;&lt;br&gt;&lt;/p&gt;


&lt;p&gt;用上面的例子来定下参数，$\mu=20, \sigma=20/3$，这样每次按正态分布随机，就能得到一个理想的随机分布和概率区间。&lt;/p&gt;
&lt;p&gt;C语言标准函数库中只有rand，如何生成符合正态分布的随机数可以参见&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WiKi上的介绍&lt;/a&gt;。这里我直接使用Python中random库中的normalvariate函数，当然gauss函数也是一样的，&lt;a href=&quot;https://docs.python.org/2/library/random.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;上说gauss函数会快些，&lt;a href=&quot;http://stackoverflow.com/questions/27749133/what-is-the-difference-between-random-normalvariate-and-random-gauss-in-pyth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverFlow&lt;/a&gt;上说gauss是非线程安全函数，所以会快。我自己简单测试了下，在单线程情况下，gauss是会快些，但只是快了一点点而已。&lt;/p&gt;
&lt;p&gt;首先，我直接生成权值为5的卡牌的间隔，检验下正态分布的随机效果。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NN = int(N*&lt;span class=&quot;number&quot;&gt;0.05&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mu, sigma = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delta = [int(random.normalvariate(mu, sigma)) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(NN)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd3.png&quot; width=&quot;80%&quot; alt=&quot;模拟正态分布的伪随机&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;这图是不是比第二个实现的图更好看一些，分布也更平滑一些呢。OK，接下来就是替换旧的随机算法了。&lt;/p&gt;
&lt;h2 id=&quot;细节和优化&quot;&gt;&lt;a href=&quot;#细节和优化&quot; class=&quot;headerlink&quot; title=&quot;细节和优化&quot;&gt;&lt;/a&gt;细节和优化&lt;/h2&gt;&lt;p&gt;刚才说了随机库中会有很多物品，都需要按照各自的权值随机，并各自出现频率符合正态分布。下面我们来说说细节。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wtp = [&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;*x/sum(wt) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; wt]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = [random.normalvariate(&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/x, &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/x/&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; wtp]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minp = &lt;span class=&quot;number&quot;&gt;1.e9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minj = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, pp &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(p):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pp &amp;lt; minp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minp = pp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minj = j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result.append(minj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, pp &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(p):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p[j] -= minp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p[minj] = random.normalvariate(&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/wtp[minj], &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/wtp[minj]/&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我使用了统一的随机种子，随机测试了500万次后，所得的结果与多个随机种子差别不大。&lt;/p&gt;
&lt;p&gt;简单解释下代码：初始化对所有物品按权值进行正态分布随机，每次取位置最小值的物品（也就是最先出现的），然后其它物品均减去该值，被取出的物品再单独进行一次正态分布随机，再次循环判断位置最小值。&lt;/p&gt;
&lt;p&gt;这里，每次都需要对所有物品进行求最小值和减法，都是需要遍历的运算，我们可以有如下优化。&lt;/p&gt;
&lt;p&gt;例如：(1,3,4) -&amp;gt; 取1减1, (0,2,3) -&amp;gt; 随机1, (1,2,3)，其实我们只是为了保持各物品之间位置的相对顺序即可，将对其它物品的减法变成对自己的加法，操作量级立马从$O(N)$缩为$O(1)$ 。&lt;/p&gt;
&lt;p&gt;如上面的例子：(1,3,4) -&amp;gt; 取1, (0,3,4) -&amp;gt; 随机1加1, (2,3,4)，这样的操作不会改变物品序列的正确性。&lt;/p&gt;
&lt;p&gt;熟悉最小堆的朋友，将查找最小值优化到$O(1)$应该也没啥问题吧。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wtp = [&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;*x/sum(wt) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; wt]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = [(random[i].normalvariate(&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/x, &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/x/&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;), i) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; wtp]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;heapq.heapify(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minp, minj = heapq.heappop(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result.append(minj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	heapq.heappush(p, (random[minj].normalvariate(&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/wtp[minj], &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;/wtp[minj]/&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;)+minp, minj))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h2&gt;&lt;p&gt;问题分析和算法实现就到这了，替换进我的游戏里看看什么效果，我已经迫不及待了。&lt;/p&gt;
&lt;p&gt;物品测试权值序列[10, 30, 50, 110, 150, 200, 250, 500]，随机测试500万次。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd_rand.png&quot; width=&quot;80%&quot; alt=&quot;第一个随机实现&quot;&gt;&lt;br&gt;    &lt;br&gt;第一个随机实现&lt;br&gt;&lt;/p&gt;

&lt;p&gt;第一个实现是只符合统计要求，不符合分布要求。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd_weight.png&quot; width=&quot;80%&quot; alt=&quot;第二个随机实现&quot;&gt;&lt;br&gt;    &lt;br&gt;第二个随机实现&lt;br&gt;&lt;/p&gt;

&lt;p&gt;第二个实现中对权值序列进行了GCD，可以看到只有绿色是符合分布要求的，而蓝色和青色退化成第一种实现。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/rnd_normal.png&quot; width=&quot;80%&quot; alt=&quot;基于正态分布的随机实现&quot;&gt;&lt;br&gt;    &lt;br&gt;基于正态分布的随机实现&lt;br&gt;&lt;/p&gt;

&lt;p&gt;完美！&lt;/p&gt;
&lt;h2 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h2&gt;&lt;p&gt;当然，实现&lt;strong&gt;20次出现一次&lt;/strong&gt;这样的分布伪随机还有其它方法，比如保存一个计数器，每随机一次就加到计数器上，当计数器的值大于或等于1，即必然出现。但这种实现需要计数器，每个玩家每个随机库每个物品都需要这么一个计数器字段，空间上实在太大了。&lt;/p&gt;
&lt;p&gt;关于随机种子，除非是全服竞争类资源，不然最好每个玩家有各自的随机种子，否则会造成体验上的误差，比如抽卡、关卡掉落等这些只针对玩家自身的系统随机。服从正态分布的全局随机序列，不同玩家任意取走序列中一段或者一些值，就可能导致对于每个玩家而言，各自取出的随机序列不再服从正态分布。&lt;/p&gt;
&lt;h2 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h2&gt;&lt;p&gt;我只能感叹Python的库太强大了，matplotlib绘制出来的图形也挺漂亮的，感兴趣的童鞋可以查阅&lt;a href=&quot;http://myshare.dscloud.me/scipydoc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用Python做科學計算&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      游戏中的随机概率
    
    </summary>
    
      <category term="develop" scheme="http://huangwei.pro/categories/develop/"/>
    
      <category term="dev-log" scheme="http://huangwei.pro/categories/develop/dev-log/"/>
    
    
      <category term="game" scheme="http://huangwei.pro/tags/game/"/>
    
      <category term="random" scheme="http://huangwei.pro/tags/random/"/>
    
      <category term="distribution" scheme="http://huangwei.pro/tags/distribution/"/>
    
  </entry>
  
  <entry>
    <title>现代OpenGL教程 01 - 入门指南</title>
    <link href="http://huangwei.pro/2015-05/modern-opengl1/"/>
    <id>http://huangwei.pro/2015-05/modern-opengl1/</id>
    <published>2015-05-12T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.562Z</updated>
    
    <content type="html">&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/opengl-tutorials/modern-opengl-01.png&quot; width=&quot;60%&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&quot;译序&quot;&gt;&lt;a href=&quot;#译序&quot; class=&quot;headerlink&quot; title=&quot;译序&quot;&gt;&lt;/a&gt;译序&lt;/h2&gt;&lt;p&gt;早前学OpenGL的时候还是1.x版本，用的都是&lt;code&gt;glVertex&lt;/code&gt;，&lt;code&gt;glNormal&lt;/code&gt;等固定管线API。后来工作需要接触DirectX9，shader也只是可选项而已，跟固定管线一起混用着。现在工作内容是手机游戏，又转到OpenGL ES，发现OpenGL的世界已经完全不同了，OpenGL ES 2.0版本开始就不再支持固定管线，只支持可编程管线。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/static/img/opengl-tutorials/pipe2.0.png&quot; width=&quot;60%&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;国内很多资料教程参差不齐，旧式接口满天飞。在&lt;a href=&quot;http://www.zhihu.com/question/22005157&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;看到这一系列教程，觉着挺好，就想着一边学顺便翻译下。毕竟手游市场的机遇和竞争压力都在同比猛涨，多了解OpenGL ES肯定没有坏处。浮躁功利的环境下更需要怀着一颗宁静致远的心去提高自身功底，长路漫漫，与君共勉。&lt;/p&gt;
&lt;p&gt;欢迎大家，这是现代OpenGL教程系列的第一篇。所有代码都是开源的，你可以在GitHub上下载：&lt;a href=&quot;https://github.com/tomdalling/opengl-series&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过这篇教程，你将会学到如何在Windows下用Visual Studio 2013或Mac下用Xcode搭建OpenGL 3.2工程。该应用包含一个顶点着色器（vertex shader），一个片段着色器（fragment shader）和使用VAO和VBO来绘制的三角形。该工程使用&lt;a href=&quot;http://glew.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLEW&lt;/a&gt;来访问OpenGL API，用&lt;a href=&quot;http://www.glfw.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLFW&lt;/a&gt;来处理窗口创建和输入，还有使用&lt;a href=&quot;http://glm.g-truc.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLM&lt;/a&gt;进行矩阵/矢量相关的数学运算。&lt;/p&gt;
&lt;p&gt;这听上去有点无聊，但搭建这样的工程确实挺麻烦的，尤其对于初学者。只要解决完这问题，我们就可以开始玩些有趣的东西了。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;获取代码&quot;&gt;&lt;a href=&quot;#获取代码&quot; class=&quot;headerlink&quot; title=&quot;获取代码&quot;&gt;&lt;/a&gt;获取代码&lt;/h2&gt;&lt;p&gt;所有例子代码的zip打包可以从这里获取：&lt;a href=&quot;https://github.com/tomdalling/opengl-series/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series/archive/master.zip&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这一系列文章中所使用的代码都存放在：&lt;a href=&quot;https://github.com/tomdalling/opengl-series&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tomdalling/opengl-series&lt;/a&gt;。你可以在页面中下载zip，加入你会git的话，也可以复制该仓库。&lt;/p&gt;
&lt;p&gt;本文代码你可以在&lt;code&gt;&lt;a href=&quot;https://github.com/tomdalling/opengl-series/tree/master/source/01_project_skeleton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source/01_project_skeleton&lt;/a&gt;&lt;/code&gt;目录里找到。使用OS X系统的，可以打开根目录里的&lt;code&gt;opengl-series.xcodeproj&lt;/code&gt;，选择本文工程。使用Windows系统的，可以在Visual Studio 2013里打开&lt;code&gt;opengl-series.sln&lt;/code&gt;，选择相应工程。&lt;/p&gt;
&lt;p&gt;工程里已包含所有依赖，所以你不需要再安装或者配置额外的东西。如果有任何编译或运行上的问题，请联系我。&lt;/p&gt;
&lt;h2 id=&quot;关于兼容性的提醒&quot;&gt;&lt;a href=&quot;#关于兼容性的提醒&quot; class=&quot;headerlink&quot; title=&quot;关于兼容性的提醒&quot;&gt;&lt;/a&gt;关于兼容性的提醒&lt;/h2&gt;&lt;p&gt;本文使用OpenGL 3.2，但我会尝试保持如下兼容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向后兼容OpenGL 2.1&lt;/li&gt;
&lt;li&gt;向前兼容OpenGL 3.X和4.X&lt;/li&gt;
&lt;li&gt;兼容Android和iOS的OpenGL ES 2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为OpenGL和GLSL存在许多不同版本，本文代码不一定能做到100%上述兼容。我希望能兼容99%，并且不同版本之间只要轻微修改即可。&lt;/p&gt;
&lt;p&gt;想要了解OpenGL和GLSL不同版本间的区别，这里很好得罗列了&lt;a href=&quot;http://web.eecs.umich.edu/~sugih/courses/eecs487/common/notes/APITables.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;兼容列表&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Visual-Studio下安装&quot;&gt;&lt;a href=&quot;#Visual-Studio下安装&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio下安装&quot;&gt;&lt;/a&gt;Visual Studio下安装&lt;/h2&gt;&lt;p&gt;代码在Windows 7 32位系统，&lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs#DownloadFamilies_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Express 2013&lt;/a&gt;（免费）下创建和测试。你应该可以打开解决方案并成功编译所有工程。如果有问题请联系我，或者将补丁发我，我会更新工程。&lt;/p&gt;
&lt;h2 id=&quot;Xcode下安装&quot;&gt;&lt;a href=&quot;#Xcode下安装&quot; class=&quot;headerlink&quot; title=&quot;Xcode下安装&quot;&gt;&lt;/a&gt;Xcode下安装&lt;/h2&gt;&lt;p&gt;Xcode工程实在OSX 10.10系统，Xcode 6.1下创建并测试的。打开Xcode工程应该可以成功编译所有目标。加入你无法成功编译请联系我。&lt;/p&gt;
&lt;h2 id=&quot;Linux下安装&quot;&gt;&lt;a href=&quot;#Linux下安装&quot; class=&quot;headerlink&quot; title=&quot;Linux下安装&quot;&gt;&lt;/a&gt;Linux下安装&lt;/h2&gt;&lt;p&gt;Linux是基于&lt;a href=&quot;http://www.reddit.com/user/SpartanJ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SpartanJ&lt;/a&gt;。我在Ubuntu 12.04下简单测试通过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装GLM，GLFW和GLEW：&lt;br&gt;  &lt;code&gt;sudo aptitude install libglm-dev libglew-dev libglfw-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入工程目录：&lt;code&gt;cd platforms/linux/01_project_skeleto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行makefile：&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行可执行文件：&lt;code&gt;bin/01_project_skeleton-debug&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;GLEW-GLFW和GLM介绍&quot;&gt;&lt;a href=&quot;#GLEW-GLFW和GLM介绍&quot; class=&quot;headerlink&quot; title=&quot;GLEW, GLFW和GLM介绍&quot;&gt;&lt;/a&gt;GLEW, GLFW和GLM介绍&lt;/h2&gt;&lt;p&gt;现在你有了工程，就让我们开始介绍下工程所用到的开源库和为啥需要这些。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://glew.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The OpenGL Extension Wrangler (GLEW)&lt;/a&gt;是用来访问OpenGL 3.2 API函数的。不幸的是你不能简单的使用&lt;code&gt;#include &amp;lt;GL/gl.h&amp;gt;&lt;/code&gt;来访问OpenGL接口，除非你想用旧版本的OpenGL。在现代OpenGL中，API函数是在运行时（run time）确定的，而非编译期（compile time）。GLEW可以在运行时加载OpenGL API。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.glfw.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLFW&lt;/a&gt;允许我们跨平台创建窗口，接受鼠标键盘消息。OpenGL不处理这些窗口创建和输入，所以就需要我们自己动手。我选择GLFW是因为它很小，并且容易理解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://glm.g-truc.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL Mathematics (GLM)&lt;/a&gt;是一个数学库，用来处理矢量和矩阵等几乎其它所有东西。旧版本OpenGL提供了类似&lt;code&gt;glRotate&lt;/code&gt;, &lt;code&gt;glTranslate&lt;/code&gt;和&lt;code&gt;glScale&lt;/code&gt;等函数，在现代OpenGL中，这些函数已经不存在了，我们需要自己处理所有的数学运算。GLM能在后续教程里提供很多矢量和矩阵运算上帮助。&lt;/p&gt;
&lt;p&gt;在这系列的所有教程中，我们还编写了一个小型库&lt;code&gt;tdogl&lt;/code&gt;用来重用C++代码。这篇教程会包含&lt;code&gt;tdogl::Shader&lt;/code&gt;和&lt;code&gt;tdogl::Program&lt;/code&gt;用来加载，编译和链接shaders。&lt;/p&gt;
&lt;h2 id=&quot;什么是Shaders？&quot;&gt;&lt;a href=&quot;#什么是Shaders？&quot; class=&quot;headerlink&quot; title=&quot;什么是Shaders？&quot;&gt;&lt;/a&gt;什么是Shaders？&lt;/h2&gt;&lt;p&gt;Shaders在现代OpenGL中是个很重要的概念。应用程序离不开它，除非你理解了，否则这些代码也没有任何意义。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;Shaders是一段GLSL小程序，运行在&lt;strong&gt;GPU&lt;/strong&gt;上而非CPU&lt;/mark&gt;。它们使用&lt;a href=&quot;http://en.wikipedia.org/wiki/GLSL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL Shading Language (GLSL)&lt;/a&gt;语言编写，看上去像C或C++，但却是另外一种不同的语言。使用shader就像你写个普通程序一样：写代码，编译，最后链接在一起才生成最终的程序。&lt;/p&gt;
&lt;p&gt;Shaders并不是个很好的名字，因为它不仅仅只做着色。只要记得它们是个用不同的语言写的，运行在显卡上的小程序就行。&lt;/p&gt;
&lt;p&gt;在旧版本的OpenGL中，shaders是可选的。在现代OpenGL中，为了能在屏幕上显示出物体，shaders是必须的。&lt;/p&gt;
&lt;p&gt;为可能近距离了解shaders和图形渲染管线，我推荐Durian Software的相关文章&lt;a href=&quot;http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Chapter-1:-The-Graphics-Pipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Graphics Pipeline chapter&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;主程序&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Shader程序&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;语言&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;C++&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;GLSL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;主函数&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;int main(int, char**);&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void main();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行于&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CPU&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;GPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;需要编译？&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;需要链接？&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;那shaders实际上干了啥？这取决于是哪种shader。&lt;/p&gt;
&lt;h2 id=&quot;Vertex-Shaders&quot;&gt;&lt;a href=&quot;#Vertex-Shaders&quot; class=&quot;headerlink&quot; title=&quot;Vertex Shaders&quot;&gt;&lt;/a&gt;Vertex Shaders&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;Vertex shader主要用来将点（x，y，z坐标）变换成不同的点。&lt;/mark&gt;顶点只是几何形状中的一个点，一个点叫vectex，多个点叫vertices（发音为&lt;a href=&quot;http://static.sfdict.com/dictstatic/dictionary/audio/luna/V00/V0096700.mp3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ver-tuh-seez&lt;/a&gt;）。在本教程中，我们的三角形需要三个顶点（vertices）组成。&lt;/p&gt;
&lt;p&gt;Vertex Shader的GLSL代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; vec3 vert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // does &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; alter the vertices at all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = vec4(vert, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行&lt;code&gt;#version 150&lt;/code&gt;告诉OpenGL这个shader使用GLSL版本1.50.&lt;/p&gt;
&lt;p&gt;第二行&lt;code&gt;in vec3 vert;&lt;/code&gt;告诉shader需要那一个顶点作为输入，放入变量&lt;code&gt;vert&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第三行定义函数&lt;code&gt;main&lt;/code&gt;，这是shader运行入口。这看上去像C，但GLSL中&lt;code&gt;main&lt;/code&gt;不需要带任何参数，并且不用返回void。&lt;/p&gt;
&lt;p&gt;第四行&lt;code&gt;gl_Position = vec4(vert, 1);&lt;/code&gt;将输入的顶点直接输出，变量&lt;code&gt;gl_Position&lt;/code&gt;是OpenGL定义的全局变量，用来存储vertex shader的输出。所有vertex shaders都需要对&lt;code&gt;gl_Position&lt;/code&gt;进行赋值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gl_Position&lt;/code&gt;是4D坐标（vec4），但&lt;code&gt;vert&lt;/code&gt;是3D坐标（vec3），所以我们需要将&lt;code&gt;vert&lt;/code&gt;转换为4D坐标&lt;code&gt;vec4(vert, 1)&lt;/code&gt;。第二个的参数&lt;code&gt;1&lt;/code&gt;是赋值给第四维坐标。我们会在后续教程中学到更多关于4D坐标的东西。但现在，我们只要知道第四维坐标是&lt;code&gt;1&lt;/code&gt;即可，i可以忽略它就把它当做3D坐标来对待。&lt;/p&gt;
&lt;p&gt;Vertex Shader在本文中没有做任何事，后续我们会修改它来处理动画，摄像机和其它东西。&lt;/p&gt;
&lt;h2 id=&quot;Fragment-Shaders&quot;&gt;&lt;a href=&quot;#Fragment-Shaders&quot; class=&quot;headerlink&quot; title=&quot;Fragment Shaders&quot;&gt;&lt;/a&gt;Fragment Shaders&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;Fragment shader的主要功能是计算每个需要绘制的像素点的颜色。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;一个”fragment”基本上就是一个像素，所以你可以认为片段着色器（fragment shader）就是像素着色器（pixel shader）。在本文中每个片段都是一像素，但这并不总是这样的。你可以更改某个OpenGL设置，以便得到比像素更小的片段，之后的文章我们会讲到这个。&lt;/p&gt;
&lt;p&gt;本文所使用的fragment shader代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#version 150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out vec4 finalColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //set every drawn pixel to white&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finalColor = vec4(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次，第一行&lt;code&gt;#version 150&lt;/code&gt;告诉OpenGL这个shader使用的是GLSL 1.50。&lt;/p&gt;
&lt;p&gt;第二行&lt;code&gt;finalColor = vec4(1.0, 1.0, 1.0, 1.0);&lt;/code&gt;将输出变量设为白色。&lt;code&gt;vec4(1.0, 1.0, 1.0, 1.0)&lt;/code&gt;是创建一个RGBA颜色，并且红绿蓝和alpha都设为最大值，即白色。&lt;/p&gt;
&lt;p&gt;现在，就能用shader在OpenGL中绘制出了纯白色。在之后的文章中，我们还会加入不同颜色和贴图。贴图就是你3D模型上的图像。&lt;/p&gt;
&lt;h2 id=&quot;编译和链接Shaders&quot;&gt;&lt;a href=&quot;#编译和链接Shaders&quot; class=&quot;headerlink&quot; title=&quot;编译和链接Shaders&quot;&gt;&lt;/a&gt;编译和链接Shaders&lt;/h2&gt;&lt;p&gt;在C++中，你需要对你的&lt;code&gt;.cpp&lt;/code&gt;文件进行编译，然后链接到一起组成最终的程序。OpenGL的shaders也是这么回事。&lt;/p&gt;
&lt;p&gt;在这篇文章中用到了两个可复用的类，是用来处理shaders的编译和链接：&lt;code&gt;tdogl::Shader&lt;/code&gt;和&lt;code&gt;tdogl::Program&lt;/code&gt;。这两个类代码不多，并且有详细的注释，我建议你阅读源码并且去链接OpenGL是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;什么是VBO和VAO？&quot;&gt;&lt;a href=&quot;#什么是VBO和VAO？&quot; class=&quot;headerlink&quot; title=&quot;什么是VBO和VAO？&quot;&gt;&lt;/a&gt;什么是VBO和VAO？&lt;/h2&gt;&lt;p&gt;当shaders运行在GPU，其它代码运行在CPU时，你需要有种方式将数据从CPU传给GPU。在本文中，我们传送了一个三角的三个顶点数据，但在更大的工程中3D模型会有成千上万个顶点，颜色，贴图坐标和其它东西。&lt;/p&gt;
&lt;p&gt;这就是我们为什么需要Vertex Buffer Objects (VBOs)和Vertex Array Objects (VAOs)。&lt;mark&gt;VBO和VAO用来将C++程序的数据传给shaders来渲染。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;在旧版本的OpenGL中，是通过&lt;code&gt;glVertex&lt;/code&gt;，&lt;code&gt;glTexCoord&lt;/code&gt;和&lt;code&gt;glNormal&lt;/code&gt;函数把每帧数据发送给GPU的。在现代OpenGL中，所有数据必须通过VBO在渲染之前发送给显卡。当你需要渲染某些数据时，通过设置VAO来描述该获取哪些VBO数据推送给shader变量。&lt;/p&gt;
&lt;h2 id=&quot;Vertex-Buffer-Objects-VBOs&quot;&gt;&lt;a href=&quot;#Vertex-Buffer-Objects-VBOs&quot; class=&quot;headerlink&quot; title=&quot;Vertex Buffer Objects (VBOs)&quot;&gt;&lt;/a&gt;Vertex Buffer Objects (VBOs)&lt;/h2&gt;&lt;p&gt;第一步我们需要从内存里上传三角形的三个顶点到显存中。这就是VBO该干的事。&lt;mark&gt;VBO其实就是显存的“缓冲区（buffers）” - 一串包含各种二进制数据的字节区域。&lt;/mark&gt;你能上传3D坐标，颜色，甚至是你喜欢的音乐和诗歌。VBO不关心这些数据是啥，因为它只是对内存进行复制。&lt;/p&gt;
&lt;h2 id=&quot;Vertex-Array-Objects-VAOs&quot;&gt;&lt;a href=&quot;#Vertex-Array-Objects-VAOs&quot; class=&quot;headerlink&quot; title=&quot;Vertex Array Objects (VAOs)&quot;&gt;&lt;/a&gt;Vertex Array Objects (VAOs)&lt;/h2&gt;&lt;p&gt;第二步我们要用VBO的数据在shaders中渲染三角形。请记住VBO只是一块数据，它不清楚这些数据的类型。而告诉OpenGL这缓冲区里是啥类型数据，这事就归VAO管。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;VAO对VBO和shader变量进行了连接。它描述了VBO所包含的数据类型，还有该传递数据给哪个shader变量。&lt;/mark&gt;在OpenGL所有不准确的技术名词中，“Vertex Array Object”是最烂的一个，因为它根本没有解释VAO该干的事。&lt;/p&gt;
&lt;p&gt;你回头看下本文的vertex shader（在文章的前面），你就能发现我们只有一个输入变量&lt;code&gt;vert&lt;/code&gt;。在本文中，我们用VAO来说明“hi，OpenGL，这里的VBO有3D顶点，我想要你在vertex shader时，发三个顶点数据给vert变量。”&lt;/p&gt;
&lt;p&gt;在后续的文章中，我们会用VAO来说“hi，OpenGL，这里的VBO有3D顶点，颜色，贴图坐标，我想要你在shader时，发顶点数据给vert变量，发颜色数据给vertColor变量，发贴图坐标给vertTexCoord变量。”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给使用上个OpenGL版本的用户的提醒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如你在旧版本的OpenGL中使用了VBO但没有用到VAO，你可能会不认同VAO的描述。你会争论说“顶点属性”可以用&lt;code&gt;glVertexAttribPointer&lt;/code&gt;将VBO和shaders连接起来，而不是用VAO。这取决于你是否认为顶点属性应该是VAO“内置（inside）”的（我是这么认为的），或者说它们是否是VAO外置的一个全局状态。3.2内核和我用的AIT驱动中，VAO不是可选项 - 没有VAO的封装&lt;code&gt;glEnableVertexAttribArray&lt;/code&gt;, &lt;code&gt;glVertexAttribPointer&lt;/code&gt;和&lt;code&gt;glDrawArrays&lt;/code&gt;都会导致&lt;code&gt;GL_INVALID_OPERATION&lt;/code&gt;错误。这就是为啥我认为顶点属性应该内置于VAO，而非全局状态的原因。&lt;a href=&quot;http://www.opengl.org/registry/doc/glspec32.core.20091207.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3.2内核手册&lt;/a&gt;也说VAO是必须的，但我只听说ATI驱动会抛错误。下面描述引用自&lt;a href=&quot;http://www.opengl.org/registry/doc/glspec32.core.20091207.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL 3.2内核手册&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有与顶点处理有关的数据定义都应该封装在VAO里。&lt;br&gt;一般VAO边界包含所有更改vertex array状态的命令，比如VertexAttribPointer和EnableVertexAttribArray；所有使用vertex array进行绘制的命令，比如DrawArrays和DrawElements；所有对vertex array状态进行查询的命令（见第6章）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不管怎样，我也知道为啥会有人认为顶点属性应该放在VAO外部。&lt;code&gt;glVertexAttribPointer&lt;/code&gt;出现早于VAO，在这段时间里顶点属性一直被认为是全局状态。你应该能看得出VAO是一种改变全局状态的有效方法。我更倾向于认为是这样：假如你没有创建VAO，那OpenGL通过了一个默认的全局VAO。所以当你使用&lt;code&gt;glVertexAttribPointer&lt;/code&gt;时，你仍然是在VAO内修改顶点属性，只不过现在从默认的VAO变成你自己创建的VAO。&lt;/p&gt;
&lt;p&gt;这里有更多的讨论：&lt;a href=&quot;http://www.opengl.org/discussion_boards/showthread.php/174577-Questions-on-VAOs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opengl.org/discussion_boards/showthread.php/174577-Questions-on-VAOs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码解释&quot;&gt;&lt;a href=&quot;#代码解释&quot; class=&quot;headerlink&quot; title=&quot;代码解释&quot;&gt;&lt;/a&gt;代码解释&lt;/h2&gt;&lt;p&gt;终于！理论已经说完了，我们开始编码。OpenGL对于初学者而言不是特别友好，但如果你理解了之前所介绍的概念（shaders，VBO，VAO）那你就没啥问题。&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;main.cpp&lt;/code&gt;，我们从&lt;code&gt;main()&lt;/code&gt;函数开始。&lt;/p&gt;
&lt;p&gt;首先，我们初始化GLFW：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwSetErrorCallback(OnError);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!glfwInit())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    throw &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error(&lt;span class=&quot;string&quot;&gt;&quot;glfwInit failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glfwSetErrorCallback(OnError)&lt;/code&gt;这一行告诉GLFW当错误发生时调用&lt;code&gt;OnError&lt;/code&gt;函数。&lt;code&gt;OnError&lt;/code&gt;函数会抛一个包含错误信息的异常，我们能从中发现哪里出错了。&lt;/p&gt;
&lt;p&gt;然后我们用GLFW创建一个窗口。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gWindow = glfwCreateWindow((int)SCREEN_SIZE.x, (int)SCREEN_SIZE.y, &lt;span class=&quot;string&quot;&gt;&quot;OpenGL Tutorial&quot;&lt;/span&gt;, NULL, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!gWindow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    throw &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error(&lt;span class=&quot;string&quot;&gt;&quot;glfwCreateWindow failed. Can your hardware handle OpenGL 3.2?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该窗口包含一个向前兼容的OpenGL 3.2内核上下文。假如&lt;code&gt;glfwCreateWindow&lt;/code&gt;失败了，你应该降低OpenGL版本。&lt;/p&gt;
&lt;p&gt;创建窗口最后一步，我们应该设置一个“当前”OpenGL上下文给刚创建的窗口：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwMakeContextCurrent(gWindow);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论我们调用哪个OpenGL函数，都会影响到“当前上下文”。我们只会用到一个上下文，所以设置完后，就别管它了。理论上来说，我们可以有多个窗口，且每个窗口都可以有自己的上下文。&lt;/p&gt;
&lt;p&gt;现在我们窗口有了OpenGL上下文变量，我们需要初始化GLEW以便访问OpenGL接口。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glewExperimental = GL_TRUE; &lt;span class=&quot;comment&quot;&gt;//stops glew crashing on OSX :-/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(glewInit() != GLEW_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    throw &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error(&lt;span class=&quot;string&quot;&gt;&quot;glewInit failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的GLEW与OpenGL内核有点小问题，设置&lt;code&gt;glewExperimental&lt;/code&gt;就可以修复，但希望再未来永远不要发生。&lt;/p&gt;
&lt;p&gt;我们也可以用GLEW再次确认3.2版本是否存在：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!GLEW_VERSION_3_2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    throw &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error(&lt;span class=&quot;string&quot;&gt;&quot;OpenGL 3.2 API is not available.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;LoadShaders&lt;/code&gt;函数中，我们使用本教程提供的&lt;code&gt;tdogl::Shader&lt;/code&gt;和&lt;code&gt;tdogl::Program&lt;/code&gt;两个类编译和链接了vertex shader和fragment shader。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;tdogl::Shader&amp;gt; shaders;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shaders.push_back(tdogl::Shader::shaderFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;vertex-shader.txt&quot;&lt;/span&gt;), GL_VERTEX_SHADER));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shaders.push_back(tdogl::Shader::shaderFromFile(ResourcePath(&lt;span class=&quot;string&quot;&gt;&quot;fragment-shader.txt&quot;&lt;/span&gt;), GL_FRAGMENT_SHADER));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gProgram = new tdogl::Program(shaders);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;LoadTriangle&lt;/code&gt;函数中，我们创建了一个VAO和VBO。这是第一步，创建和绑定新的VAO：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glGenVertexArrays(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;gVAO);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindVertexArray(gVAO);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们创建和绑定新的VBO：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glGenBuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;gVBO);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindBuffer(GL_ARRAY_BUFFER, gVBO);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着，我们上传一些数据到VBO中。这些数据就是三个顶点，每个顶点包含三个&lt;code&gt;GLfloat&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLfloat vertexData[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  X     Y     Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;0.8f&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-0.8&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBufferData(GL_ARRAY_BUFFER, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(vertexData), vertexData, GL_STATIC_DRAW);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在缓冲区包含了三角形的三个顶点，是时候开始设置VAO了。首先，我们应该启用shader程序中的&lt;code&gt;vert&lt;/code&gt;变量。这些变量能被开启或关闭，默认情况下是关闭的，所以我们需要开启它。&lt;code&gt;vert&lt;/code&gt;变量是一个“属性变量（attribute variable）”，这也是为何OpenGL函数名称中有带“Attrib”。我们可以在后续的文章中看到更多类型。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;VAO设置最复杂的部分就是下个函数：&lt;code&gt;glVertexAttribPointer&lt;/code&gt;。让我们先调用该函数，等会解释。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glVertexAttribPointer(gProgram-&amp;gt;attrib(&lt;span class=&quot;string&quot;&gt;&quot;vert&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, GL_FLOAT, GL_FALSE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数，&lt;code&gt;gProgram-&amp;gt;attrib(&amp;quot;vert&amp;quot;)&lt;/code&gt;，这就是那个需要上传数据的shder变量。在这个例子中，我们需要发数据给&lt;code&gt;vert&lt;/code&gt;shader变量。&lt;/p&gt;
&lt;p&gt;第二个参数，&lt;code&gt;3&lt;/code&gt;表明每个顶点需要三个数字。&lt;/p&gt;
&lt;p&gt;第三个参数，&lt;code&gt;GL_FLOAT&lt;/code&gt;说明三个数字是&lt;code&gt;GLfloat&lt;/code&gt;类型。这非常重要，因为&lt;code&gt;GLdouble&lt;/code&gt;类型的数据大小跟它是不同的。&lt;/p&gt;
&lt;p&gt;第四个参数，&lt;code&gt;GL_FALSE&lt;/code&gt;说明我们不需要对浮点数进行“归一化”，假如我们使用了归一化，那这个值会被限定为最小0，最大1。我们不需要对我们的顶点进行限制，所以这个参数为false。&lt;/p&gt;
&lt;p&gt;第五个参数，&lt;code&gt;0&lt;/code&gt;，该参数可以在顶点之间有间隔时使用，设置参数为0，表示数据之间没有间隔。&lt;/p&gt;
&lt;p&gt;第六个参数，&lt;code&gt;NULL&lt;/code&gt;，假如我们的数据不是从缓冲区头部开始的话，可以设置这个参数来指定。设置该参数为NULL，表示我们的数据从VBO的第一个字节开始。&lt;/p&gt;
&lt;p&gt;现在VBO和VAO都设置完成，我们需要对它们进行解绑定，防止一不小心被哪里给更改了。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glBindBuffer(GL_ARRAY_BUFFER, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindVertexArray(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此，shader，VBO和VAO都准备好了。我们可以开始在&lt;code&gt;Render&lt;/code&gt;函数里绘制了。&lt;/p&gt;
&lt;p&gt;首先，我们先清空下屏幕，让它变成纯黑色：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glClearColor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// black&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后告诉OpenGL我们要开始使用VAO和shader了：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glUseProgram(gProgram-&amp;gt;object());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindVertexArray(gVAO);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们绘制出三角形：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glDrawArrays(GL_TRIANGLES, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用&lt;code&gt;glDrawArrays&lt;/code&gt;函数说明我们需要绘制三角形，从第0个顶点开始，有3个顶点被发送到shader。OpenGL会在当前VAO范围内确定该从哪里获取顶点。&lt;/p&gt;
&lt;p&gt;顶点将会从VBO中取出并发送到vertex shader。然后三角形内的每个像素会发送给fragment shader。接着fragment shader将每个像素变成白色。欢呼！&lt;/p&gt;
&lt;p&gt;现在绘制结束了，为了安全起见，我们需要将shader和VAO进行解绑定：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glBindVertexArray(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glUseProgram(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一件事，在我们看到三角形之前需要切换帧缓冲：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwSwapBuffers(gWindow);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在帧缓冲被交换前，我们会绘制到一个不可见的离屏（off-screen）帧缓冲区。当我们调用&lt;code&gt;glfwSwapBuffers&lt;/code&gt;时，离屏缓冲会变成屏幕缓冲，所以我们就能在窗口上看见内容了。&lt;/p&gt;
&lt;h2 id=&quot;进一步阅读&quot;&gt;&lt;a href=&quot;#进一步阅读&quot; class=&quot;headerlink&quot; title=&quot;进一步阅读&quot;&gt;&lt;/a&gt;进一步阅读&lt;/h2&gt;&lt;p&gt;在后续文章中，我们会对三角形进行贴图。之后，你会学到一点矩阵变换知识，就可以使用vertex shader来实现3D立方体旋转。&lt;/p&gt;
&lt;p&gt;在这之后，我们开始创建3D场景并提交多个物体。&lt;/p&gt;
&lt;h2 id=&quot;更多现代OpenGL资料&quot;&gt;&lt;a href=&quot;#更多现代OpenGL资料&quot; class=&quot;headerlink&quot; title=&quot;更多现代OpenGL资料&quot;&gt;&lt;/a&gt;更多现代OpenGL资料&lt;/h2&gt;&lt;p&gt;不幸的是，我不得不跳过很多内容，防止本教程的篇幅过长。后面还有很多好的现代OpenGL资料能满足你的求知欲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Table-of-Contents.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An intro to modern OpenGL&lt;/a&gt; by Joe Groff of Durian Software&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arcsynthesis.org/gltut/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learning Modern 3D Graphics Programming&lt;/a&gt; by Jason L. McKesson&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/progschj/OpenGL-Examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A collection of simple single file OpenGL examples&lt;/a&gt; by Jakob Progsch&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ogldev.atspace.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL Step by Step&lt;/a&gt; by Etay Meiri&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db-in.com/blog/2011/01/all-about-opengl-es-2-x-part-13/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;All about OpenGL ES 2.x&lt;/a&gt; by Diney Bomfim&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikibooks.org/wiki/OpenGL_Programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The OpenGL Progamming book on Wikibooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opengl.org/wiki/Tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorials on the OpenGL wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swiftless.com/tutorials/opengl4/1-opengl-window.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL 4 tutorials&lt;/a&gt; by Donald Urquhart (Swiftless)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://open.gl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;open.gl&lt;/a&gt; by Alexander Overvoorde&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openglbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGLBook.com&lt;/a&gt; by Eddy Luten&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opengl.org/sdk/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The official OpenGL SDK documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.eecs.umich.edu/~sugih/courses/eecs487/common/notes/APITables.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Compatibility tables for OpenGL, OpenGL ES, GLSL, and GLSL ES&lt;/a&gt; by Sugih Jamin&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      现代OpenGL在Xcode，Visual C++和Linux下的入门指南
    
    </summary>
    
      <category term="modern-opengl-tutorials" scheme="http://huangwei.pro/categories/modern-opengl-tutorials/"/>
    
    
      <category term="opengl" scheme="http://huangwei.pro/tags/opengl/"/>
    
      <category term="tutorials" scheme="http://huangwei.pro/tags/tutorials/"/>
    
  </entry>
  
  <entry>
    <title>游戏中的 2D 可见性</title>
    <link href="http://huangwei.pro/2015-04/game-visiablity/"/>
    <id>http://huangwei.pro/2015-04/game-visiablity/</id>
    <published>2015-04-27T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.561Z</updated>
    
    <content type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/2dvisibilitydemo/jquery-ui-1.8.19.custom.css&quot;&gt;

&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/86268/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2D的俯视图经常用于从给定点计算可视区域。例如，你可能想把某些东西隐藏在玩家看不见的地方，亦或你想知道点燃火炬后能看见什么地方。&lt;/p&gt;
&lt;p&gt;拖动圆点转一圈，看看玩家都能看到些什么：&lt;/p&gt;
&lt;div id=&quot;maze&quot;&gt;&lt;img class=&quot;placeholder&quot; src=&quot;/static/2dvisibilitydemo/static-lightmap.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;这个算法也能计算出给定光源所照亮的区域。对每条光线，我们可以构建出被照亮区域的光线图。如果我们给上面的迷宫放上24个灯呢？见光线图。&lt;/p&gt;
&lt;p&gt;roguelike&lt;span style=&quot;color: #888888;&quot;&gt;（译注：类地下城RPG游戏统称）&lt;/span&gt;社区已经收集了&lt;a href=&quot;http://roguebasin.roguelikedevelopment.org/index.php/Category:FOV&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好几种算法&lt;/a&gt;，尤其是网格类的。消减算法是从可见的一切区域开始，减去不可见区域；添加算法是从不可见区域开始，加上可见区域。我将描述一种可工作于线段的添加算法，不仅仅是固体分块或者网格。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;光线投射&quot;&gt;&lt;a href=&quot;#光线投射&quot; class=&quot;headerlink&quot; title=&quot;光线投射&quot;&gt;&lt;/a&gt;光线投射&lt;/h2&gt;&lt;p&gt;一个简单地方法是从中心点投射光线，这是得到一个近似解的合理的第一步：&lt;/p&gt;
&lt;div id=&quot;diagram-raycast-interval&quot; class=&quot;right&quot;&gt;&lt;/div&gt;

&lt;p&gt;更聪明的是，让光线投射到所有墙体的开端和末端。这些光线所产生的三角形就是可见区域：&lt;/p&gt;
&lt;div id=&quot;diagram-raycast-endpoints&quot; class=&quot;right&quot;&gt;&lt;/div&gt;

&lt;p&gt;就是这样！该算法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算到墙体开始或结束的角度。&lt;/li&gt;
&lt;li&gt;从中心点沿各个角度投出光线。&lt;/li&gt;
&lt;li&gt;对这些光线所产生的三角形进行填充。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;墙体跟踪&quot;&gt;&lt;a href=&quot;#墙体跟踪&quot; class=&quot;headerlink&quot; title=&quot;墙体跟踪&quot;&gt;&lt;/a&gt;墙体跟踪&lt;/h2&gt;&lt;p&gt;我们可以到此为止了，尤其是如果我们有一个快速光线投射算法，可使用空间哈希以避免与每一个墙体进行相交计算。然而，更有效的方法是将光线投射和墙体相交结合成一个算法。我将在这里描述了一种圆形扫描算法，对所有的击中点按角度进行排序; 它也可以扩展成圆形外扩算法，对所有的击中点按半径排序，但我还没有尝试过这种方法。&lt;/p&gt;
&lt;p&gt;位于连续几个射线之间的区域，我们需要找到最近的墙。这面墙就被照亮了; 所有其他墙面应该被隐藏。我们的策略是360°扫描，处理所有的墙端点。当运行时，我们会持续跟踪与扫描线相交的墙壁。点击观看端点扫描：&lt;/p&gt;
&lt;div class=&quot;right&quot;&gt;&lt;div id=&quot;diagram-sweep-points&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下一步骤是将跟踪哪些墙壁会被扫描线穿过。只有最近的壁是可见的。你如何找出哪些墙壁是最近的？最简单的方法是计算从中心到墙的距离。然而，如果墙壁大小不同，这种方法不能很好地工作，所以演示中使用一个稍微复杂的方法，这里我就不解释了。&lt;/p&gt;
&lt;p&gt;按PLAY可看到扫描中最近的墙面以白色绘制和其他墙面绘成黑色。&lt;/p&gt;
&lt;div class=&quot;right&quot;&gt;&lt;div id=&quot;diagram-sweep-segments&quot;&gt;&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;每当最近的墙面终止，或者有新的墙面比其它的都近时，我们创建了一个三角形表示可见区域。这些三角形的并集就是所述中心点的可视区域。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var endpoints;      &lt;span class=&quot;comment&quot;&gt;# 端点列表，按角度排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var open = [];      &lt;span class=&quot;comment&quot;&gt;# 墙面列表，按距离排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop over endpoints: &lt;span class=&quot;comment&quot;&gt;#遍历 endpoints&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remember which wall &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; nearest &lt;span class=&quot;comment&quot;&gt;#记住哪个墙面最近&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    add any walls that BEGIN at this endpoint to &lt;span class=&quot;string&quot;&gt;&#39;walls&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 把所有以该端点开始的墙面添加到“墙面列表“中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remove any walls that END at this endpoint &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;walls&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# 把所有以该端点截止的墙面从“墙面列表“中删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SORT the open list &lt;span class=&quot;comment&quot;&gt;#对open数组排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; the nearest wall changed: &lt;span class=&quot;comment&quot;&gt;#假如最近的墙面改变:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fill the current triangle &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; begin a new one&lt;span class=&quot;comment&quot;&gt;#填充当前三角形并且开始新的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是创建一个三角形涉及到之前与扫描线相交的墙面。其结果是，三角形的新边缘可能长于或短于扫描线，并且该三角形最远的边缘比之前的墙面短。&lt;/p&gt;
&lt;h2 id=&quot;试验场&quot;&gt;&lt;a href=&quot;#试验场&quot; class=&quot;headerlink&quot; title=&quot;试验场&quot;&gt;&lt;/a&gt;试验场&lt;/h2&gt;&lt;p&gt;这里有一块试验场，有很多可用的方块。可以拖拽方块到网格内。点击play/pause按钮可以查看算法运行，或者移动中心点查看哪些是可见的，就像玩家四处查看一样。&lt;/p&gt;
&lt;div class=&quot;right&quot;&gt;&lt;div id=&quot;diagram-playground&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div id=&quot;haxe:trace&quot;&gt;&lt;/div&gt;



&lt;h2 id=&quot;组合输出&quot;&gt;&lt;a href=&quot;#组合输出&quot; class=&quot;headerlink&quot; title=&quot;组合输出&quot;&gt;&lt;/a&gt;组合输出&lt;/h2&gt;&lt;p&gt;我们可以使用集合运算以有趣的方式组合该算法的输出。这些也可被实现为用布尔运算分析输出，或者用位图操作渲染输出。&lt;/p&gt;
&lt;h3 id=&quot;玩家视野&quot;&gt;&lt;a href=&quot;#玩家视野&quot; class=&quot;headerlink&quot; title=&quot;玩家视野&quot;&gt;&lt;/a&gt;玩家视野&lt;/h3&gt;&lt;p&gt;限制玩家的视野最简单的操作是将输出与有限的视野求交集。例如，相交算法使用圆圈来限制可见半径。与渐变填充圈相交，可使光按距离改变明暗。与圆锥相交可打造出“手电筒”效果，可以让你把前面看得更远，但没有相应视野在你身后（见随后&lt;a href=&quot;http://www.tuaw.com/2012/04/16/phil-hasseys-anathema-mines-renamed-dynamite-jack-gets-a-trail/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dynamite Jack&lt;/a&gt;的一个例子）。假如用双眼代替单点，玩家的视野也更好看。我希望你可以合并所有眼睛的可视区域，但我还没有试过。&lt;/p&gt;
&lt;h3 id=&quot;地图物体&quot;&gt;&lt;a href=&quot;#地图物体&quot; class=&quot;headerlink&quot; title=&quot;地图物体&quot;&gt;&lt;/a&gt;地图物体&lt;/h3&gt;&lt;p&gt;可见性也可用于计算哪些区域被火炬点亮。在页面的顶部演示了首先对每个火炬所点亮的区域进行求并集，然后与玩家可以看见的区域相交。（请注意，此算法会产生硬阴影，你将不得不对输出进行后处理来获得软阴影。）&lt;/p&gt;
&lt;p&gt;同样的计算可用于确定哪些地区可被安全摄像头可以看到，有哪些被盾牌保护着，或者是否足够靠近某些魔法设施，使它赋予你属性加成或是诅咒。&lt;/p&gt;
&lt;h3 id=&quot;AI行为&quot;&gt;&lt;a href=&quot;#AI行为&quot; class=&quot;headerlink&quot; title=&quot;AI行为&quot;&gt;&lt;/a&gt;AI行为&lt;/h3&gt;&lt;p&gt;可见性也可用于构建AI行为。例如，假设敌人的AI是想扔了一枚手榴弹击中玩家，也想站在玩家射击不到的地方。手榴弹需要足够近才能击中玩家，并且无法击中障碍物后面的。下图显示标注了AI单位的地图的可能计算：&lt;/p&gt;
&lt;div class=&quot;right&quot;&gt;&lt;div id=&quot;grenade&quot;&gt;&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;手榴弹扔进紫色区域将成功击中一名玩家。黄色和紫色区域是危险区域; 玩家可以从那里攻击AI单位。AI需要站在一个安全的区域（深蓝色）并且投掷了一枚手榴弹到紫色区域，然后寻找掩体。如何计算掩体？在AI准备投掷手雷的地方再次运行可见性算法，让橱柜和桌子挡住视线。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;我已经用&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/Visibility.hx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HAXE 3&lt;/a&gt;来实现这个算法，使用Apache v2开源协议（类似MIT和BSD，它可以在商业项目中使用）。HAXE代码可以编译成JavaScript，ActionScript，C ++，Java，C#或PHP。我把它编译成JavaScript来制作这个网页，并为我的其他项目编译成Flash。我编译成以下语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/as3-version.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Actionscript&lt;/a&gt; ; 可读，因为Actionscript和Haxe并非截然不同&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/output/_visibility.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript&lt;/a&gt;（用于此页面上的演示）; 大多是可读的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/java-version.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt; ; 轻度可读，但不是很好。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/csharp-version.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C#&lt;/a&gt; ; 轻度可读，但不是很好。Roy Triesscheijn有一个更好的版本&lt;a href=&quot;http://roy-t.nl/index.php/2014/02/27/2d-lighting-and-shadows-preview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在这里&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wade Tritschler建议&lt;a href=&quot;http://www.redblobgames.com/articles/visibility/#comment-850486470&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手工移植&lt;/a&gt;，所产生的代码要比使用Haxe输出的代码更干净。我同意这个观点。如果你手写代码还可以更好得了解该算法。尽管该算法主要在CPU中进行，可以使用GPU为位图进行三角形渲染和合并位图输出。（布尔AND操作可变成位图乘法;布尔OR操作可变成位图添加和钳位。）在我的项目中该性能已经足够，所以我还没有构建GPU版本。如果你的游戏有CPU限制，可以考虑使用消减算法（而不是这里显示的添加算法），渲染四边形的每条线段的影子。它会增加GPU渲染负载，但它并不需要在CPU上排序。如果填充率是一个问题，考虑渲染一个比游戏画面分辨率低的光度图，然后扩大它。&lt;/p&gt;
&lt;h2 id=&quot;相关内容&quot;&gt;&lt;a href=&quot;#相关内容&quot; class=&quot;headerlink&quot; title=&quot;相关内容&quot;&gt;&lt;/a&gt;相关内容&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://ncase.me/sight-and-light/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视觉和光线&lt;/a&gt;覆盖了可见性的问题; 在我的&lt;a href=&quot;http://simblob.blogspot.com/2012/07/2d-visibility.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客文章&lt;/a&gt;有更多的链接。&lt;a href=&quot;https://briangordon.github.io/2014/08/the-skyline-problem.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地平线问题&lt;/a&gt;类似2D可见性问题，但它在直角坐标系中，而不是极坐标。另外还有&lt;a href=&quot;http://en.wikipedia.org/wiki/Art_gallery_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;美术馆问题&lt;/a&gt;，关于放置多少个警卫就可以看到地图的每一个区域。我正Trello上创建了一份列表，&lt;a href=&quot;https://trello.com/c/m0yhEv6U/37-visibility-version-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;未来可能更新这个页面&lt;/a&gt;。&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/static/2dvisibilitydemo/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/static/2dvisibilitydemo/jquery-ui-1.8.19.custom.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/static/2dvisibilitydemo/visibility.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/static/2dvisibilitydemo/demo-canvas.js&quot;&gt;&lt;/script&gt;</content>
    
    <summary type="html">
    
      游戏中的 2D 可见性
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="game" scheme="http://huangwei.pro/tags/game/"/>
    
      <category term="2d" scheme="http://huangwei.pro/tags/2d/"/>
    
      <category term="visibility" scheme="http://huangwei.pro/tags/visibility/"/>
    
  </entry>
  
  <entry>
    <title>高效率生活</title>
    <link href="http://huangwei.pro/2015-03/effective-living/"/>
    <id>http://huangwei.pro/2015-03/effective-living/</id>
    <published>2015-03-06T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.560Z</updated>
    
    <content type="html">&lt;h2 id=&quot;时间就是金钱&quot;&gt;&lt;a href=&quot;#时间就是金钱&quot; class=&quot;headerlink&quot; title=&quot;时间就是金钱&quot;&gt;&lt;/a&gt;时间就是金钱&lt;/h2&gt;&lt;p&gt;我们从小被教育到时间就是金钱，但一到生活清闲或者工作很忙的时候，就忘记了时间的存在，等回过神来时，时间已经一溜烟的过去了。&lt;/p&gt;
&lt;p&gt;当我每每躺在床上临睡时，就觉得这一天过的十分罪恶，好像啥事都没干，久而久之就有了睡前强迫综合征。想必很多程序员朋友也深有同感吧。&lt;/p&gt;
&lt;p&gt;为了减轻心理压力，提高工作效率，优化生活质量，我开始寻找各种工具，包括开发的、生活的等等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;互联网&quot;&gt;&lt;a href=&quot;#互联网&quot; class=&quot;headerlink&quot; title=&quot;互联网&quot;&gt;&lt;/a&gt;互联网&lt;/h2&gt;&lt;p&gt;互联网时代谁也离不开网络，尤其在天朝的GFW下，可获取的有用信息少之又少，其次就是卡、慢。&lt;/p&gt;
&lt;h3 id=&quot;VPN&quot;&gt;&lt;a href=&quot;#VPN&quot; class=&quot;headerlink&quot; title=&quot;VPN&quot;&gt;&lt;/a&gt;VPN&lt;/h3&gt;&lt;p&gt;VPN的好处是能翻墙，用google，下载软件包，能上国外的好多网站，个人娱乐也可以看看YouTube之类的。&lt;/p&gt;
&lt;p&gt;网上很多朋友是自己买VPS，然后搭建VPN的。&lt;/p&gt;
&lt;p&gt;我转了圈，发现好的VPS贵，只是为了撘个VPN感觉不值。&lt;/p&gt;
&lt;p&gt;买了个听说便宜口碑好的，发现根本不是那么会事，老是断线连不上，发邮件给客服回答说，机房里好多大陆的网站，都有些敏感信息，所以该机房被墙掉了，导致无辜用户被波及。&lt;/p&gt;
&lt;p&gt;想想还是买现成的VPN服务吧，我使用过&lt;code&gt;MxVPN&lt;/code&gt;和&lt;code&gt;Nydus&lt;/code&gt;。&lt;code&gt;MxVPN&lt;/code&gt;的免费账号每月送的流量还挺多，不过他的线路有各种限制，比如只能开网页的，只能玩网游的等等，外加Win客户端做的很土气，看着不爽。&lt;code&gt;Nydus&lt;/code&gt;的客户端做的好看多了，而且Win和Mac下都有，用着还是可以，偶尔网络断线重新选择下线路即可，不过Mac端连接成功率很低。Mac下&lt;code&gt;鱼摆摆&lt;/code&gt;的口碑不错，不过只限定在Mac环境下，所以我没尝试过。&lt;/p&gt;
&lt;h3 id=&quot;红杏&quot;&gt;&lt;a href=&quot;#红杏&quot; class=&quot;headerlink&quot; title=&quot;红杏&quot;&gt;&lt;/a&gt;红杏&lt;/h3&gt;&lt;p&gt;我用VPN最大的需求还是上网浏览查资料，所以&lt;code&gt;红杏&lt;/code&gt;是我现在一直使用的Chrome插件，在&lt;code&gt;goagent&lt;/code&gt;不稳定的时候，&lt;code&gt;红杏&lt;/code&gt;省了我不少时间。安装配置简单，价格便宜，所以极力推荐，有需要的朋友可以点这个&lt;a href=&quot;http://honx.in/i/VMNeMOz5NC4lQMrc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;，你我都可以得到优惠。&lt;/p&gt;
&lt;h2 id=&quot;信息处理&quot;&gt;&lt;a href=&quot;#信息处理&quot; class=&quot;headerlink&quot; title=&quot;信息处理&quot;&gt;&lt;/a&gt;信息处理&lt;/h2&gt;&lt;p&gt;作为游戏开发者，经常需要关注一些业界消息和技术大牛的blog。&lt;/p&gt;
&lt;p&gt;我用&lt;code&gt;NewsBlur&lt;/code&gt;订阅相应RSS，主要关注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(开源计算机图形学论坛)[&lt;a href=&quot;http://www.opengpu.org/forum.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opengpu.org/forum.php&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(游戏大观)[&lt;a href=&quot;http://www.gamelook.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gamelook.com.cn/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(触乐)[&lt;a href=&quot;http://www.chuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.chuapp.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(虎嗅)[&lt;a href=&quot;http://www.huxiu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.huxiu.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(游戏邦)[&lt;a href=&quot;http://gamerboom.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gamerboom.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(游戏葡萄)[&lt;a href=&quot;http://youxiputao.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://youxiputao.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(游资网)[&lt;a href=&quot;http://www.gameres.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gameres.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(开源中国)[&lt;a href=&quot;http://www.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oschina.net/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(码农周刊)[&lt;a href=&quot;http://weekly.manong.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weekly.manong.io/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(StartupNews)[&lt;a href=&quot;http://news.dbanotes.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://news.dbanotes.net/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(V2EX)[&lt;a href=&quot;http://www.v2ex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.v2ex.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;(GameDev)[&lt;a href=&quot;http://www.gamedev.net/page/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gamedev.net/page/index.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;各大牛人Blog，如云风等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NewsBlur&lt;/code&gt;可以结合iOS上的App&lt;code&gt;Reeder&lt;/code&gt;，体验也是不错，不过由于我的订阅有点多，所以iPhone上看起来有点累。&lt;/p&gt;
&lt;p&gt;每天接触的信息会很多，我用&lt;code&gt;EverNote&lt;/code&gt;的剪藏插件来收集一些觉得有价值的资料。如果是纯文本资料，我喜欢用&lt;code&gt;readability&lt;/code&gt;的插件抓取，阅读效果类似&lt;code&gt;悦读&lt;/code&gt;，但&lt;code&gt;readability&lt;/code&gt;有send to kindle功能，能在&lt;code&gt;kindle&lt;/code&gt;上获得更好的阅读体验，当然&lt;code&gt;kindle&lt;/code&gt;也有iOS端。其实，我很比较喜欢多平台的应用，好处是随时随地都可以进行阅读。&lt;/p&gt;
&lt;p&gt;至于新闻类的，我觉得&lt;code&gt;网易阅读&lt;/code&gt;是做的最好的，没有之一。新闻时效性较强，内容也很丰富。不过为了节约时间，新闻类的要少看，基本过下标题即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;知乎&lt;/code&gt;也是个好地方，问题和回答相对专业，我关注了一些有名的开发者，每天推送过来的内容，都能让我觉得很新奇很好玩。&lt;/p&gt;
&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h2&gt;&lt;p&gt;关于纸质书籍，我已经越来越少在这上面花时间了。但不代表我不买书了（要剁手啊！），尤其是手册等工具类书基本只会偶尔翻翻，教材类书籍也没空长时间阅读（这是个不好的现象，虽然很多问题都能google到，但是按着教程走下来，领会的能更深入）。&lt;/p&gt;
&lt;p&gt;包括买&lt;code&gt;kindle&lt;/code&gt;前，一直大量收集pdf文档，买了之后又开始大量收集电子书，光下不看，我得检讨下~&lt;/p&gt;
&lt;p&gt;导致每次看到书架上一堆书，kindle和电脑上一大堆电子书，我已经觉得这辈子都看不完了，有心无力。&lt;/p&gt;
&lt;p&gt;最近几年我阅读的社科、文化、经管类书籍多于技术类的，看这些书籍就像发现新大陆一样，会有渴求感，看完后回头再看技术类书籍反倒觉得思路更开阔了。写程序应该也是门艺术，艺术的事物与其它很多东西是相通的，所以多读读非技术类书没有坏处。&lt;/p&gt;
&lt;h2 id=&quot;数据同步&quot;&gt;&lt;a href=&quot;#数据同步&quot; class=&quot;headerlink&quot; title=&quot;数据同步&quot;&gt;&lt;/a&gt;数据同步&lt;/h2&gt;&lt;p&gt;很多时候，可移动设备携带也不是那么方便，现如今云存储应用这么普及，个人文档和一些数据文件可以存在云上。我自己现在用的是&lt;code&gt;百度云&lt;/code&gt;，以前用&lt;code&gt;dropbox&lt;/code&gt;不过可惜被墙，而且总不能在所有终端上都安装个VPN吧，所以我选择了国内的服务。用下来其实也还可以，国内有些资源只要在云上进行保存即可，都不用下到本地再上传，节省很多下载时间和流量。&lt;/p&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;h3 id=&quot;GTD&quot;&gt;&lt;a href=&quot;#GTD&quot; class=&quot;headerlink&quot; title=&quot;GTD&quot;&gt;&lt;/a&gt;GTD&lt;/h3&gt;&lt;p&gt;现在市面上的GTD产品挺多的，我使用的Omni序列，比如TODO列表&lt;code&gt;Focus&lt;/code&gt;，大纲&lt;code&gt;Outliner&lt;/code&gt;，进度计划&lt;code&gt;Plan&lt;/code&gt;都是不错的辅助工具，支持Mac和iOS双端，iClound数据同步。&lt;/p&gt;
&lt;p&gt;另外&lt;code&gt;番茄工作法&lt;/code&gt;也是个选择，虽然我觉得25分钟一个番茄，中间被打断就得重新来过这样的一个方式不适合项目开发中的个人事务管理，但它贵在规则简单好执行，用来记录自己的专注度还是可以的。&lt;/p&gt;
&lt;h3 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导图&lt;/h3&gt;&lt;p&gt;虽然iOS和电脑上都有思维导图软件，画出来的图也相当漂亮。但我只是在写doc或者做ppt时才会拿来当画图工具用，真正方便的还是一本本子和一支笔，随时随地记录点滴想法，想画啥就画成啥，根本不用担心图形库里有没你想要的形状。&lt;/p&gt;
&lt;h2 id=&quot;开发工具&quot;&gt;&lt;a href=&quot;#开发工具&quot; class=&quot;headerlink&quot; title=&quot;开发工具&quot;&gt;&lt;/a&gt;开发工具&lt;/h2&gt;&lt;p&gt;进入程序员的专用工具领域。&lt;/p&gt;
&lt;p&gt;我不会Vim和Emacs，虽然曾经很想学，但是每次要记录各种按键和命令，我就觉得还不如之前的方式好用，可能它们属于学习曲线前期陡峭后期平滑的那种。但不管这些，反正我现在用的&lt;code&gt;Sublime Text&lt;/code&gt;，已经觉得足够顺手，插件丰富，可定制化也比较好。&lt;/p&gt;
&lt;p&gt;C++在Win下肯定还是&lt;code&gt;Visual Studio&lt;/code&gt;，Mac下也是毫无疑问的&lt;code&gt;XCode&lt;/code&gt;。不过&lt;code&gt;Visual Studio&lt;/code&gt;下大家都会安装&lt;code&gt;Visual Assitante X&lt;/code&gt;吧？&lt;/p&gt;
&lt;p&gt;Python和Lua之类的脚本，我用的都是&lt;code&gt;Sublime Text&lt;/code&gt;，配置下脚本也能当个IDE来使。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      创业过程中的点点滴滴记录
    
    </summary>
    
      <category term="startup" scheme="http://huangwei.pro/categories/startup/"/>
    
    
      <category term="effective" scheme="http://huangwei.pro/tags/effective/"/>
    
      <category term="summary" scheme="http://huangwei.pro/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>创业小结（一）</title>
    <link href="http://huangwei.pro/2015-01/startup1/"/>
    <id>http://huangwei.pro/2015-01/startup1/</id>
    <published>2015-01-24T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.567Z</updated>
    
    <content type="html">&lt;h2 id=&quot;工作2年&quot;&gt;&lt;a href=&quot;#工作2年&quot; class=&quot;headerlink&quot; title=&quot;工作2年&quot;&gt;&lt;/a&gt;工作2年&lt;/h2&gt;&lt;p&gt;2011年的5月份，在&lt;code&gt;杭州研究院&lt;/code&gt;的&lt;code&gt;闪电邮&lt;/code&gt;项目已上线并作为稳定版本告一段落，组里人员开始被调配到其它项目，考虑到PC客户端产品的市场日渐式微，而且在&lt;code&gt;网易&lt;/code&gt;这种游戏公司PC客户端只会作为战略产品或者辅助工具，很难有直接营收（那会闪电邮已经有百万用户量，网易邮箱用户的粘性非常高，超越Foxmail成为用户首选客户端）。在这种情况下，我开始考虑转型。那时方向有二，朋友推荐可以去&lt;code&gt;支付宝&lt;/code&gt;数据基础平台部门，部门老大建议去公司新成立的&lt;code&gt;雷电&lt;/code&gt;游戏工作室。考虑到留在网易，同事朋友和离家近，游戏项目是公司主业等因素下开始了又一段的苦逼之旅。&lt;/p&gt;
&lt;p&gt;回头看那时的选择，我并不后悔选择游戏行业，只是叹息当时只关注了方向，而没仔细考察工作室的人员组成和产品经理资历。而当年在支付宝的那朋友升到了系统架构师，前年去了鹅厂。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工作5年&quot;&gt;&lt;a href=&quot;#工作5年&quot; class=&quot;headerlink&quot; title=&quot;工作5年&quot;&gt;&lt;/a&gt;工作5年&lt;/h2&gt;&lt;p&gt;2014年5月20日我选择了离职。原本预计一年的产品开发期被各种因素拖成了三年，而且在这三年中越来越明白一件事，产品是团队协作的产物，产品的高度取决于程序策划美术中能力最弱的部门，而产品经理的眼界和思维决定了产品能走多远，还有在大公司中，产品经理包括各部门负责人的人脉和资源也是非常重要的，所以跟对人和产品，选对团队比自己埋头苦干更有效。&lt;/p&gt;
&lt;p&gt;这些因素在大公司中是需要时间、人脉和精力去慢慢获得的，作为偏内向重技术的码农而言，在这方面我知道自己积累不够，而另外一方面，三年的游戏开发技术和些许主程的管理经验的积累。在火热的手游产业召唤下，不仅仅是心痒痒，而是期许能带出一个战斗力过硬的团队，实现成功游戏产品的理想。机遇不会等你做好万全准备，毅然放弃N+1的补偿，与工作室里的几个小伙伴一起出来创业。&lt;/p&gt;
&lt;h2 id=&quot;创业组建阶段&quot;&gt;&lt;a href=&quot;#创业组建阶段&quot; class=&quot;headerlink&quot; title=&quot;创业组建阶段&quot;&gt;&lt;/a&gt;创业组建阶段&lt;/h2&gt;&lt;p&gt;前面提到了团队人员架构很重要，创业当然不能盲目，我们团队初期人员都来自同一个工作室，程序策划美术商务都不缺，缺的就是资金到位。原本一直跟我们有联系的&lt;code&gt;元鼎&lt;/code&gt;，迟迟没有跟我们签正式合同，而这时我们已经出来快一个月了，刚好朋友帮忙联系上了&lt;code&gt;真格&lt;/code&gt;，真格那边比较爽快，签完合同直接先预支了一半天使资金，使得我们能顺利的租好办公场地，购置设备和团队组建。&lt;/p&gt;
&lt;p&gt;2014年6月20日，7个人的团队正式开始上班，2程序2策划2美术1商务，我们三个创始人（Luo，我，Lu）按1：2：4的比例控股，10%作为期权池，其他人均持5%。针对我们团队成员年龄和工龄相仿，采用了全员持股，群体决策，创始人拍板，设制作人（主策），主程，主美的行政架构。&lt;/p&gt;
&lt;p&gt;期间也为拉队友出来和股份的事跟队友促膝长谈多次，有朋友考虑家庭因素不愿出来，也有朋友不满意占比的，好说歹说各种做工作，总算都确定下来了，但也给后面留下些许不稳定因素，但总归人员齐备，开始一起干活了。&lt;/p&gt;
&lt;h2 id=&quot;创业第一个月&quot;&gt;&lt;a href=&quot;#创业第一个月&quot; class=&quot;headerlink&quot; title=&quot;创业第一个月&quot;&gt;&lt;/a&gt;创业第一个月&lt;/h2&gt;&lt;p&gt;技术选型以后重新开篇再写，这里只是记录下研发过程中进度和流程所踩过的坑。一开始我们就以&lt;code&gt;刀塔传奇&lt;/code&gt;为范本，希望深化战斗体验，还原魔兽世界中打副本的感觉，初步定下2D横轴、位置不可操作的AI战斗形式，再以此为基础开发活动，刷塔，PVP，Boss战等玩法。&lt;/p&gt;
&lt;p&gt;那首先战斗Demo我们很快就开发出来了，但动作和场景都是拿网上资源代替的，感官效果不好。过了一个月，基础的战斗逻辑完成，策划开始使用替代资源编辑关卡。美术依然不停地再找外包测试，定风格这类事上。&lt;/p&gt;
&lt;h2 id=&quot;创业第二月&quot;&gt;&lt;a href=&quot;#创业第二月&quot; class=&quot;headerlink&quot; title=&quot;创业第二月&quot;&gt;&lt;/a&gt;创业第二月&lt;/h2&gt;&lt;p&gt;服务器框架，网络通讯，协议加密，数据库操作等等都好了，也完成了初期卡片系统，跟客户端开始协议交互。第一阶段的战斗逻辑的需求也完成了，开始细节优化。动画制作规范也摸索的差不多了，基本抛弃&lt;code&gt;DragonBones&lt;/code&gt;继续使用&lt;code&gt;CocosStudio&lt;/code&gt;，包括UI也使用CocosStudio搭建。但这时很扯淡的是外包回来的速度慢，美术效果还是不够理想，场景美术虽然换了一批，但是看上去有点惨不忍睹。此时已有出现问题的苗头，美术风格迟迟定不下来，外部制作的动作不尽如人意。我们只能不停的跟外包反馈，和主美讨论风格和方向。系统方面我也催促尽快出文档，但Lu的想法是战斗体验最重要，系统缓缓。那会程序急行军只是开发出了原型，我想着缓缓倒也没事，客户端可以先继续做逻辑，服务器底层功能先完善下。&lt;/p&gt;
&lt;h2 id=&quot;创业第三月&quot;&gt;&lt;a href=&quot;#创业第三月&quot; class=&quot;headerlink&quot; title=&quot;创业第三月&quot;&gt;&lt;/a&gt;创业第三月&lt;/h2&gt;&lt;p&gt;开通了QQ云服务器，买了App Store开发者账号，还购置了一台Mac mini。从我角度发现，手游程序开发，尤其2D卡牌项目，远比我之前想的简单多了，可能之前我还陷在三年的端游痛苦开发经历上。现在程序不仅进度遥遥领先，开发效率简直分分钟完成策划需求，有赖于客户端Cocos2dx+Lua，服务器Python+Redis开发，程序员的人生立马充满欢颜笑语，不会因为C++中内存泄露，崩溃等问题而抓狂。在我欣喜程序效率之余，危险的阴影已经开始笼罩。&lt;/p&gt;
&lt;p&gt;Lu和Luo基本将精力都放在了外包把控上，但因为不是美术专业，很多东西反馈回来，然后交给主美看，找出问题后，再写反馈意见给外包，这一来二去非常费时间。而且这时出现了一个重大问题，也是我们迄今为止最大的经济损失，前期我们没有好好考察主美的实际能力，包括他画的场景和给外包的美术意见，我们都觉得不好，但又没法以专业角度去说啥，导致外包做了一大批动作，后来基本都给废弃了，这里所浪费的外包费足以让我们小团队撑上4个月的。&lt;/p&gt;
&lt;p&gt;其次美术外包的事，还影响到关卡体验上的优化被拖后，不管啥问题，最后也都以没有资源或体现不出效果为由而搁置。系统文档严重落后，我跟Lu反应多次，但说来说去又会把问题指向外包上，导致在外包这事解决前，凡事都无解。后来这事越拖越久，我们都意识到不能再因为这事而拖延游戏开发进度，碰巧Lu的一个策划朋友刚辞职，然后就被Lu拉过来帮忙写系统文档。&lt;/p&gt;
&lt;p&gt;这个月是从创业以来，程序最闲的一个月，但也是很郁闷的一个月，团队中充斥着一种懒散和无奈的氛围，对于一个创业的小团队而言，这肯定不是件好事。期间我们也开始使用&lt;code&gt;redmine&lt;/code&gt;来记录周报，每周开会总结上周进度和预估下周工作，但收效不明显，因为原本加入这个制度是为了控制开发进度，而进度瓶颈又在美术，美术工作质量又很难衡量尤其是我们非专业的来看，所以执行一段时间后不了了之。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      创业过程中的点点滴滴记录
    
    </summary>
    
      <category term="startup" scheme="http://huangwei.pro/categories/startup/"/>
    
    
      <category term="summary" scheme="http://huangwei.pro/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>超酷算法：字谜树</title>
    <link href="http://huangwei.pro/2015-01/anagram-Trees/"/>
    <id>http://huangwei.pro/2015-01/anagram-Trees/</id>
    <published>2015-01-16T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.558Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/83217/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我毫不犹豫的把这个算法称为“超酷”，虽然我自己发明了它，但我还是觉得它相当的酷，而且它很适合我算法系列的主题，所以无论如何要把它写下来。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;当涉及到寻找单词字谜时，用的比较频繁的方法是字谜字典，简单得说，对单词的字母进行排序，以提供一个单词与所有字谜共同点的唯一索引。另外一种方法是为单词里的每个字母生成字母频率直方图。（这两种方法实际上或多或少相同。）这些方法查找确切的单字字谜字符串非常高效 - 如果使用哈希表，复杂度为O(1)。&lt;/p&gt;
&lt;p&gt;然而，如果问题是查找字谜的子集（包含一个字符串里字母的一个子集的单词），仍然是相当低效的，通常需要在O(n)时间内暴力搜索整个字典，或者查找每个有序字符串的子串，复杂度与输入字符串的字母长度有关，为O(2^l)。查找字谜子集显然更有趣，因为它能查找多字字谜，可以应用在拼字游戏上。&lt;/p&gt;
&lt;p&gt;不管怎样，我们先生成能唯一表示一组字母的直方图，再努力观察，我们可以生成一个树结构来更有效得查找字谜子集。为了构建这样的树，我们按照如下几个简单的步骤：&lt;/p&gt;
&lt;p&gt;假设我们有如下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个词典或单词字典来填充树&lt;/li&gt;
&lt;li&gt;词典中单词的字母表&lt;/li&gt;
&lt;li&gt;一个正在构建的树&lt;/li&gt;
&lt;li&gt;当前节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;词典里的每个单词：&lt;/p&gt;
&lt;p&gt; 1.为该单词生成字母频率直方图。&lt;/p&gt;
&lt;p&gt; 2.设当前节点为树的根节点。&lt;/p&gt;
&lt;p&gt; 3.每个字母表里的字符：&lt;/p&gt;
&lt;p&gt; 获取当前字符在当前单词里的频率，记为f&lt;/p&gt;
&lt;p&gt; 设置当前节点为当前节点的第f个子节点，如果它不存在的话就创建&lt;/p&gt;
&lt;p&gt; 4.将当前单词添加到当前（叶）节点上的单词列表&lt;/p&gt;
&lt;p&gt;以下是这个简单过程的结果，它是一棵固定高度的树，27个节点深，所有单词都在叶节点中，并且树的每个层级对应字母表里的字符。下面是个简略的例子（译注：原博客图片遗失，从WIKI上找了张替图）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fanyi.jobbole.com/wp-content/uploads/sites/9/2014/10/Image_of_an_anatree1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://fanyi.jobbole.com/wp-content/uploads/sites/9/2014/10/Image_of_an_anatree1-300x197.png&quot; alt=&quot;Image_of_an_anatree1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一旦树创建好后，我们可以如下方式查找输入字符串的字谜集合：&lt;/p&gt;
&lt;p&gt;假设我们有如下信息：&lt;/p&gt;
&lt;p&gt;由上述流程所构建的树&lt;/p&gt;
&lt;p&gt; 上面使用过的字母表&lt;/p&gt;
&lt;p&gt; 一个边界集合，初始化为空&lt;/p&gt;
&lt;p&gt;1.初始化时边界集合只包含树的根节点&lt;/p&gt;
&lt;p&gt; 2.生成输入字符串的字母频率直方图&lt;/p&gt;
&lt;p&gt; 3.对字母表中的每个字符：&lt;/p&gt;
&lt;p&gt; 1.获取当前字符在输入字符串里的频率，记为f&lt;/p&gt;
&lt;p&gt; 2.对边界集合里的每个节点，添加标号为0到f的子节点到新的边界集合中&lt;/p&gt;
&lt;p&gt; 4.当前边界集合中包含的叶节点，包含所有输入字符串的字谜子集&lt;/p&gt;
&lt;p&gt;至少对我来说，对该算法进行运行期分析比较困难。直观的看，它在实践中比任何一种蛮力算法要快很多，但我无法量化为大O表示法。作为一个上限，它不可能比O(n)的效率低，最坏也比蛮力算法少一个常数因子。作为下限值，边界集合中只有一个节点，那查找时间就与字母表长度成正比，为O(1)。平均情况下，依赖输入字符串所选择的字典的子集有多大。以输出的大小来量化的话，需要O(m)的操作。如果有人知道如何确定运行时更准确的范围的话，请在评论中让我知晓。&lt;/p&gt;
&lt;p&gt;这个算法有个缺点就是，需要大量的内存开销。我用python来实现，并导入/usr/share/dict/words，在本机上这大约是2MB的大小，但需要占用内存300MB。使用Pickle模块序列化到磁盘，输出文件的大小超过30MB，使用gzip压缩后下降到大约7MB。我怀疑内存大的部分原因是python字典的最小尺寸。我将使用列表来实现，如果我能够做到更高效，届时我会更新这篇文章。&lt;/p&gt;
&lt;p&gt;这里是上述所生成树的数据，可能你会感兴趣：&lt;/p&gt;
&lt;p&gt; 总单词数：234,936&lt;/p&gt;
&lt;p&gt; 叶节点：215,366&lt;/p&gt;
&lt;p&gt; 内部节点：1,874,748&lt;/p&gt;
&lt;p&gt;由此我们可以看出，内部节点的平均基数是非常低的，不会大于1。下面数据有助于澄清：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Tier&lt;/th&gt;&lt;th&gt;Number of nodes&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;85&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;203&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;707&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;1145&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;1886&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;3479&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;8156&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;8853&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;10835&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;19632&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;28470&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;47635&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;73424&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;92618&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;94770&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;125018&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;156406&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;182305&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;195484&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;200031&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;203923&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;205649&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;214001&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;靠近树的顶部节点的基数非常高，但树很快变平，最后四层树只占总结点的一半。这暗示了一个可能的空间优化：删除树的最后几层，将它们的叶子节点连在一起。当进行查找时，检查所选的节点，保证它们是输入字符串的字谜集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我可能只是重新发现了计算机科学领域30年前就被提及的论文。但惊喜的是，通过搜索尚未找到谁正在使用该算法，或者有其它方法比蛮力算法更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修订：最初的实现&lt;a href=&quot;http://blog.notdot.net/uploads/anagramfinder.pys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;在这。&lt;/p&gt;
&lt;p&gt;修订：使用列表来重新实现我的python代码，几乎节约了一半内存。有机会我会贴出pickled后的树和源码。&lt;/p&gt;
&lt;p&gt;修订：更多更新&lt;a href=&quot;http://blog.notdot.net/archives/39-Update-on-Anagram-Trees.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在这&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;（译注：字谜问题可简化为字符串编码和索引问题，如Tea编码为A1E1T1，编码哈希后，同编码单词有Ate，Eat等。文章写于2007年，文中算法不是最优解，只是提供了一种使用多路查找树的思路，类似数据结构有Trie，DAG，Suffix Tree等等。）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      超酷算法：字谜树
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="tree" scheme="http://huangwei.pro/tags/tree/"/>
    
      <category term="trie" scheme="http://huangwei.pro/tags/trie/"/>
    
      <category term="string" scheme="http://huangwei.pro/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>超酷算法：分组密码与安全排列</title>
    <link href="http://huangwei.pro/2015-01/secure-permutations-with-block-ciphers/"/>
    <id>http://huangwei.pro/2015-01/secure-permutations-with-block-ciphers/</id>
    <published>2015-01-15T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.566Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/83218/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;作为开始，我假设你知道什么是排列，简单说就是按特定的顺序对序列进行洗牌。比如，值域1-10的排列为{5,2,1,6,8,4,3,9,7,10} 。一个安全的排列是攻击者即使有该排列的任意子集，都无法确定其它任何一个元素的顺序。这里有个简单的例子是使用一个安全加密的伪随机数生成器，用一个密钥作为种子，并用它来打乱你的序列。&lt;/p&gt;
&lt;p&gt;如果你想生成一个非常非常大的排列，一个如此大的预计算和存储是不是不太现实？此外，你是否希望它是个安全序列？这里有个非常巧妙的方法，我们可以使用分组密码，使我们能够产生超过数值范围内的任何一个安全排列，而不必对它们进行预计算。&lt;/p&gt;
&lt;p&gt;分组密码，没人不熟悉，它是密码学中一种常见的基础元素。它是由多块一定长度的密文组成，密文一般为64或128位的加密串。相同的密钥和相同的明文，它只可能生成相同的密文。超过一个块大小的信息使用一系列操作模式中的某一种方式加密，继而可以针对比单个块大许多的消息进行安全的加密和解密。使用分组密码加密，选择操作模式是至关重要的。为了能生成一个安全排列，无论如何，我们只打算每次加密单个块，所以我们不必担心操作模式。&lt;/p&gt;
&lt;p&gt;如果你知道分组密码是如何运作的，你肯定能获得一个安全的排列。将给定长度的任意块（考虑下块的数量非常大的情况）用唯一的方式转换为另外一个块，且能将它再次转换回来。如果我们逐步加密更大的数字（1,2,3等等），我们保证能得到看上去随机的序列，只要不重复输入。这点很容易证明：假如它是重复的，那你会有两个输入数字被解码为同一个输出数字，这样就不可能有独一无二的解码。分组密码所持有的这些特性也正是对我们有用的特性。&lt;/p&gt;
&lt;p&gt;你说，一切都挺好，但如果我想要一个不是2的幂次值域内的排列该如何？这里有个聪明的小技巧，就是取一个块长度略大于你想要的长度的分组密码，使用上面描述的方法，逐步加密序列中的更大数值，以产生排列中的元素。当加密后的值超出你想要的排列值域之外，只需再次加密。重复这样的方式直到你给到你想要的值域内的数值。同样，我们能保证分组密码的唯一性，并且我们也能保证（穷举方式）最终获得了一个理想值域内的数值。&lt;/p&gt;
&lt;p&gt;很显然，在追寻这条路之前我们需要考虑一些因素。你要选择一个分组密码，是不是比你想生成的序列的值域要大，最好是2的幂次。密码值域和排列值域的比率确定了你运行的平均时间， 因此，如果密码是你排列的值域的四倍时，你就对每个值平均需要四次加密。这可能产生问题，因为大多数密码是64，128或者更多位。为了这个目的，我们找到适应性比较强的TEA加密算法，它很容易构造32,64,128或者更长位的变体，并且位操作在main主循环那很容易调整，也可产生4的幂次长度的密码，而无需将密码缩短至容易被暴力破解的长度。&lt;/p&gt;
&lt;p&gt;另外值得一提的是，虽然这个技术的目的是生成非常大的安全排列，但对那些并不注重安全的排列同样有用 - 你的密钥可作为生成排列的随机种子。在许多情况下这种方法同样有帮助，基本上它是个映射函数可以用来索引排列的数值，这样你可以计算出该排列的任意子集的值。&lt;/p&gt;
&lt;p&gt;最后，请记住，由于可能的排列数呈阶乘级增长，你的密钥空间肯定大大小于排列的数量。这个对于大多数应用可能并不重要，因为如此庞大的排列不可能一个个枚举过去。但是，如果你的密钥过短，它就有可能被攻击者利用枚举密钥的方式来找出可能生成的排列。&lt;/p&gt;
&lt;p&gt;更新：Yossi Oren在评论里留了分优秀的论文连接。它涵盖了我的描述（当然更全面）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      超酷算法：分组密码与安全排列
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="security" scheme="http://huangwei.pro/tags/security/"/>
    
      <category term="encryption" scheme="http://huangwei.pro/tags/encryption/"/>
    
      <category term="permutation" scheme="http://huangwei.pro/tags/permutation/"/>
    
  </entry>
  
  <entry>
    <title>超酷算法：BK树</title>
    <link href="http://huangwei.pro/2014-10/bktree/"/>
    <id>http://huangwei.pro/2014-10/bktree/</id>
    <published>2014-10-21T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.559Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/78811/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这是『超酷算法』系列的第一篇文章。基本上，任何一种算法我觉得都很酷，尤其是那些不那么明显简单的算法。&lt;/p&gt;
&lt;p&gt;BK树或者称为Burkhard-Keller树，是一种基于树的数据结构，被设计于快速查找近似字符串匹配，比方说拼写检查器，或模糊查找，当搜索”aeek”时能返回”seek”和”peek”。为何BK-Trees这么酷，因为除了穷举搜索，没有其他显而易见的解决方法，并且它能以简单和优雅的方法大幅度提升搜索速度。&lt;/p&gt;
&lt;p&gt;BK树在1973年由Burkhard和Keller第一次提出，论文在这《&lt;a href=&quot;http://portal.acm.org/citation.cfm?id=362003.362025&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Some approaches to best match file searching&lt;/a&gt;》。这是网上唯一的ACM存档，需要订阅。更细节的内容，可以阅读这篇论文《&lt;a href=&quot;http://citeseer.ist.psu.edu/1593.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fast Approximate String Matching in a Dictionary&lt;/a&gt;》。&lt;/p&gt;
&lt;p&gt;在定义BK树之前，我们需要预先定义一些操作。为了索引和搜索字典，我们需要一种比较字符串的方法。编辑距离（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_Distance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Levenshtein Distance&lt;/a&gt;）是一种标准的方法，它用来表示经过插入、删除和替换操作从一个字符串转换到另外一个字符串的最小操作步数。其它字符串函数也同样可接受（比如将调换作为原子操作），只要能满足以下一些条件。&lt;/p&gt;
&lt;p&gt;现在我们观察下编辑距离：构造一个度量空间（&lt;a href=&quot;http://en.wikipedia.org/wiki/Metric_space&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Metric Space&lt;/a&gt;），该空间内任何关系满足以下三条基本条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;d(x,y) = 0 &amp;lt;-&amp;gt; x = y (假如x与y的距离为0，则x=y)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d(x,y) = d(y,x) (x到y的距离等同于y到x的距离)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d(x,y) + d(y,z) &amp;gt;= d(x,z)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述条件中的最后一条被叫做三角不等式（&lt;a href=&quot;http://en.wikipedia.org/wiki/Triangle_inequality&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Triangle Inequality&lt;/a&gt;）。三角不等式表明x到z的路径不可能长于另一个中间点的任何路径（从x到y再到z）。看下三角形，你不可能从一点到另外一点的两侧再画出一条比它更短的边来。&lt;/p&gt;
&lt;p&gt;编辑距离符合基于以上三条所构造的度量空间。请注意，有其它更为普遍的空间，比如欧几里得空间（Euclidian Space），编辑距离不是欧几里得的。既然我们了解了编辑距离（或者其它类似的字符串距离函数）所表达的度量的空间，再来看下Burkhard和Keller所观察到的关键结论。&lt;/p&gt;
&lt;p&gt;假设现在我们有两个参数，query表示我们搜索的字符串，n表示字符串最大距离，我们可以拿任意字符串test来跟query进行比较。调用距离函数得到距离d，因为我们知道三角不等式是成立的，所以所有结果与test的距离最大为d+n，最小为d-n。&lt;/p&gt;
&lt;p&gt;由此，BK树的构造就相当简单：每个节点有任意个子节点，每条边有个值表示编辑距离。所有子节点到父节点的边上标注n表示编辑距离恰好为n。比如，我们有棵树父节点是”book”和两个子节点”rook”和”nooks”，”book”到”rook”的边标号1，”book”到”nooks”的边上标号2。&lt;/p&gt;
&lt;p&gt;从字典里构造好树后，取任意单词作为树的根节点。无论何时你想插入新单词时，计算该单词与根节点的编辑距离，并且查找数值为d(neweord, root)的边。递归得与各子节点进行比较，直到没有子节点，你就可以创建新的子节点并将新单词保存在那。比如，插入”boon”到刚才上述例子的树中，我们先检查根节点，查找d(“book”, “boon”) = 1的边，然后检查标号为1的边的子节点，得到单词”rook”。我们再计算距离d(“rook”, “boon”)=2，则将新单词插在”rook”之后，边标号为2。&lt;/p&gt;
&lt;p&gt;在树中做查询，计算单词与根节点的编辑距离d，然后递归查找每个子节点标号为d-n到d+n（包含）的边。假如被检查的节点与搜索单词的距离d小于n，则返回该节点并继续查询。&lt;/p&gt;
&lt;p&gt;BK树是多路查找树，并且是不规则的（但通常是平衡的）。试验表明，1个查询的搜索距离不会超过树的5-8%，并且2个错误查询的搜索距离不会超过树的17-25%，这可比检查每个节点改进了一大步啊！需要注意的是，如果要进行精确查找，也可以非常有效地通过简单地将n设置为0进行。&lt;/p&gt;
&lt;p&gt;回顾这篇文章，写的有点长哈，似乎比我预期中的要复杂。希望你在阅读之后，也能感受到BK树的优雅和简单。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      超酷算法：BK树
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="tree" scheme="http://huangwei.pro/tags/tree/"/>
    
      <category term="trie" scheme="http://huangwei.pro/tags/trie/"/>
    
      <category term="string" scheme="http://huangwei.pro/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>「毁灭战士3」源码就是“保持简洁”的证明</title>
    <link href="http://huangwei.pro/2014-07/doom-clean-code/"/>
    <id>http://huangwei.pro/2014-07/doom-clean-code/</id>
    <published>2014-07-29T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.560Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/83438/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;假如你在网上搜最好的C++源代码。「毁灭战士3 | Doom 3」的源代码肯定会被提到好多次，这篇就来证明此事。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #888888;&quot;&gt;我花了一些时间通读了 DOOM3 的源代码。这可能是我见过的最干净最漂亮的代码了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DOOM3是&lt;a href=&quot;http://en.wikipedia.org/wiki/Id_Software&quot; title=&quot;Id Software&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;id Software&lt;/a&gt;公司开发 &lt;a href=&quot;http://en.wikipedia.org/wiki/Activision&quot; title=&quot;Activision&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activision&lt;/a&gt;发行的视频游戏。该游戏为id Software赢得了商业上的成功，已售出350万多份拷贝。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7cc829d3jw1e4zbnxsznrj20ai06lq3u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在2011年11月23日，id Software维持开源传统，发布了他们上一个引擎的&lt;a href=&quot;https://github.com/dhewm/dhewm3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源代码&lt;/a&gt;。这份源代码已经被很多开发者审查，这里就有个fabien反馈的例子（&lt;a href=&quot;http://fabiensanglard.net/doom3_bfg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #888888;&quot;&gt;DOOM3 BFG是用C++写的，一种庞大的语言，它既能写出优秀的代码，但也让人憎恶到眼睛流血。幸运的是，id Software退而求其次，使用C++子集，接近于“带类的C”，如以下几条约束：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 13px; color: #888888;&quot;&gt;没有异常&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;没有引用（使用指针）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;少用模板&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;使用常量（Const everywhere）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;多态&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #888888;&quot;&gt;继承&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多C++专家不建议使用“带类的C”这样的方法。然而，DOOM3从2000开发至2004，没有使用任何现代C++机制。&lt;/p&gt;
&lt;p&gt;让我们使用 CppDepend 来看看源代码，探索它得特别之处。&lt;/p&gt;
&lt;p&gt;DOOM3有少量的几个工程组成，这儿有它的工程列表和一些类型统计。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6941baebgw1eohinbexqej20ed05odh4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里还有他们之间的依赖关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohinasrfqj20lo094dhk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DOOM3定义了很多全局函数。但是，大部分内容实现是在类中。&lt;/p&gt;
&lt;p&gt;数据模型使用结构体定义。为了在源代码中对结构体的使用有个更具体的理解，在下图中将它们以蓝色分块显示出来。&lt;/p&gt;
&lt;p&gt;在图表中，代码被表示为树形图，树形图表示法能使用嵌套的矩形来表示树状结构。而树结构用来表示代码分层结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;工程包含命名空间。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;命名空间包含类型。&lt;/li&gt;
&lt;li&gt;类型包含函数和域（field）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6941baebgw1eohinagm9ij20le0an44r.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以观察到它定义了许多的结构体，比如DoomDLL 40%的类型都是结构体。它们被有条理地用来定义数据模型。该实践已经被很多工程所接受，这种方法有个最大的缺点是多线程应用，结构体的public变量并非不可改变的。&lt;/p&gt;
&lt;p&gt;为何支持不可变对象，有个重要原因：能显著地简化并发编程。考虑下，写个合格的多线程程序是个艰巨的任务吗？因为很难同步线程访问资源（对象或者其他OS资源）。为什么同步这些操作很困难呢？因为很难保证在资源竞争状态下多线程对多个对象进行正确的读写操作。假如没有写操作呢？换句话说，线程只访问这些对象，而不做任何变动？这样就不再需要同步操作了！&lt;/p&gt;
&lt;p&gt;让我搜索下只有一个基类的类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohin9ofg3j20bt08jabe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;几乎40%的结构体和类都只有一个基类。通常，OOP（面对对象编程）使用继承的好处之一是多态，下面蓝色标明了源代码中的虚函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6941baebgw1eohin97by0j20n00aqn45.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;超过30%的函数是虚函数。少数是纯虚函数，下面是所有虚基类列表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6941baebgw1eohin8oam0j20av0drdhs.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;只有52个类被定义为虚基类，其中35个类只是纯接口，也就是这些接口都是纯虚函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6941baebgw1eohin8eycvj20aw0dp0vc.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们来搜搜使用了RTTI的函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohin7xurlj20c20ds77l.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;只有非常少的函数使用了RTTI。&lt;/p&gt;
&lt;p&gt;为保证只使用OOP最基础的概念，不使用高级设计模式，不过度使用接口和虚基类，限制了RTTI的使用并且数据都定义为结构体。&lt;/p&gt;
&lt;p&gt;至此这份代码跟很多C++开发者所批评的“带类的C”没太大区别。&lt;/p&gt;
&lt;p&gt;其开发者的一些有趣的选择，帮助我们理解它的奥秘：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1-为有用的服务提供公用的基础类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;许多类是从idClass继承下来的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohin7juvpj20ax0ds0v6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;idClass提供如下服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;创建实例化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;类型管理&lt;/li&gt;
&lt;li&gt;事件管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/6941baebgw1eohin6s68bj20aw0cgjts.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2-方便的字符串操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，字符串是一个项目里用的最多的对象，许多地方需要使用它，并且需要函数来对其进行操作。&lt;/p&gt;
&lt;p&gt;DOOM3定义了idstr类，几乎包含了所有用的字符串操作函数，无需再自己定义函数来接受其它框架所提供的字符串类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3-源代码与GUI框架（MFC）高度解耦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多工程用了MFC后，它的代码就会与MFC类型高度耦合，并且在代码的任何一处都能发现MFC类型。&lt;/p&gt;
&lt;p&gt;在DOOM3里，代码和MFC是高度解耦的，只有GUI类才会直接依赖它。下面的CQLinq查询可以展示这点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6941baebgw1eohin65onej20bk0ds0w6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的选择对生产力有很大的影响。事实上，只有GUI开发者才会关心MFC框架，其它开发者不应该被强制在MFC上浪费时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4-提供了非常好的公共函数库（idlib）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几乎在所有项目中都会用到公共工具类，就如以下查询的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohin5r7msj20bi0dsaco.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如我们所看到经常使用的就是公共工具类。假如C++开发者不使用一个良好的公共工具框架，那就会为解决技术层面问题花费大部分的开发时间。&lt;/p&gt;
&lt;p&gt;idlib提供了很多有用的类用于字符串处理，容器和内存。有效促进了开发者的工作，并且能让他们更多的关注在游戏逻辑上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5-实现非常易于理解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DOOM3实现了非常难的编译器，对于C++开发者而言，开发语法解析器和编译器不是件轻松的事。尽管如此，DOOM3的实现非常容易被理解并且编写得十分干净。&lt;/p&gt;
&lt;p&gt;这儿有这些编译器的类的依赖图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/6941baebgw1eohin5clqhj20k609udh7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这儿还有编译器源代码的代码片段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6941baebgw1eohin4wztzj20is0e9juu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们也看过许多语法解析器和编译器的代码，但这是第一次我们发现编译器是如此得容易理解，和整个DOOM3源代码一样。这太神奇了。当我们探究DOOM3源代码时，我们忍不住会喊：喔，这太漂亮了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使DOOM3选择了很基础的设计，但它的设计者所做的决定都是为了开发者能更多的关注游戏逻辑本身，并且为所有技术层面的东西提供便利。这提高了多大的生产力啊。&lt;/p&gt;
&lt;p&gt;无论何时使用“带类的C”，你应该明白你自己在干什么。你必须像DOOM3的开发专家一样。但不推荐初学者忽视现代C++建议而冒险。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      「毁灭战士3」源码就是“保持简洁”的证明
    
    </summary>
    
      <category term="develop" scheme="http://huangwei.pro/categories/develop/"/>
    
    
      <category term="doom" scheme="http://huangwei.pro/tags/doom/"/>
    
      <category term="zen" scheme="http://huangwei.pro/tags/zen/"/>
    
  </entry>
  
  <entry>
    <title>30 行 Python 代码搞定 X 算法</title>
    <link href="http://huangwei.pro/2014-07/python-30-x/"/>
    <id>http://huangwei.pro/2014-07/python-30-x/</id>
    <published>2014-07-21T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.566Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是在没有搭建这个Blog之前帮jobbole翻译的，现在只是复制回来自己做个存档，&lt;a href=&quot;http://blog.jobbole.com/74000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobbole链接在这&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;假如你对数独解法感兴趣，你可能听说过&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%B2%BE%E7%A1%AE%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精确覆盖问题&lt;/a&gt;。给定全集 &lt;code&gt;X&lt;/code&gt;和 &lt;code&gt;X&lt;/code&gt;的子集的集合 &lt;code&gt;Y&lt;/code&gt;，存在一个 Y 的子集 Y&lt;em&gt;，使得 Y&lt;/em&gt; 构成 X 的一种分割。&lt;/p&gt;
&lt;p&gt;这儿有个Python写的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Y = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子的唯一解是&lt;code&gt;[&amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;F&amp;#39;]。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;精确覆盖问题是NP完备&lt;span style=&quot;color: #888888;&quot;&gt;（译注：指没有任何一个够快的方法可以在合理的时间内，意即多项式时间 找到答案）&lt;/span&gt;。&lt;a href=&quot;http://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X算法&lt;/a&gt;是由大牛高德纳发明并实现。他提出了一种高效的实现技术叫&lt;a href=&quot;http://en.wikipedia.org/wiki/Dancing_Links&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;舞蹈链&lt;/a&gt;，使用双向链表来表示该问题的矩阵。&lt;/p&gt;
&lt;p&gt;然而，舞蹈链实现起来可能相当繁琐，并且不易写地正确。接下来就是展示Python奇迹的时刻了！有天我决定用Python来编写&lt;code&gt;X&lt;/code&gt;算法，并且我想出了一个有趣的舞蹈链变种。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;p&gt;主要的思路是使用字典来代替双向链表来表示矩阵。我们已经有了 &lt;code&gt;Y&lt;/code&gt;。从它那我们能快速的访问每行的列元素。现在我们还需要生成行的反向表，换句话说就是能从列中快速访问行元素。为实现这个目的，我们把X转换为字典。在上述的例子中，它应该写为&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;眼尖的读者能注意到这跟Y的表示有轻微的不同。事实上，我们需要能快速删除和添加行到每列，这就是为什么我们使用集合。另一方面，高德纳没有提到这点，实际上整个算法中所有行是保持不变的。&lt;/p&gt;
&lt;p&gt;以下是算法的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X, Y, solution=[])&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; X:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; list(solution)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c = min(X, key=&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; c: len(X[c]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list(X[c]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            solution.append(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cols = select(X, Y, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; solve(X, Y, solution):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            deselect(X, Y, r, cols)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            solution.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X, Y, r)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cols = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Y[r]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; X[j]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Y[i]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k != j:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    X[k].remove(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cols.append(X.pop(j))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cols&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deselect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X, Y, r, cols)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reversed(Y[r]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        X[j] = cols.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; X[j]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Y[i]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k != j:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    X[k].add(i)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;真的只有 30 行！&lt;/p&gt;
&lt;h2 id=&quot;格式化输入&quot;&gt;&lt;a href=&quot;#格式化输入&quot; class=&quot;headerlink&quot; title=&quot;格式化输入&quot;&gt;&lt;/a&gt;格式化输入&lt;/h2&gt;&lt;p&gt;在解决实际问题前，我们需要将输入转换为上面描述的格式。可以这样简单处理&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: false&quot;&gt;X = {j: set(filter(lambda i: j in Y[i], Y)) for j in X}&lt;/pre&gt;

&lt;p&gt;但这样太慢了。假如设 X 大小为 m，Y 的大小为 n，则迭代次数为 m*n。在这例子中的数独格子大小为 N，那需要 N^5 次。我们有更好的办法。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X = &amp;#123;j: set() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; X&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Y:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Y[i]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        X[j].add(i)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这还是 O(m*n) 的复杂度，但是是最坏情况。平均情况下它的性能会好很多，因为它不需要遍历所有的空格位。在数独的例子中，矩阵中每行恰好有 4 个条目，无论大小，因此它有N^3的复杂度。&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单: &lt;/strong&gt;不需要构造复杂的数据结构，所有用到的结构Python都有提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可读性: &lt;/strong&gt;上述第一个例子是直接从&lt;a href=&quot;http://en.wikipedia.org/wiki/Exact_cover#Detailed_example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia上的范例&lt;/a&gt;直接转录下来的！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性: &lt;/strong&gt;可以很简单得扩展来解决数独。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;求解数独&quot;&gt;&lt;a href=&quot;#求解数独&quot; class=&quot;headerlink&quot; title=&quot;求解数独&quot;&gt;&lt;/a&gt;求解数独&lt;/h2&gt;&lt;p&gt;我们需要做的就是把数独描述成精确覆盖问题。&lt;a href=&quot;http://www.cs.mcgill.ca/~aassaf9/python/sudoku.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有完整的数独解法代码，它能处理任意大小，3x3，5x5，即使是2x3，所有代码少于100行，并包含doctest！（感谢Winfried Plappert 和 David Goodger的评论和建议）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      30 行 Python 代码搞定 X 算法
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="game" scheme="http://huangwei.pro/tags/game/"/>
    
      <category term="random" scheme="http://huangwei.pro/tags/random/"/>
    
      <category term="distribution" scheme="http://huangwei.pro/tags/distribution/"/>
    
      <category term="algorithm" scheme="http://huangwei.pro/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>百度面试题 - 搜索框的suggestion</title>
    <link href="http://huangwei.pro/2012-09/baidu-suggestion/"/>
    <id>http://huangwei.pro/2012-09/baidu-suggestion/</id>
    <published>2012-09-22T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.558Z</updated>
    
    <content type="html">&lt;h2 id=&quot;题目内容&quot;&gt;&lt;a href=&quot;#题目内容&quot; class=&quot;headerlink&quot; title=&quot;题目内容&quot;&gt;&lt;/a&gt;题目内容&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;百度搜索框的suggestion,比如输入北京，搜索框下面会以北京为前缀，展示“北京爱情故事”、“北京公交”、“北京医院”等等搜索词。&lt;/p&gt;
&lt;p&gt;如何设计使得空间和时间复杂度尽量低。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在字符串集合$ S $中，找出相同前缀$ P $的字符串。&lt;br&gt;设$ size(S) = N $，查询次数为$ M $。&lt;/p&gt;
&lt;h3 id=&quot;1-朴素方案&quot;&gt;&lt;a href=&quot;#1-朴素方案&quot; class=&quot;headerlink&quot; title=&quot;1. 朴素方案&quot;&gt;&lt;/a&gt;1. 朴素方案&lt;/h3&gt;&lt;p&gt;朴素得，每次查询时，遍历整个字符串集合，比较每个字符串的前缀。&lt;/p&gt;
&lt;p&gt;时间复杂度$ T(N*len(P)) = O(N) $，这里的len(P)是一个常数值，所以不会对大O造成影响，参见&lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%A4%A7O%E7%AC%A6%E5%8F%B7&quot; title=&quot;大O符号 - 维基百科，自由的百科全书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;扩展阅读1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那总的时间复杂度就是$ O(MN) $，不使用额外空间，则空间复杂度为$ O(1) $。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Si &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; S:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; prefix(Si, P):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; Si&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-离线处理方案&quot;&gt;&lt;a href=&quot;#2-离线处理方案&quot; class=&quot;headerlink&quot; title=&quot;2. 离线处理方案&quot;&gt;&lt;/a&gt;2. 离线处理方案&lt;/h3&gt;&lt;p&gt;想一下方案1，我们大部分时间浪费在了很多不可能的比较上。&lt;br&gt;如，字符串集合中有“南京”，“上海青年”等，跟“北京”前缀毫无关系的词。&lt;/p&gt;
&lt;p&gt;为了优化这部分计算，我们先对字符串集合进行排序，然后二分查找到前缀相关位置，接着遍历，如果遇上没有该前缀的词，就可以停止遍历。&lt;/p&gt;
&lt;p&gt;因为后续的词不可能再有相关前缀，这一特性是字典序后的集合保证的。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort(S)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = lower_bound(S, P)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i = i to N:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; prefix(S[i], P):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; S[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;排序是在第一次查询前先预处理的，后续不需再调用。&lt;/p&gt;
&lt;p&gt;假设每次查询获得条目数为R，所以时间复杂度$ T(NlogN + M(logN + R)) $。&lt;/p&gt;
&lt;p&gt;但我们这里定义$R$为常量，因为真实应用上显示条目上限是有限制的，像baidu就只有10个。&lt;/p&gt;
&lt;p&gt;那时间复杂度就是$ O(NlogN + MlogN) $。&lt;br&gt;集合S在这个方案中最好使用数组保存，随机读写效率高。&lt;br&gt;当然也能使用自平衡树，如&lt;code&gt;std::set&lt;/code&gt;，&lt;mark&gt;虽然set排序也是$ O(NlogN) $，但由于其结构的复杂性，实际效率会有几倍的差弱于快排。&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-在线处理方案&quot;&gt;&lt;a href=&quot;#3-在线处理方案&quot; class=&quot;headerlink&quot; title=&quot;3. 在线处理方案&quot;&gt;&lt;/a&gt;3. 在线处理方案&lt;/h3&gt;&lt;h4 id=&quot;3-1-字典树&quot;&gt;&lt;a href=&quot;#3-1-字典树&quot; class=&quot;headerlink&quot; title=&quot;3.1 字典树&quot;&gt;&lt;/a&gt;3.1 字典树&lt;/h4&gt;&lt;p&gt;离线跟在线最大的区别，在于离线的字符串集合S是固定，而在线的话集合S会有增加、删除、更新操作。&lt;/p&gt;
&lt;p&gt;所以在线处理的难度大于离线，离线问题可以认为是在线问题的子集。&lt;/p&gt;
&lt;p&gt;假如在$M$次查询过程中，加入$L$次更新操作。在直接套用离线处理方案的情况下，时间复杂度为$ O(LNlogN + MlogN) $。&lt;/p&gt;
&lt;p&gt;显然这时查询不是瓶颈，反而预处理拖了后腿。&lt;/p&gt;
&lt;p&gt;这里，我们推荐使用Trie（&lt;a href=&quot;http://zh.wikipedia.org/zh/Trie&quot; title=&quot;Trie - 维基百科，自由的百科全书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字典树&lt;/a&gt;），为什么选择字典树？因为它满足这些需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;==更新和查找操作与字符串长度有关，时间复杂度O(1)==，保证了效率。&lt;/li&gt;
&lt;li&gt;==树的遍历顺序隐含了字典顺序==，不需显式排序，跳过预处理瓶颈。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_prefix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node, deep)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; empty(node):                &lt;span class=&quot;comment&quot;&gt;#子树为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; deep == len(P):            &lt;span class=&quot;comment&quot;&gt;#找到完整P&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; all_son(node)    &lt;span class=&quot;comment&quot;&gt;#返回该子树所有叶节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#递归遍历子树&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    find_prefix(son(node, P[deep]), deep+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Trie处理流程大致是这样的，单次查询的时间复杂度为$O(1)$。&lt;/p&gt;
&lt;p&gt;在线的处理方式当然也能用在离线上，但这两者的效率谁高谁低？&lt;/p&gt;
&lt;p&gt;从时间复杂度上，$O(logN)$对$O(1)$，似乎没有啥可比性，但在实践中我们要考虑一些其他因素。 &lt;/p&gt;
&lt;p&gt;首先，数组的下标访问速度优于树的指针访问（关于这点大家可以反汇编，不要迷信教科书上指针访问必定快于下标访问的结论，这点效率虽然有差，但现代编译器会很好的优化相关代码）。 &lt;/p&gt;
&lt;p&gt;其次，获取结果的效率，数组的顺序访问也优于树的遍历。树有中间节点的时间消耗，且数组能比较好得被Cache到。 &lt;/p&gt;
&lt;p&gt;再者，即使 $ N = 1G = 2^{30} $ ， $ logN = 30 $ 而已， $ O(logN) $ 数量级和$O(1)$相比其实不算多坏。 &lt;/p&gt;
&lt;p&gt;使用数组的方案在实际情况下，往往表现优于Trie，而且程序编写难度低，调试方面也相对轻松。 &lt;/p&gt;
&lt;p&gt;最最关键的是，Trie在工程上应用面很窄，根本不像其在理论上来的那样强大。 &lt;/p&gt;
&lt;p&gt;==朴素的Trie一般应用在英文场景，数据集庞大且重复率很高的情况下比较适用。==&lt;/p&gt;
&lt;p&gt;原因就是 ==Trie太费内存，不能应用于中文。== 基本上可以说，不改造不优化，Trie就是废材。 &lt;/p&gt;
&lt;p&gt;但Trie多路查找的思想确实很重要，很多变种能得到很好的时空效率。 &lt;/p&gt;
&lt;p&gt;有些程序员会迷恋甚至迷信各种数据结构在理论上带来的结果，其实我们更应该看清本质，这也是我想写有深度的分析稿子的原因。 &lt;/p&gt;
&lt;p&gt;关于Trie的优化和改造相关内容，我会再整理一份稿子奉上的，这里先作为一个案例引用。&lt;/p&gt;
&lt;h4 id=&quot;3-2-改造方案&quot;&gt;&lt;a href=&quot;#3-2-改造方案&quot; class=&quot;headerlink&quot; title=&quot;3.2 改造方案&quot;&gt;&lt;/a&gt;3.2 改造方案&lt;/h4&gt;&lt;p&gt;现在的问题是，在线处理我们需要像Trie这样的多路查找树特性，而且要能支持中文。 &lt;/p&gt;
&lt;p&gt;这里我们可以转换下思路，可以把中文转换成拼音，这样又可以直接套用Trie，只不过多了中文转拼音一个步骤。 &lt;/p&gt;
&lt;p&gt;转拼音其实不难，就是做个表进行映射下就好了，GBK2.0标准中也就27000+个汉字，处理详细方法在这不累述，请自行google。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/157422/2012092418501755.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图，朴素的Trie是按英文字母做边的，而拼音是声母和韵母作为单元。 &lt;/p&gt;
&lt;p&gt;比如“好”hao，“双”shuang， ==Tire的做法会使树中间节点冗余，影响查找效率，最重要的是导致内存浪费。== &lt;/p&gt;
&lt;p&gt;优化方法是将Trie对英文字母的映射改成声母和韵母的映射。 &lt;/p&gt;
&lt;p&gt;哈，这个说起来简单，实现起来还是有要注意的地方。 &lt;/p&gt;
&lt;p&gt;Trie对字母的映射，可以简单得开个数组，类似ptr[26]，然后映射就很简单，比如ptr[ch-‘a’]。 &lt;/p&gt;
&lt;p&gt;而声母和韵母的映射没这么简单，一般方法就是枚举、二分查找、map、hash，虽然集合不大，但或多或少都需要耗费些时间。 &lt;/p&gt;
&lt;p&gt;但这个是为减少空间浪费做的一点点时间牺牲，在工程实践上是完全值得的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/157422/2012092419063236.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有童鞋会说，既然声母和韵母还是要映射，为什么不直接映射中文？ &lt;/p&gt;
&lt;p&gt;==其实不映射中文的原因，在于中文处理本身有难度，字符集大，词组间相同前缀较短，容易给树结构的内存问题雪上加霜。== &lt;/p&gt;
&lt;p&gt;用拼音的方法，容易合并相关前缀，比如同音不同字的情况。 &lt;/p&gt;
&lt;p&gt;当然这些空间优势也需要付出一定的时间花费，就是在节点上保存相关词组。 &lt;/p&gt;
&lt;p&gt;比如图例中的shuang，它可能是“双”，也可能是“爽”。这在查询前缀较短的情况下，词组候选集过大，导致额外的性能瓶颈。 &lt;/p&gt;
&lt;p&gt;说到这里的时候，大家可能有点迷糊了，既然中文的查找树太费内存不可用，而拼音的查找树又会退化，那怎么解决才好？ &lt;/p&gt;
&lt;p&gt;在这，我想表明我自己的一个观点，就是特定的复杂的应用应该有量身定做的算法和数据结构，教科书上不可能有现成的方案。所以一个优秀程序员的必经之路，必须要能融会贯通，然后构建出自己的解决方案。&lt;/p&gt;
&lt;p&gt;概括下我的思路。对于有更新的在线处理，我们如果采用多路查找树的思想（我这不提Trie了，因为Trie已经被改造的面目全非），可以既照顾到数据集的更新也能兼顾查询效率，两者的时间复杂度都和操作的字符串长度有关，这已是极小的时间花费。 &lt;/p&gt;
&lt;p&gt;从汉字转为拼音，虽然无法直接映射汉字，导致同音词查询新子问题的出现，但换来了空间可用性。 &lt;/p&gt;
&lt;p&gt;因而打开了一种新的思路，在这里 ==拼音做了类似一级索引的工作，同音字的筛选就能在小数据集中操作。==&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/157422/2012092514564342.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中，红色表示一级索引，绿色表示二级索引，蓝色表示数据集（蓝色是冗余数据优化），不同的图形表示不同的数据结构。这样在工程上的好处是可以结合多个不同数据结构各自的优点。 &lt;/p&gt;
&lt;p&gt;一级索引查找方式类似Trie，二级索引可以使用set、map、hash等关联结构，数据集可以使用list、vector等顺序结构。 &lt;/p&gt;
&lt;p&gt;使用STL的童鞋可以在(资料)&lt;a href=&quot;http://www.sgi.com/tech/stl/table_of_contents.html&quot; title=&quot;SGI - the Standard Template Library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3&lt;/a&gt;中查询各种结构的用法。&lt;/p&gt;
&lt;h4 id=&quot;3-3改造方案优化&quot;&gt;&lt;a href=&quot;#3-3改造方案优化&quot; class=&quot;headerlink&quot; title=&quot;3.3改造方案优化&quot;&gt;&lt;/a&gt;3.3改造方案优化&lt;/h4&gt;&lt;p&gt;我们来分析下复杂度，首先分析查询时间复杂度（不算蓝色优化部分）。 &lt;/p&gt;
&lt;p&gt;一级索引查找时间跟前缀拼音长度有关$T(Len(P))$。子树遍历跟其大小有关，最坏能到达$O(N)$。&lt;/p&gt;
&lt;p&gt;==遍历子树是多路查找树的通病，因为它的中间节点不保存子节点信息，当然你可以选择冗余保存（就是蓝色的功能）。==&lt;/p&gt;
&lt;p&gt;离线处理时我们说过，实践中结果集R会是一个常数值，所以别担心$O(N)$，这里我们换成$T(R)$来计算。 &lt;/p&gt;
&lt;p&gt;当一级索引节点有匹配时，进入二级索引，这里我们使用STL的set结构来分析。&lt;/p&gt;
&lt;p&gt;set使用iterator遍历时，它是字典序的，所以使用lower_bound + iterator就能搞定，时间复杂度是$O(logN) + T(R)$。 &lt;/p&gt;
&lt;p&gt;最坏情况下，每个有效节点（除去不完整的拼音节点）只有一个词，这样需要遍历R个有效节点。&lt;/p&gt;
&lt;p&gt;时间复杂度为$Len(P) + R&lt;em&gt;(O(logN) + R) = Len(P) + R&lt;/em&gt;O(logN) + R*R$，&lt;br&gt;因为$Len(P)$和$R$都是常数值，所以最后查询的时间复杂度为$O(logN)$。 &lt;/p&gt;
&lt;p&gt;插入操作的流程跟查询类似，时间复杂度也相同，在这就略过了。 &lt;/p&gt;
&lt;p&gt;从这个角度讲，大家 ==不要太过于迷信大O分析，这只是很粗略的上界，它保证时间效率上的可用性，不代表它的实际运行效率。==&lt;/p&gt;
&lt;p&gt;所以，见到$O(logN)$跑的比$O(N^2)$都慢的程序也是很正常的，很多细节的优化，往往都是根据相关数据和特点在大O系数和常数间挣扎。&lt;/p&gt;
&lt;h4 id=&quot;3-4-自平衡树&quot;&gt;&lt;a href=&quot;#3-4-自平衡树&quot; class=&quot;headerlink&quot; title=&quot;3.4 自平衡树&quot;&gt;&lt;/a&gt;3.4 自平衡树&lt;/h4&gt;&lt;p&gt;估计很多童鞋看上字典树的处理方案已经很头大了，有没有又方便又快捷的方案？ &lt;/p&gt;
&lt;p&gt;当然有，离线处理我们提到过自平衡树，如&lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;在线处理中就很好的用到了它的插入特性，时间复杂度为$O(logN)$。 &lt;/p&gt;
&lt;p&gt;然后依然使用lower_bound + iterator方法查询。 &lt;/p&gt;
&lt;p&gt;这样它的插入和查询也都是$O(logN)$，那上面的方案跟平衡树方案效率是等同的？ &lt;/p&gt;
&lt;p&gt;此时，我希望大家能从字典树的复杂度分析过程中找到些灵感，这里我不详述红黑树理论，可&lt;a href=&quot;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&quot; title=&quot;Red–black tree - Wikipedia, the free encyclopedia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参见资料&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;引用资料&quot;&gt;&lt;a href=&quot;#引用资料&quot; class=&quot;headerlink&quot; title=&quot;引用资料&quot;&gt;&lt;/a&gt;引用资料&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%A4%A7O%E7%AC%A6%E5%8F%B7&quot; title=&quot;大O符号 - 维基百科，自由的百科全书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大O符号 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;http://zh.wikipedia.org/zh/Trie&quot; title=&quot;Trie - 维基百科，自由的百科全书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trie - 维基百科，自由的百科全书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;http://www.sgi.com/tech/stl/table_of_contents.html&quot; title=&quot;SGI - the Standard Template Library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SGI - the Standard Template Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&quot;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&quot; title=&quot;Red–black tree - Wikipedia, the free encyclopedia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Red–black tree - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      百度搜索框的suggestion,比如输入北京，搜索框下面会以北京为前缀，展示“北京爱情故事”、“北京公交”、“北京医院”等等搜索词。
    
    </summary>
    
      <category term="algorithm" scheme="http://huangwei.pro/categories/algorithm/"/>
    
    
      <category term="trie" scheme="http://huangwei.pro/tags/trie/"/>
    
      <category term="string" scheme="http://huangwei.pro/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Windows Socket IO 模型</title>
    <link href="http://huangwei.pro/2010-11/winsockio/"/>
    <id>http://huangwei.pro/2010-11/winsockio/</id>
    <published>2010-11-20T16:00:00.000Z</published>
    <updated>2016-04-14T08:48:03.569Z</updated>
    
    <content type="html">&lt;h2 id=&quot;套接字架构&quot;&gt;&lt;a href=&quot;#套接字架构&quot; class=&quot;headerlink&quot; title=&quot;套接字架构&quot;&gt;&lt;/a&gt;套接字架构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/winsock1.gif&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;p&gt;应用程序使用Winsock与传输协议驱动沟通时AFD.SYS负责缓冲区的管理。这就意味着当一个程序调用send或者WSASend发送数据时，数据将被复制到AFD.SYS它自己的内部缓冲区中（依赖SO_SNDBUF的设置）WSASend调用立即返回。然后AFD.SYS在程序后台将数据发送出去。当然，如果程序想要处理一个比SO_SNDBUF设置的缓冲区需求更大的发送请求，WSASend的调用就会阻塞直到所有的数据都被发送出去。&lt;/p&gt;
&lt;p&gt;类似的，从远程客户端接收数据时，只要SO_RCVBUF设置的缓冲区还没有满，AFD.SYS就会将数据复制进它自己的缓冲区直到所有的发送都已完成。当程序调用recv或者是WSARecv，数据就从AFD.SYS的缓冲区复制到了程序提供的缓冲区中了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;使用Winsock的时候还会间接碰到另外两种资源的限制。第一个页面锁定的限制。注意重叠操作可能偶然性地以ERROR_INSUFFICIENT_RESOURCES调用失败，这基本上意味着有太多的发送和接收操作在等待中。另外一个限制是操作系统的非分页池（non-paged pool）的限制。&lt;/p&gt;
&lt;h3 id=&quot;阻塞模型&quot;&gt;&lt;a href=&quot;#阻塞模型&quot; class=&quot;headerlink&quot; title=&quot;阻塞模型&quot;&gt;&lt;/a&gt;阻塞模型&lt;/h3&gt;&lt;table&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;&lt;br&gt;&lt;br&gt;&lt;pre class=&quot;prettyprint lang-cpp&quot;&gt;&lt;br&gt;int recv(&lt;br&gt;SOCKET s,&lt;br&gt;char&lt;em&gt; buf,&lt;br&gt;int len,&lt;br&gt;int flags&lt;br&gt;);&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;&lt;br&gt;&lt;br&gt;&lt;pre class=&quot;prettyprint lang-cpp&quot;&gt;&lt;br&gt;int send(&lt;br&gt;SOCKET s,&lt;br&gt;const char buf,&lt;br&gt;int len,&lt;br&gt;int flags&lt;br&gt;);&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;/table&gt;


&lt;p&gt;这种方式最为大家熟悉，Socket默认的就是阻塞模式。&lt;/p&gt;
&lt;p&gt;在recv的时候，Socket会阻塞在那里，直到连接上有数据可读，把数据读到buffer里后recv函数才会返回，不然就会一直阻塞在那里。&lt;/p&gt;
&lt;p&gt;如果在主线程中被阻塞，而数据迟迟没有过来，那么程序就会被锁死。这样的问题可以用多线程解决，但是在有多个套接字连接的情况下，这不是一个好的选择，扩展性很差，而且也容易有锁的问题。线程过多，也导致上下文切换过于频繁，导致系统变慢，而且大部分线程是处于非活动状态的话，这就大大浪费了系统的资源。&lt;/p&gt;
&lt;h3 id=&quot;非阻塞模型&quot;&gt;&lt;a href=&quot;#非阻塞模型&quot; class=&quot;headerlink&quot; title=&quot;非阻塞模型&quot;&gt;&lt;/a&gt;非阻塞模型&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ioctlsocket&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IN SOCKET s,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IN &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; cmd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IN OUT u_long FAR * argp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; FIONBIO &lt;span class=&quot;comment&quot;&gt;/* set/clear non-blocking i/o */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用ioctlsocket函数设置FIONBIO为1就转为非阻塞模式。&lt;/p&gt;
&lt;p&gt;当recv和send函数没有准备好数据时，函数不会阻塞，立即返回错误值，用GetLastError返回的错误码为WSAEWOULDBLOCK，中文解释为“无法立即完成一个非阻挡性套接字的操作”。&lt;/p&gt;
&lt;p&gt;当然，这里你可以用非阻塞模拟阻塞模式，就是用while循环不停调用recv，直到recv返回成功为止。这样的效率也不高，但好处在于你能在没接收到数据时，有空进行其他操作，或者直接Sleep。&lt;/p&gt;
&lt;h3 id=&quot;Select模型&quot;&gt;&lt;a href=&quot;#Select模型&quot; class=&quot;headerlink&quot; title=&quot;Select模型&quot;&gt;&lt;/a&gt;Select模型&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nfds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd_set* readfds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd_set* writefds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd_set* exceptfds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval* timeout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Select模型是非阻塞的，函数内部自动检测WSAEWOULDBLOCK状态，还能有超时设定。对read，write，except三种事件进行分别检测，except指带外数据可读取，read和write的定义是广义的，accept，close等消息也纳入到read。&lt;/p&gt;
&lt;p&gt;Select函数使用fd_set结构，它的结构非常的简单，只有一个数组和计数器。&lt;br&gt;Timeval结构里可以设置超时的时间。&lt;/p&gt;
&lt;p&gt;Select函数返回值表示集合中有事件触发的sock总数，其余操作使用fd_set的宏来完成。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; FD_SETSIZE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; FD_SETSIZE      64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* FD_SETSIZE */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fd_set &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u_int fd_count;               &lt;span class=&quot;comment&quot;&gt;/* how many are SET? */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOCKET  fd_array[FD_SETSIZE];   &lt;span class=&quot;comment&quot;&gt;/* an array of SOCKETs */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; fd_set;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FD_CLR(s, *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FD_ISSET(s, *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FD_SET(s, *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FD_ZERO(*&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Select模型流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fd_set fdread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeval tv = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化fd_set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FD_ZERO(&amp;amp;fdread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nSock; i ++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FD_SET(socks[i], &amp;amp;fdread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 等待事件触发，或超时返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = select(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;fdread, NULL, NULL, &amp;amp;tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; ret &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt; nSock; i ++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 检测哪个sock有事件触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (FD_ISSET(socks[i], &amp;amp;fdread)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            read_buf(socks[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ret --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实select的原理就是对sock集合进行扫描，有事件或者超时则退出，所以select的效率也是和sock数量成线性关系，而且需要我们自己循环检查哪个sock有事件发生。&lt;/p&gt;
&lt;p&gt;它的优点是模型简单，过程清晰，容易管理，支持多个sock服务。缺点也很明显，本质还是个循环的改进版本，而且fd_set里最多只能放64个sock，还有它无法很好的支持sock事件的先后顺序。&lt;/p&gt;
&lt;h3 id=&quot;WSAAsynSelect模型&quot;&gt;&lt;a href=&quot;#WSAAsynSelect模型&quot; class=&quot;headerlink&quot; title=&quot;WSAAsynSelect模型&quot;&gt;&lt;/a&gt;WSAAsynSelect模型&lt;/h3&gt;&lt;p&gt;WSAAsynSelect是Windows特有的，可以在一个套接字上接收以Windows消息为基础的网络事件通知。该模型的实现方法是通过调用WSAAsynSelect函数自动将套接字设置（转变）为非阻塞模式，并向Windows注册一个或多个网络事件lEvent，并提供一个通知时使用的窗口句柄hWnd。当注册的事件发生时，对应的窗口将收到一个基于消息的通知wMsg。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WSAAsyncSelect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOCKET s,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HWND hWnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; wMsg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; lEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;WSAAsyncSelect模型流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; WM_SOCKET WM_USER+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; WINAPI &lt;span class=&quot;title&quot;&gt;WinMain&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HINSTANCE hINstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SOCKET Listen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HWND Window;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建窗口，绑定上WinProc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建sock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WSAStartup(…);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Listen = Socket();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind(…);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WSAAsyscSelect(Listen, Window, WM_SOCKET, FD_ACCEPT | FD_CLOSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen(Listen, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL CALLBACK &lt;span class=&quot;title&quot;&gt;WinProc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HWND hDlg, WORD wMsg, WORD wParam, DWORD lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SOCKET Accept;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(wMsg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WM_SOCKET:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// lParam的高字节包含了可能出现的任何的错误代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// lParam的低字节指定已经发生的网络事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 发生错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(WSAGETSELECTERROR(lParam)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            closesocket…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 事件触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;( WSAGETSELECTEVENT(lParam) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; FD_ACCEPT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; FD_READ:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; FD_WRITE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;WSAAsyncSelect是模仿Windows消息机制来实现的，使用起来很方便，仅仅只是在消息处理中加入了对WM_SOCKET的处理，这样就能严格得按先后顺序处理sock事件。&lt;/p&gt;
&lt;p&gt;MFC中的CSOCKET也采用了这个模型。&lt;/p&gt;
&lt;p&gt;lEvent事件表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Event&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_READ&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想要接收有关是否可读的通知，以便读入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_WRITE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想要接收有关是否可写的通知，以便写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_OOB&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收是否有带外（OOB）数据抵达的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_ACCEPT&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收与进入连接有关的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_CONNECT&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收与一次连接或者多点join操作完成的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_CLOSE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收与套接字关闭有关的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_QOS&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收套接字“服务质量”（QoS）发生更改的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_GROUP_QOS&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收套接字组“服务质量”发生更改的通知（现在没什么用处，为未来套接字组的使用保留）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_ROUTING_INTERFACE_CHANGE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收在指定的方向上，与路由接口发生变化的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;FD_ADDRESS_LIST_CHANGE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用程序想接收针对套接字的协议家族，本地地址列表发生变化的通知&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;只有在以下3种条件下，会发送FD_WRITE事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用connect。连接首次被建立。&lt;/li&gt;
&lt;li&gt;使用accept。套接字被接受。&lt;/li&gt;
&lt;li&gt;使用send，sendto。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的缺点就是，每个sock事件处理需要一个窗口句柄，如果sock很多的情况下，资源和性能可想而知了。&lt;/p&gt;
&lt;h3 id=&quot;WSAEventSelect模型&quot;&gt;&lt;a href=&quot;#WSAEventSelect模型&quot; class=&quot;headerlink&quot; title=&quot;WSAEventSelect模型&quot;&gt;&lt;/a&gt;WSAEventSelect模型&lt;/h3&gt;&lt;p&gt;WSAEventSelect模型类似WSAAsynSelect模型，但最主要的区别是网络事件发生时会被发送到一个Event对象句柄，而不是发送到一个窗口。这样你就可以使用Event对象的特性了。但WSAEventSelect模型明显复杂很多。&lt;/p&gt;
&lt;p&gt;它需要由以下函数一起完成。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 创建事件对象来接收网络事件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;WSAEVENT &lt;span class=&quot;title&quot;&gt;WSACreateEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 将事件对象与套接字关联，同时注册事件，使事件对象的工作状态从未传信转变未已传信。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WSAEventSelect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( SOCKET s,WSAEVENT hEventObject,&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; lNetworkEvents )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. I/O处理后，设置事件对象为未传信&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;WSAResetEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( WSAEVENT hEvent )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. 等待网络事件来触发事件句柄的工作状态：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DWORD &lt;span class=&quot;title&quot;&gt;WSAWaitForMultipleEvents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( DWORD cEvents,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; WSAEVENT FAR * lphEvents, BOOL fWaitAll,DWORD dwTimeout, BOOLfAlertable )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5.  获取网络事件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WSAEnumNetworkEvents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;WSACreateEvent其实跟CreateEvent的效果类似，返回的WSAEVENT类型其实就是HANDLE类型，所以可以直接使用CreateEvent创建特殊的Event。&lt;/p&gt;
&lt;p&gt;sock和Event对象是对应的，当一个套接字有事件发生，WSAWaitForMultipleEvents返回相应的值，通过这个值来索引这个套接字。 但它也和select一样，在Event数组大小上也有限制，MAXIMUM_WAIT_OBJECTS的值为64。&lt;/p&gt;
&lt;p&gt;有了Event对象的支持，signaled/non-signaled和manual reset/auto reset的概念也就可以应用到程序里，这样能使sock事件处理的方式比较丰富灵活。而且它也能严格按先后顺序处理sock事件。&lt;/p&gt;
&lt;p&gt;闪电邮PushMail的处理就是WSAEventSelect模型。&lt;/p&gt;
&lt;h3 id=&quot;Over-Lapped-IO模型&quot;&gt;&lt;a href=&quot;#Over-Lapped-IO模型&quot; class=&quot;headerlink&quot; title=&quot;Over-Lapped IO模型&quot;&gt;&lt;/a&gt;Over-Lapped IO模型&lt;/h3&gt;&lt;p&gt;它和之前模型不同的是，使用重叠模型的应用程序通知缓冲区收发系统直接使用数据，也就是说，如果应用程序投递了一个10KB大小的缓冲区来接收数据，且数据已经到达套接字，则该数据将直接被拷贝到投递的缓冲区。之前的模型都是在套接字的缓冲区中，当通知应用程序接收后，在把数据拷贝到程序的缓冲区。&lt;/p&gt;
&lt;p&gt;这种模型适用于除WindowsCE外的其他Windows平台，该模型是以Windows的重叠IO机制为基础，通过ReadFile和WriteFile，针对设备执行IO操作。&lt;/p&gt;
&lt;p&gt;早先这种机制是用于文件IO，在Socket IO和文件IO统一接口之后，这种机制也被引入Socket IO。但这类模型的实现就相对复杂多了。&lt;/p&gt;
&lt;p&gt;有两个方法可以实现重叠IO请求的完成情况（接到重叠操作完成的通知）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件对象通知（event object notification）。&lt;/li&gt;
&lt;li&gt;完成例程（completion routines）。注意，这里并不是完成端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;WSAOVERLAPPED&quot;&gt;&lt;a href=&quot;#WSAOVERLAPPED&quot; class=&quot;headerlink&quot; title=&quot;WSAOVERLAPPED&quot;&gt;&lt;/a&gt;WSAOVERLAPPED&lt;/h4&gt;&lt;p&gt;重叠结构是不得不提的，之后的完成端口模型也需要用到。这个结构等同于OVERLAPPED。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _WSAOVERLAPPED &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD Internal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD InternalHigh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD Offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD OffsetHigh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WSAEVENT hEvent; &lt;span class=&quot;comment&quot;&gt;// 只关注这个参数，用来关联WSAEvent对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; WSAOVERLAPPED, *LPWSAOVERLAPPED;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用重叠结构，我们常用的send, sendto, recv, recvfrom也都要被WSASend, WSASendto, WSARecv, WSARecvFrom替换掉了，是因为它们的参数中都有一个Overlapped参数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WSARecv&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOCKET s, &lt;span class=&quot;comment&quot;&gt;// [in] 套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPWSABUF lpBuffers, &lt;span class=&quot;comment&quot;&gt;// [in,out] 接收缓冲区，WSABUF的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwBufferCount, &lt;span class=&quot;comment&quot;&gt;// [in] 数组中WSABUF的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPDWORD lpNumberOfBytesRecvd, &lt;span class=&quot;comment&quot;&gt;// [out] 此刻函数所接收到的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPDWORD lpFlags,             &lt;span class=&quot;comment&quot;&gt;// [in,out] 这里设置为0 即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPWSAOVERLAPPED lpOverlapped,  &lt;span class=&quot;comment&quot;&gt;// [in] 绑定重叠结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [in] 完成例程中将会用到的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没有错误且收取立刻完成时，返回值为0，否则是SOCKET_ERROR。常见的错误码是WSA_IO_PENDING，表示重叠操作正在进行。相应的其他函数也是类似参数，具体参考MDSN。&lt;/p&gt;
&lt;p&gt;获取重叠操作的结果，由WSAWaitForMultipleEvents函数来完成。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;WSAGetOverlappedResult&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOCKET s, &lt;span class=&quot;comment&quot;&gt;// [in] 套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPWSAOVERLAPPED lpOverlapped, &lt;span class=&quot;comment&quot;&gt;// [in] 要查询的重叠结构的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPDWORD lpcbTransfer,&lt;span class=&quot;comment&quot;&gt;// [out] 本次重叠操作的实际接收(或发送)的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL fWait, &lt;span class=&quot;comment&quot;&gt;// [in] 设置为TRUE，除非重叠操作完成，否则函数不会返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置FALSE，而且操作仍处于挂起状态，那么函数就会返回FALSE，错误为WSA_IO_INCOMPLETE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPDWORD lpdwFlags &lt;span class=&quot;comment&quot;&gt;// [out] 负责接收结果标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;事件通知&quot;&gt;&lt;a href=&quot;#事件通知&quot; class=&quot;headerlink&quot; title=&quot;事件通知&quot;&gt;&lt;/a&gt;事件通知&lt;/h4&gt;&lt;p&gt;事件等待函数和WaitForMultipleObjects类似。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DWORD &lt;span class=&quot;title&quot;&gt;WSAWaitForMultipleEvents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD cEvents, &lt;span class=&quot;comment&quot;&gt;// [in] 等候事件的总数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; WSAEVENT* lphEvents, &lt;span class=&quot;comment&quot;&gt;// [in] 事件数组的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL fWaitAll, &lt;span class=&quot;comment&quot;&gt;// [in] 是否等待所有事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwTimeout, &lt;span class=&quot;comment&quot;&gt;// [in] 超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL fAlertable &lt;span class=&quot;comment&quot;&gt;// [in] 在完成例程中会用到这个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回值有这么几个：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WSA_WAIT_TIMEOUT&lt;/td&gt;
&lt;td&gt;超时，我们要继续Wait&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WSA_WAIT_FAILED&lt;/td&gt;
&lt;td&gt;出现错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAIT_IO_COMPLETION&lt;/td&gt;
&lt;td&gt;一个或多个完成例程入队列执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WSA_WAIT_EVENT_0 ~ (WSA_WAIT_EVENT_0 + cEvents – 1)&lt;/td&gt;
&lt;td&gt;触发的事件下标&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;事件通知的重叠IO模型大致流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 建立并初始化buf和overlap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WSAOVERLAPPED Overlap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WSABUF DataBuf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* SendBuf = new &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[BufLen];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD Flags = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DataBuf.len = BufLen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DataBuf.buf = SendBuf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Overlap.hEvent = EventArray[dwEventTotal ++] = WSACreateEvent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 在套接字上投递WSARecv请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = WSARecv(Sock, &amp;amp;DataBuf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;NumberOfBytesRecvd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;Flags, &amp;amp;Overlap, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret == SOCKET_ERROR &amp;amp;&amp;amp; WSAGetLastError() != WSA_IO_PENDING)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_handle(…);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. 等待事件通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwIndex = WSAWaitForMultipleEvents(dwEventTotal,EventArray,     FALSE, WSA_INFINITE, FALSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dwIndex == WSA_WAIT_FAILED || dwIndex == WSA_WAIT_TIMEOUT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_handle(…);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dwIndex -= WSA_WAIT_EVENT_0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. 重置事件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WSAResetEvent(EventArray[dwIndex]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5. 取得重叠调用的返回状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwBytesTransferred;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WSAGetOverlappedResult(Sock, Overlap, &amp;amp;dwBytesTransferred, TRUE, &amp;amp;Flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dwBytesTransferred == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closesocket(Sock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dosomething(…);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果是服务端使用事件通知模型，则需要再起一个线程来循环Wait事件通知，主线程则接受请求的连接。&lt;/p&gt;
&lt;p&gt;实际编码过程中，要注意缓冲区不要搞错，因为全都需要自己来管理，稍有不慎就容易写脏数据和越界。还要注意WSARecv时，可能立即有数据返回的情况，即返回值为0且NumberOfBytesRecvd &amp;gt; 0。&lt;/p&gt;
&lt;h4 id=&quot;完成例程&quot;&gt;&lt;a href=&quot;#完成例程&quot; class=&quot;headerlink&quot; title=&quot;完成例程&quot;&gt;&lt;/a&gt;完成例程&lt;/h4&gt;&lt;p&gt;完成例程（Completion Routine），不是完成端口。它是使用APC（Asynchronous Procedure Calls）异步回调函数来实现，大致流程和事件通知模型差不多，只不过WSARecv注册时，加上了lpCompletionRoutine参数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Void CALLBACK &lt;span class=&quot;title&quot;&gt;CompletionROUTINE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwError, &lt;span class=&quot;comment&quot;&gt;// [in] 标志咱们投递的重叠操作完成的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD cbTransferred, &lt;span class=&quot;comment&quot;&gt;// [in] 重叠操作期间，实际传输的字节量是多大&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPWSAOVERLAPPED lpOverlapped, &lt;span class=&quot;comment&quot;&gt;// [in] 传递到最初IO调用的重叠结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwFlags  &lt;span class=&quot;comment&quot;&gt;// [in] 返回操作结束时可能用的标志(一般没用)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但完成例程有一个比较隐晦的地方，就是APC机制本身。&lt;/p&gt;
&lt;h5 id=&quot;APC机制&quot;&gt;&lt;a href=&quot;#APC机制&quot; class=&quot;headerlink&quot; title=&quot;APC机制&quot;&gt;&lt;/a&gt;APC机制&lt;/h5&gt;&lt;p&gt;ReadFileEx / WriteFileEx在发出IO请求的同时，提供一个回调函数（APC过程），当IO请求完成后，一旦线程进入可告警状态，回调函数将会执行。&lt;/p&gt;
&lt;p&gt;以下五个函数能够使线程进入告警状态：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SleepEx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WaitForSingleObjectEx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WaitForMultipleObjectsEx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SignalObjectAndWait&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MsgWaitForMultipleObjectsEx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;线程进入告警状态时，内核将会检查线程的APC队列，如果队列中有APC，将会按FIFO方式依次执行。如果队列为空，线程将会挂起等待事件对象。以后的某个时刻，一旦APC进入队列，线程将会被唤醒执行APC，同时等待函数返回WAIT_IO_COMPLETION。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/winsock2.jpg&quot; alt=&quot;图2&quot;&gt;&lt;/p&gt;
&lt;p&gt;回到完成例程的话题上。&lt;/p&gt;
&lt;p&gt;需要一个辅助线程，辅助线程的工作是判断有没有新的客户端连接被建立，如果有，就为那个客户端套接字激活一个异步的WSARecv操作，然后调用SleepEx使线程处于一种可警告的等待状态，以使得I/O完成后 CompletionROUTINE可以被内核调用，而CompletionROUTINE会在当初激活WSARecv异步操作的代码的同一个线程之内！而且调用SleepEx时，需要把bAlertable参数设为TRUE，这样当有APC唤醒时立即调用完成例程，否则例程就不会被执行。当然也可以使用WSAWaitForMultipleEvents函数，但这样就需要一个事件对象。&lt;/p&gt;
&lt;p&gt;从图中就能看到CompletionROUTINE是在辅助线程（调用过WSARecv）里执行的。&lt;/p&gt;
&lt;h3 id=&quot;Completion-Port模型&quot;&gt;&lt;a href=&quot;#Completion-Port模型&quot; class=&quot;headerlink&quot; title=&quot;Completion Port模型&quot;&gt;&lt;/a&gt;Completion Port模型&lt;/h3&gt;&lt;p&gt;“完成端口”模型是迄今为止最为复杂的一种I/O模型。&lt;/p&gt;
&lt;p&gt;假若一个应用程序同时需要管理为数众多的套接字，那么采用这种模型，往往可以达到最佳的系统性能！它能最大限度的减少上下文切换的同时最大限度的提高系统并发量。但不幸的是，该模型只适用于Windows NT和Windows 2000操作系统。&lt;/p&gt;
&lt;p&gt;因其设计的复杂性，只有在你的应用程序需要同时管理数百乃至上千个套接字的时候，而且希望随着系统内安装的CPU数量的增多，应用程序的性能也可以线性提升，才应考虑采用“完成端口”模型。&lt;/p&gt;
&lt;p&gt;要记住的一个基本准则是，假如要为Windows NT或Windows 2000开发高性能的服务器应用，同时希望为大量套接字I/O请求提供服务（Web服务器便是这方面的典型例子），那么I/O完成端口模型便是最佳选择！&lt;/p&gt;
&lt;p&gt;完成端口是一种WINDOWS内核对象。完成端口用于异步方式的重叠I/O。简单地，可以把完成端口看成系统维护的一个队列，操作系统把重叠IO操作完成的事件通知放到该队列里，由于是暴露 “操作完成”的事件通知，所以命名为“完成端口”（Completion Ports）。&lt;/p&gt;
&lt;p&gt;完成端口内部提供了线程池的管理，可以避免反复创建线程的开销，同时可以根据CPU的个数灵活的决定线程个数，而且可以让减少线程调度的次数从而提高性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/winsock3.gif&quot; alt=&quot;图3&quot;&gt;&lt;/p&gt;
&lt;p&gt;它需要以下函数的支持，CreateIoCompletionPort函数用于创建和绑定完成端口。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;HANDLE &lt;span class=&quot;title&quot;&gt;CreateIoCompletionPort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE FileHandle, &lt;span class=&quot;comment&quot;&gt;// [in] IO句柄对象，这里是套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE ExistingCompletionPort, &lt;span class=&quot;comment&quot;&gt;// [in] 完成端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ULONG_PTR CompletionKey, &lt;span class=&quot;comment&quot;&gt;// [in] 自定义数据指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD NumberOfConcurrentThreads &lt;span class=&quot;comment&quot;&gt;// [in] 最大线程数，0为自动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还需要类似WSAGetOverlappedResult的函数来获取完成端口的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;GetQueuedCompletionStatus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE CompletionPort, &lt;span class=&quot;comment&quot;&gt;// [in] 完成端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPDWORD lpNumberOfBytes, &lt;span class=&quot;comment&quot;&gt;// [out] 此次IO操作的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PULONG_PTR lpCompletionKey, &lt;span class=&quot;comment&quot;&gt;// [out] 自定义数据指针，CreateIoCompletionPort初始化的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPOVERLAPPED* lpOverlapped, &lt;span class=&quot;comment&quot;&gt;// [out] 投递请求时的重叠结构指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwMilliseconds &lt;span class=&quot;comment&quot;&gt;// [in] 超时设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有PostQueuedCompletionStatus函数，能模拟一个完成的重叠I/O操作。我们可以当成类似PostMessage的函数，以此控制工作线程。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;PostQueuedCompletionStatus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE CompletionPort, &lt;span class=&quot;comment&quot;&gt;// [in] 完成端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwNumberOfBytesTransferred, &lt;span class=&quot;comment&quot;&gt;// [in] 此次IO操作的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ULONG_PTR dwCompletionKey, &lt;span class=&quot;comment&quot;&gt;// [in] 自定义数据指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPOVERLAPPED lpOverlapped &lt;span class=&quot;comment&quot;&gt;// [in] 重叠结构指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成端口模型大致流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 参数设空，就能创建完成端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE CompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE,NULL,NULL,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 创建工作线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD dwThreadId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SYSTEM_INFO sysinfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetSystemInfo(&amp;amp;sysinfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sysinfo.dwNumberOfProcessors; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CreateThread(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, iocp_work_thread, CompletionPort, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;dwThreadId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. 建立并初始化buf和overlap（参照重叠IO）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. 将套接字绑定到完成端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CreateIoCompletionPort((HANDLE)Sock,CompletionPort,Sock,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5. 在套接字上投递WSARecv请求（参照重叠IO）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6. 在工作线程中取本次I/O的相关信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetQueuedCompletionStatus(CompletionPort,&amp;amp;dwBytesTransferred,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(DWORD*)&amp;amp;Sock,(LPOVERLAPPED*)&amp;amp;lpPerIOData,INFINITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dwBytesTransferred == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closesocket(Sock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dosomething(…);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;测试图例&quot;&gt;&lt;a href=&quot;#测试图例&quot; class=&quot;headerlink&quot; title=&quot;测试图例&quot;&gt;&lt;/a&gt;测试图例&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;来自于《Windows网络编程》的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/img/winsock4.jpg&quot; alt=&quot;图4&quot;&gt;&lt;/p&gt;
&lt;p&gt;阻塞模型难以应对大规模的客户连接，因为它在创建线程上耗费了太多的系统资源。因此，服务器创建太多的线程后，再调用CreateThread函数时，将返回ERROR_NOT_ENOUGH_MEMORY的错误，那些发出连接请求的客户则收到WSAECONNREFUSED的错误提示，表示连接的尝试被拒绝。其并发处理量是极难突破的。&lt;/p&gt;
&lt;p&gt;非阻塞模型和Select模型的性能要比阻塞模式稍好，但是占用了太多的CPU处理时间。瓶颈在于，fd_set集合的线性扫描上。还需要注意的一个问题就是，非分页池（即直接在物理内存中分配的内存）的使用极高。这是因为AFD（Ancillary Function Driver,由afd.sys提供的支持Windows Sockets应用程序的底层驱动程序，其中运行在内核模式下afd.sys驱动程序主要管理Winsock TCP/IP通信）和TCP都将使用I/O缓存，因为服务器读取数据的速度是有限的，相对于CPU的处理速度而言，I/O基本是零字节的吞吐量。&lt;/p&gt;
&lt;p&gt;基于Windows消息机制的WSAAsyncSelect模型能够处理一定的客户连接量，但是扩展性也不是很好。因为消息泵很快就会阻塞，降低了消息处理的速度。在几次测试中，服务器只能处理大约1/3的客户端连接。过多的客户端连接请求都将返回错误提示码WSAECONNREFUSED。上表中的数据可以发现，对那些已经建立的连接，其平均吞吐量也是极低的。&lt;/p&gt;
&lt;p&gt;基于事件通知的WSAEventSelect模型表现得出奇的不错。在所有的测试中，大多数时候，服务器基本能够处理所有的客户连接，并且保持着较高的数据吞吐量。这种模型的缺点是，每当有一个新连接时，需要动态管理线程池，因为每个线程只能够等待64个事件对象。但最后，服务器不能再接受更多的连接，原因是WSAENOBUFS（无可用的缓冲区空间），套接字无法创建。另外，客户端程序也达到了极限，不能维持已经建立的连接。&lt;/p&gt;
&lt;p&gt;事件通知的重叠I/O模型和WSAEventSelect模型在伸缩性上差不多。这两种模型都依赖于等待事件通知的线程池，处理客户通信时，大量线程上下文的切换是它们共同的制约因素。重叠I/O模型和WSAEventSelect模型的测试结果很相似，都表现得不错，直到线程数量超过极限。&lt;/p&gt;
&lt;p&gt;例程通知的重叠I/O模型，性能和事件通知的重叠I/O模型相同，但因为以下几个原因，也不是开发高性能服务器的最佳选择。首先，许多扩展功能不允许使用APC完成通知。其次，由于APC在系统内部特有的处理机制，应用程序线程可能无限等待而得不到完成通知。当一个线程处于“可警告状态”时，所有挂起的APC按照先进先出的顺序（FIFO）接受处理。&lt;/p&gt;
&lt;p&gt;完成端口模型的是所有I/O模型中性能最佳的。内存使用率（包括用户分页池和非分页池）基本差不多。真正不同的地方，在于对CPU的占用。完成端口模型只占用了60%的CPU，但是在维持同样规模的连接量时，另外两种模型（基于事件通知的重叠I/O模型和WSAEventSelect模型）占用更多的CPU。完成端口的另外一个明显的优势是，它维持更大的吞吐量。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;客户端的选择&quot;&gt;&lt;a href=&quot;#客户端的选择&quot; class=&quot;headerlink&quot; title=&quot;客户端的选择&quot;&gt;&lt;/a&gt;客户端的选择&lt;/h3&gt;&lt;p&gt;为了能在一定程度上提升性能，建议使用重叠IO模型或者WSAEventSelect模型。&lt;/p&gt;
&lt;p&gt;如果是窗口程序，且socket不多的情况下，可以使用WSAAsyncSelect模型。&lt;/p&gt;
&lt;p&gt;当然，如果性能啥的都不需要考虑的，那简洁的Select模式值得被考虑。&lt;/p&gt;
&lt;h3 id=&quot;服务端的选择&quot;&gt;&lt;a href=&quot;#服务端的选择&quot; class=&quot;headerlink&quot; title=&quot;服务端的选择&quot;&gt;&lt;/a&gt;服务端的选择&lt;/h3&gt;&lt;p&gt;既然是服务端，必然要需要性能不错的。&lt;/p&gt;
&lt;p&gt;重叠IO模型可以使你在给定的时间段内同时控制多个套接字。&lt;/p&gt;
&lt;p&gt;但是，如果服务器在任意时间里都有大量IO请求，那就用完成端口模型。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Windows核心编程;&lt;/li&gt;
&lt;li&gt;手把手教你玩转SOCKET模型之重叠I/O篇;&lt;br&gt;&lt;a href=&quot;http://dev.csdn.net/htmls/39/39122.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dev.csdn.net/htmls/39/39122.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手把手教你玩转网络编程模型之完成例程(Completion Routine)篇;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/PiggyXP/archive/2009/02/19/3910726.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/PiggyXP/archive/2009/02/19/3910726.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows Sockets 2.0: Write Scalable Winsock Apps Using Completion Ports;&lt;a href=&quot;http://msdn.microsoft.com/zh-cn/magazine/cc302334(en-us&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msdn.microsoft.com/zh-cn/magazine/cc302334(en-us).aspx&lt;/a&gt;.aspx)&lt;/li&gt;
&lt;li&gt;Inside I/O Completion Ports;&lt;a href=&quot;http://hi.baidu.com/jrckkyy/blog/item/401422527c131b070df3e37b.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hi.baidu.com/jrckkyy/blog/item/401422527c131b070df3e37b.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows 2000 非分页池被 Afd.sys 耗尽;&lt;a href=&quot;http://support.microsoft.com/kb/296265/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://support.microsoft.com/kb/296265/zh-cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WinSock五种I/O模型的性能分析;&lt;a href=&quot;http://www.rover12421.com/2010/04/02/winsock%E4%BA%94%E7%A7%8Dio%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.rover12421.com/2010/04/02/winsock%E4%BA%94%E7%A7%8Dio%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Windows Socket IO 的所有模型。
    
    </summary>
    
      <category term="develop" scheme="http://huangwei.pro/categories/develop/"/>
    
    
      <category term="socket" scheme="http://huangwei.pro/tags/socket/"/>
    
      <category term="windows" scheme="http://huangwei.pro/tags/windows/"/>
    
  </entry>
  
</feed>
